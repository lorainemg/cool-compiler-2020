
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programarroba case ccur class colon comma cpar div dot else equal esac false fi id if in inherits isvoid larrow less lesseq let loop minus new not nox num ocur of opar plus pool rarrow semi star string then true type whileprogram : class_listepsilon :class_list : def_class class_list \n                      | def_classclass_list : error class_listdef_class : class type ocur feature_list ccur semi \n                     | class type inherits type ocur feature_list ccur semidef_class : class error ocur feature_list ccur semi \n                     | class type ocur feature_list ccur error   \n                     | class error inherits type ocur feature_list ccur semi\n                     | class error inherits error ocur feature_list ccur semi\n                     | class type inherits error ocur feature_list ccur semi\n                     | class type inherits type ocur feature_list ccur errorfeature_list : epsilon\n                        | def_attr semi feature_list\n                        | def_func semi feature_listfeature_list : error feature_listdef_attr : id colon type\n                    | id colon type larrow exprdef_attr : error colon type\n                    | id colon error\n                    | error colon type larrow expr\n                    | id colon error larrow expr\n                    | id colon type larrow errordef_func : id opar formals cpar colon type ocur expr ccurdef_func : error opar formals cpar colon type ocur expr ccur\n                    | id opar error cpar colon type ocur expr ccur\n                    | id opar formals cpar colon error ocur expr ccur\n                    | id opar formals cpar colon type ocur error ccurformals  : param_list\n                    | param_list_empty\n        param_list : param\n                      | param comma param_listparam_list : error comma param_list\n                      | param comma errorparam_list_empty : epsilonparam : id colon typelet_list : let_assign\n                    | let_assign comma let_listlet_list : error let_list\n                    | errorlet_assign : param larrow expr\n                      | paramcases_list : casep semi\n                      | casep semi cases_listcases_list : error cases_list\n                      | error semicasep : id colon type rarrow exprexpr : id larrow expr\n                 | comp\n        comp : comp less op\n                | comp lesseq op\n                | comp equal op\n                | opcomp : comp less error\n                | comp lesseq error\n                | comp equal errorop : op plus term\n              | op minus term\n              | termop : op plus error\n              | op minus errorterm : term star base_call\n                | term div base_call\n                | isvoid base_call\n                | nox base_call\n                | base_callterm : term star error\n                | term div error\n                | isvoid error\n                | nox errorbase_call : factor arroba type dot func_call\n                     | factorbase_call : error arroba type dot func_call\n                     | factor arroba error dot func_call\n        factor : atom\n                  | opar expr cparfactor : opar expr error\n                  | error expr cpar\n                  | opar error cparfactor : factor dot func_call\n                  | not expr\n                  | func_callfactor : let let_list in exprfactor : let error in expr\n                | let let_list in error\n                | let let_list error exprfactor : case expr of cases_list esacfactor : case error of cases_list esac\n                | case expr of error esac\n                | case expr error cases_list esac\n                | case expr of cases_list errorfactor : if expr then expr else expr fifactor : if error then expr else expr fi\n                | if expr then error else expr fi\n                | if expr then expr else error fi\n                | if expr error expr else expr fi\n                | if expr then expr error error expr fi\n                | if expr then expr error expr fi\n                | if expr then expr else expr error\n                | if error fifactor : while expr loop expr poolfactor : while error loop expr pool\n                | while expr loop error pool\n                | while expr loop expr error\n                | while expr error expr loop expr pool\n                | while expr error expr poolatom : numatom : idatom : new typeatom : new erroratom : ocur block ccuratom : error block ccur\n                | ocur error ccur\n                | ocur block erroratom : true\n                | falseatom : stringblock : expr semi\n                 | expr semi blockblock : error block\n                 | error semifunc_call : id opar args cparfunc_call : id opar error cpar\n                     | error opar args cparargs : arg_list\n                | arg_list_empty\n        arg_list : expr  \n                    | expr comma arg_listarg_list : error arg_listarg_list_empty : epsilon'
    
_lr_action_items = {'error':([0,3,4,5,10,11,12,13,15,25,28,29,30,31,32,33,34,36,37,38,39,56,59,60,62,64,65,68,72,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,100,102,104,106,107,108,109,110,111,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,154,155,157,158,159,160,162,166,168,170,171,172,173,174,175,176,177,178,179,180,181,182,183,186,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,238,241,242,245,246,251,254,256,257,258,259,260,261,262,263,264,266,267,268,269,270,271,272,273,274,275,276,277,278,284,286,287,289,294,295,296,297,298,300,301,302,303,305,],[4,4,4,9,15,21,15,23,15,39,41,15,15,51,53,15,15,15,15,-6,-9,-8,72,41,99,102,72,107,111,-109,-50,-54,-60,-67,126,129,-73,-83,-76,133,72,136,140,142,144,-108,146,148,-116,-117,-118,-37,111,152,-7,-13,-12,-11,-10,111,160,72,168,171,173,175,177,179,181,183,-65,111,-109,-66,111,185,188,190,111,-82,193,194,-38,-43,200,111,203,111,207,111,-110,-111,210,111,-121,-122,-79,111,-113,218,190,-49,218,-51,111,-52,111,-53,111,-58,111,-59,111,-63,111,-64,111,-81,-77,-78,-80,229,72,194,72,-40,194,72,235,238,238,242,72,72,-101,246,72,72,-112,-115,-114,72,251,72,72,188,-120,218,-125,256,-123,-124,188,188,256,-84,111,-87,-85,-39,-42,260,238,238,269,111,274,111,111,-74,218,-72,-75,-88,-92,-90,-46,-47,238,-91,-89,287,289,72,72,72,-102,-105,-104,72,-107,-103,-45,296,111,111,72,-93,-100,-96,-99,-95,-97,-94,-106,-98,]),'class':([0,3,4,38,39,56,106,107,108,109,110,],[5,5,5,-6,-9,-8,-7,-13,-12,-11,-10,]),'$end':([1,2,3,6,7,38,39,56,106,107,108,109,110,],[0,-1,-4,-3,-5,-6,-9,-8,-7,-13,-12,-11,-10,]),'type':([5,11,13,27,31,63,91,97,104,105,112,130,265,],[8,20,24,40,50,100,145,150,151,153,156,184,285,]),'ocur':([8,9,20,21,23,24,59,64,65,72,79,80,84,85,87,88,89,92,102,111,115,116,117,118,119,120,121,122,123,124,126,129,133,140,142,144,148,150,151,152,153,158,160,168,171,173,175,177,179,181,183,192,193,195,198,202,203,204,206,207,208,212,213,214,215,218,222,227,229,242,246,251,256,268,269,270,271,272,276,287,289,294,],[10,12,33,34,36,37,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,212,213,214,215,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,]),'inherits':([8,9,],[11,13,]),'ccur':([10,12,14,15,16,22,26,29,30,33,34,36,37,48,49,54,55,57,58,74,75,76,77,78,81,82,83,90,93,94,95,114,125,126,127,128,129,134,145,146,147,148,154,155,157,158,159,166,170,171,172,173,174,175,176,177,178,179,180,181,182,183,186,189,190,191,205,209,210,211,217,221,223,224,228,229,230,231,249,250,251,252,253,254,257,258,259,260,261,266,267,273,274,275,277,278,295,296,297,298,300,301,302,303,305,],[-2,-2,25,-2,-14,35,-17,-2,-2,-2,-2,-2,-2,-15,-16,68,69,70,71,-109,-50,-54,-60,-67,-73,-83,-76,-108,-116,-117,-118,159,-65,-70,-109,-66,-71,-82,-110,-111,209,211,159,-122,-79,-119,-113,-49,-51,-55,-52,-56,-53,-57,-58,-61,-59,-62,-63,-68,-64,-69,-81,-77,-78,-80,-101,-112,-115,-114,-120,-125,-123,-124,-84,-86,-87,-85,279,280,281,282,283,-74,-72,-75,-88,-92,-90,-91,-89,-102,-105,-104,-107,-103,-93,-100,-96,-99,-95,-97,-94,-106,-98,]),'id':([10,12,15,28,29,30,32,33,34,36,37,59,60,62,64,65,72,79,80,84,85,86,87,88,89,92,102,111,115,116,117,118,119,120,121,122,123,124,126,129,131,133,136,140,142,144,148,158,160,168,171,173,175,177,179,181,183,192,193,194,195,197,198,199,200,201,202,203,204,206,207,208,212,213,214,215,216,218,222,225,226,227,229,235,238,242,246,251,256,264,268,269,270,271,272,276,287,289,294,],[19,19,19,47,19,19,47,19,19,19,19,74,47,47,74,74,74,127,127,74,74,47,74,74,74,74,74,74,74,74,74,127,127,127,127,127,127,127,74,74,187,74,47,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,47,74,47,74,237,237,237,74,74,74,74,74,74,74,74,74,74,187,74,74,187,187,74,74,237,237,74,74,74,74,237,74,74,74,74,74,74,74,74,74,]),'colon':([15,19,47,61,66,67,237,],[27,31,63,97,104,105,265,]),'opar':([15,19,59,64,65,72,74,79,80,84,85,87,88,89,92,102,111,115,116,117,118,119,120,121,122,123,124,126,127,129,133,140,142,144,148,158,160,168,171,173,175,177,179,181,183,187,188,192,193,195,198,202,203,204,206,207,208,212,213,214,215,218,222,227,229,242,246,251,256,268,269,270,271,272,276,287,289,294,],[28,32,84,84,84,115,117,84,84,84,84,84,84,84,84,115,115,84,84,84,84,84,84,84,84,84,84,115,117,115,115,115,115,115,115,84,115,115,115,115,115,115,115,115,115,117,227,84,84,84,84,84,84,84,84,84,84,84,84,84,84,115,84,84,115,115,115,115,115,84,84,84,84,84,84,115,115,84,]),'semi':([17,18,25,35,40,50,51,68,69,70,71,73,74,75,76,77,78,81,82,83,90,93,94,95,101,102,103,111,113,125,126,127,128,129,134,145,146,148,149,157,159,166,170,171,172,173,174,175,176,177,178,179,180,181,182,183,186,189,190,191,205,209,210,211,218,220,221,223,224,228,229,230,231,235,236,238,254,257,258,259,260,261,266,267,273,274,275,277,278,279,280,281,282,283,295,296,297,298,299,300,301,302,303,304,305,],[29,30,38,56,-20,-18,-21,106,108,109,110,-22,-109,-50,-54,-60,-67,-73,-83,-76,-108,-116,-117,-118,-19,-24,-23,155,158,-65,-70,-109,-66,-71,-82,-110,-111,155,158,-79,-113,-49,-51,-55,-52,-56,-53,-57,-58,-61,-59,-62,-63,-68,-64,-69,-81,-77,-78,-80,-101,-112,-115,-114,155,158,-125,-123,-124,-84,-86,-87,-85,263,264,263,-74,-72,-75,-88,-92,-90,-91,-89,-102,-105,-104,-107,-103,-26,-25,-29,-28,-27,-93,-100,-96,-99,158,-95,-97,-94,-106,-48,-98,]),'cpar':([28,32,42,43,44,45,46,52,53,74,75,76,77,78,81,82,83,90,93,94,95,96,98,99,100,113,115,117,125,126,127,128,129,132,133,134,145,146,157,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,186,189,190,191,205,209,210,211,219,220,221,223,224,227,228,229,230,231,254,255,257,258,259,260,261,266,267,273,274,275,277,278,295,296,297,298,299,300,301,302,303,305,],[-2,-2,61,-30,-31,-32,-36,66,67,-109,-50,-54,-60,-67,-73,-83,-76,-108,-116,-117,-118,-34,-33,-35,-37,157,-2,-2,-65,-70,-109,-66,-71,189,191,-82,-110,-111,-79,-113,191,221,189,-126,-127,-131,-49,223,224,-128,-51,-55,-52,-56,-53,-57,-58,-61,-59,-62,-63,-68,-64,-69,-81,-77,-78,-80,-101,-112,-115,-114,-130,157,-125,-123,-124,-2,-84,-86,-87,-85,-74,-129,-72,-75,-88,-92,-90,-91,-89,-102,-105,-104,-107,-103,-93,-100,-96,-99,157,-95,-97,-94,-106,-98,]),'larrow':([40,50,51,74,100,138,],[59,64,65,116,-37,198,]),'comma':([41,45,53,74,75,76,77,78,81,82,83,90,93,94,95,99,100,125,126,127,128,129,134,137,138,145,146,157,159,162,166,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,186,189,190,191,205,209,210,211,220,221,223,224,228,229,230,231,233,254,257,258,259,260,261,266,267,273,274,275,277,278,295,296,297,298,300,301,302,303,305,],[60,62,60,-109,-50,-54,-60,-67,-73,-83,-76,-108,-116,-117,-118,60,-37,-65,-70,-109,-66,-71,-82,197,-43,-110,-111,-79,-113,222,-49,222,-51,-55,-52,-56,-53,-57,-58,-61,-59,-62,-63,-68,-64,-69,-81,-77,-78,-80,-101,-112,-115,-114,222,-125,-123,-124,-84,-86,-87,-85,-42,-74,-72,-75,-88,-92,-90,-91,-89,-102,-105,-104,-107,-103,-93,-100,-96,-99,-95,-97,-94,-106,-98,]),'isvoid':([59,64,65,72,84,85,87,88,89,92,102,111,115,116,117,118,119,120,121,122,126,129,133,140,142,144,148,158,160,168,171,173,175,177,179,181,183,192,193,195,198,202,203,204,206,207,208,212,213,214,215,218,222,227,229,242,246,251,256,268,269,270,271,272,276,287,289,294,],[79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,]),'nox':([59,64,65,72,84,85,87,88,89,92,102,111,115,116,117,118,119,120,121,122,126,129,133,140,142,144,148,158,160,168,171,173,175,177,179,181,183,192,193,195,198,202,203,204,206,207,208,212,213,214,215,218,222,227,229,242,246,251,256,268,269,270,271,272,276,287,289,294,],[80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,]),'not':([59,64,65,72,79,80,84,85,87,88,89,92,102,111,115,116,117,118,119,120,121,122,123,124,126,129,133,140,142,144,148,158,160,168,171,173,175,177,179,181,183,192,193,195,198,202,203,204,206,207,208,212,213,214,215,218,222,227,229,242,246,251,256,268,269,270,271,272,276,287,289,294,],[85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,]),'let':([59,64,65,72,79,80,84,85,87,88,89,92,102,111,115,116,117,118,119,120,121,122,123,124,126,129,133,140,142,144,148,158,160,168,171,173,175,177,179,181,183,192,193,195,198,202,203,204,206,207,208,212,213,214,215,218,222,227,229,242,246,251,256,268,269,270,271,272,276,287,289,294,],[86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,]),'case':([59,64,65,72,79,80,84,85,87,88,89,92,102,111,115,116,117,118,119,120,121,122,123,124,126,129,133,140,142,144,148,158,160,168,171,173,175,177,179,181,183,192,193,195,198,202,203,204,206,207,208,212,213,214,215,218,222,227,229,242,246,251,256,268,269,270,271,272,276,287,289,294,],[87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,]),'if':([59,64,65,72,79,80,84,85,87,88,89,92,102,111,115,116,117,118,119,120,121,122,123,124,126,129,133,140,142,144,148,158,160,168,171,173,175,177,179,181,183,192,193,195,198,202,203,204,206,207,208,212,213,214,215,218,222,227,229,242,246,251,256,268,269,270,271,272,276,287,289,294,],[88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,]),'while':([59,64,65,72,79,80,84,85,87,88,89,92,102,111,115,116,117,118,119,120,121,122,123,124,126,129,133,140,142,144,148,158,160,168,171,173,175,177,179,181,183,192,193,195,198,202,203,204,206,207,208,212,213,214,215,218,222,227,229,242,246,251,256,268,269,270,271,272,276,287,289,294,],[89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,]),'num':([59,64,65,72,79,80,84,85,87,88,89,92,102,111,115,116,117,118,119,120,121,122,123,124,126,129,133,140,142,144,148,158,160,168,171,173,175,177,179,181,183,192,193,195,198,202,203,204,206,207,208,212,213,214,215,218,222,227,229,242,246,251,256,268,269,270,271,272,276,287,289,294,],[90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,]),'new':([59,64,65,72,79,80,84,85,87,88,89,92,102,111,115,116,117,118,119,120,121,122,123,124,126,129,133,140,142,144,148,158,160,168,171,173,175,177,179,181,183,192,193,195,198,202,203,204,206,207,208,212,213,214,215,218,222,227,229,242,246,251,256,268,269,270,271,272,276,287,289,294,],[91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,]),'true':([59,64,65,72,79,80,84,85,87,88,89,92,102,111,115,116,117,118,119,120,121,122,123,124,126,129,133,140,142,144,148,158,160,168,171,173,175,177,179,181,183,192,193,195,198,202,203,204,206,207,208,212,213,214,215,218,222,227,229,242,246,251,256,268,269,270,271,272,276,287,289,294,],[93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,]),'false':([59,64,65,72,79,80,84,85,87,88,89,92,102,111,115,116,117,118,119,120,121,122,123,124,126,129,133,140,142,144,148,158,160,168,171,173,175,177,179,181,183,192,193,195,198,202,203,204,206,207,208,212,213,214,215,218,222,227,229,242,246,251,256,268,269,270,271,272,276,287,289,294,],[94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,]),'string':([59,64,65,72,79,80,84,85,87,88,89,92,102,111,115,116,117,118,119,120,121,122,123,124,126,129,133,140,142,144,148,158,160,168,171,173,175,177,179,181,183,192,193,195,198,202,203,204,206,207,208,212,213,214,215,218,222,227,229,242,246,251,256,268,269,270,271,272,276,287,289,294,],[95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,]),'arroba':([72,74,75,76,77,78,81,82,83,90,93,94,95,102,111,125,126,127,128,129,133,134,140,142,144,145,146,148,157,159,160,166,168,170,171,172,173,174,175,176,177,178,179,180,181,182,183,186,189,190,191,205,209,210,211,218,221,223,224,228,229,230,231,242,246,251,254,256,257,258,259,260,261,266,267,273,274,275,277,278,287,289,295,296,297,298,300,301,302,303,305,],[112,-109,-50,-54,-60,-67,130,-83,-76,-108,-116,-117,-118,112,112,-65,112,-109,-66,112,112,-82,112,112,112,-110,-111,112,-79,-113,112,-49,112,-51,112,-52,112,-53,112,-58,112,-59,112,-63,112,-64,112,-81,-77,-78,-80,-101,-112,-115,-114,112,-125,-123,-124,-84,112,-87,-85,112,112,112,-74,112,-72,-75,-88,-92,-90,-91,-89,-102,-105,-104,-107,-103,112,112,-93,-100,-96,-99,-95,-97,-94,-106,-98,]),'dot':([74,75,76,77,78,81,82,83,90,93,94,95,125,126,127,128,129,134,145,146,156,157,159,166,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,189,190,191,205,209,210,211,221,223,224,228,229,230,231,254,257,258,259,260,261,266,267,273,274,275,277,278,295,296,297,298,300,301,302,303,305,],[-109,-50,-54,-60,-67,131,-83,-76,-108,-116,-117,-118,-65,-70,-109,-66,-71,-82,-110,-111,216,-79,-113,-49,-51,-55,-52,-56,-53,-57,-58,-61,-59,-62,-63,-68,-64,-69,225,226,-81,-77,-78,-80,-101,-112,-115,-114,-125,-123,-124,-84,-86,-87,-85,-74,-72,-75,-88,-92,-90,-91,-89,-102,-105,-104,-107,-103,-93,-100,-96,-99,-95,-97,-94,-106,-98,]),'star':([74,75,76,77,78,81,82,83,90,93,94,95,125,126,127,128,129,134,145,146,157,159,166,170,171,172,173,174,175,176,177,178,179,180,181,182,183,186,189,190,191,205,209,210,211,221,223,224,228,229,230,231,254,257,258,259,260,261,266,267,273,274,275,277,278,295,296,297,298,300,301,302,303,305,],[-109,-50,-54,123,-67,-73,-83,-76,-108,-116,-117,-118,-65,-70,-109,-66,-71,-82,-110,-111,-79,-113,-49,-51,-55,-52,-56,-53,-57,123,-61,123,-62,-63,-68,-64,-69,-81,-77,-78,-80,-101,-112,-115,-114,-125,-123,-124,-84,-86,-87,-85,-74,-72,-75,-88,-92,-90,-91,-89,-102,-105,-104,-107,-103,-93,-100,-96,-99,-95,-97,-94,-106,-98,]),'div':([74,75,76,77,78,81,82,83,90,93,94,95,125,126,127,128,129,134,145,146,157,159,166,170,171,172,173,174,175,176,177,178,179,180,181,182,183,186,189,190,191,205,209,210,211,221,223,224,228,229,230,231,254,257,258,259,260,261,266,267,273,274,275,277,278,295,296,297,298,300,301,302,303,305,],[-109,-50,-54,124,-67,-73,-83,-76,-108,-116,-117,-118,-65,-70,-109,-66,-71,-82,-110,-111,-79,-113,-49,-51,-55,-52,-56,-53,-57,124,-61,124,-62,-63,-68,-64,-69,-81,-77,-78,-80,-101,-112,-115,-114,-125,-123,-124,-84,-86,-87,-85,-74,-72,-75,-88,-92,-90,-91,-89,-102,-105,-104,-107,-103,-93,-100,-96,-99,-95,-97,-94,-106,-98,]),'plus':([74,75,76,77,78,81,82,83,90,93,94,95,125,126,127,128,129,134,145,146,157,159,166,170,171,172,173,174,175,176,177,178,179,180,181,182,183,186,189,190,191,205,209,210,211,221,223,224,228,229,230,231,254,257,258,259,260,261,266,267,273,274,275,277,278,295,296,297,298,300,301,302,303,305,],[-109,-50,121,-60,-67,-73,-83,-76,-108,-116,-117,-118,-65,-70,-109,-66,-71,-82,-110,-111,-79,-113,-49,121,-55,121,-56,121,-57,-58,-61,-59,-62,-63,-68,-64,-69,-81,-77,-78,-80,-101,-112,-115,-114,-125,-123,-124,-84,-86,-87,-85,-74,-72,-75,-88,-92,-90,-91,-89,-102,-105,-104,-107,-103,-93,-100,-96,-99,-95,-97,-94,-106,-98,]),'minus':([74,75,76,77,78,81,82,83,90,93,94,95,125,126,127,128,129,134,145,146,157,159,166,170,171,172,173,174,175,176,177,178,179,180,181,182,183,186,189,190,191,205,209,210,211,221,223,224,228,229,230,231,254,257,258,259,260,261,266,267,273,274,275,277,278,295,296,297,298,300,301,302,303,305,],[-109,-50,122,-60,-67,-73,-83,-76,-108,-116,-117,-118,-65,-70,-109,-66,-71,-82,-110,-111,-79,-113,-49,122,-55,122,-56,122,-57,-58,-61,-59,-62,-63,-68,-64,-69,-81,-77,-78,-80,-101,-112,-115,-114,-125,-123,-124,-84,-86,-87,-85,-74,-72,-75,-88,-92,-90,-91,-89,-102,-105,-104,-107,-103,-93,-100,-96,-99,-95,-97,-94,-106,-98,]),'less':([74,75,76,77,78,81,82,83,90,93,94,95,125,126,127,128,129,134,145,146,157,159,166,170,171,172,173,174,175,176,177,178,179,180,181,182,183,186,189,190,191,205,209,210,211,221,223,224,228,229,230,231,254,257,258,259,260,261,266,267,273,274,275,277,278,295,296,297,298,300,301,302,303,305,],[-109,118,-54,-60,-67,-73,-83,-76,-108,-116,-117,-118,-65,-70,-109,-66,-71,-82,-110,-111,-79,-113,-49,-51,-55,-52,-56,-53,-57,-58,-61,-59,-62,-63,-68,-64,-69,-81,-77,-78,-80,-101,-112,-115,-114,-125,-123,-124,-84,-86,-87,-85,-74,-72,-75,-88,-92,-90,-91,-89,-102,-105,-104,-107,-103,-93,-100,-96,-99,-95,-97,-94,-106,-98,]),'lesseq':([74,75,76,77,78,81,82,83,90,93,94,95,125,126,127,128,129,134,145,146,157,159,166,170,171,172,173,174,175,176,177,178,179,180,181,182,183,186,189,190,191,205,209,210,211,221,223,224,228,229,230,231,254,257,258,259,260,261,266,267,273,274,275,277,278,295,296,297,298,300,301,302,303,305,],[-109,119,-54,-60,-67,-73,-83,-76,-108,-116,-117,-118,-65,-70,-109,-66,-71,-82,-110,-111,-79,-113,-49,-51,-55,-52,-56,-53,-57,-58,-61,-59,-62,-63,-68,-64,-69,-81,-77,-78,-80,-101,-112,-115,-114,-125,-123,-124,-84,-86,-87,-85,-74,-72,-75,-88,-92,-90,-91,-89,-102,-105,-104,-107,-103,-93,-100,-96,-99,-95,-97,-94,-106,-98,]),'equal':([74,75,76,77,78,81,82,83,90,93,94,95,125,126,127,128,129,134,145,146,157,159,166,170,171,172,173,174,175,176,177,178,179,180,181,182,183,186,189,190,191,205,209,210,211,221,223,224,228,229,230,231,254,257,258,259,260,261,266,267,273,274,275,277,278,295,296,297,298,300,301,302,303,305,],[-109,120,-54,-60,-67,-73,-83,-76,-108,-116,-117,-118,-65,-70,-109,-66,-71,-82,-110,-111,-79,-113,-49,-51,-55,-52,-56,-53,-57,-58,-61,-59,-62,-63,-68,-64,-69,-81,-77,-78,-80,-101,-112,-115,-114,-125,-123,-124,-84,-86,-87,-85,-74,-72,-75,-88,-92,-90,-91,-89,-102,-105,-104,-107,-103,-93,-100,-96,-99,-95,-97,-94,-106,-98,]),'of':([74,75,76,77,78,81,82,83,90,93,94,95,125,126,127,128,129,134,139,140,145,146,157,159,166,170,171,172,173,174,175,176,177,178,179,180,181,182,183,186,189,190,191,205,209,210,211,221,223,224,228,229,230,231,254,257,258,259,260,261,266,267,273,274,275,277,278,295,296,297,298,300,301,302,303,305,],[-109,-50,-54,-60,-67,-73,-83,-76,-108,-116,-117,-118,-65,-70,-109,-66,-71,-82,199,201,-110,-111,-79,-113,-49,-51,-55,-52,-56,-53,-57,-58,-61,-59,-62,-63,-68,-64,-69,-81,-77,-78,-80,-101,-112,-115,-114,-125,-123,-124,-84,-86,-87,-85,-74,-72,-75,-88,-92,-90,-91,-89,-102,-105,-104,-107,-103,-93,-100,-96,-99,-95,-97,-94,-106,-98,]),'then':([74,75,76,77,78,81,82,83,90,93,94,95,125,126,127,128,129,134,141,142,145,146,157,159,166,170,171,172,173,174,175,176,177,178,179,180,181,182,183,186,189,190,191,205,209,210,211,221,223,224,228,229,230,231,254,257,258,259,260,261,266,267,273,274,275,277,278,295,296,297,298,300,301,302,303,305,],[-109,-50,-54,-60,-67,-73,-83,-76,-108,-116,-117,-118,-65,-70,-109,-66,-71,-82,202,204,-110,-111,-79,-113,-49,-51,-55,-52,-56,-53,-57,-58,-61,-59,-62,-63,-68,-64,-69,-81,-77,-78,-80,-101,-112,-115,-114,-125,-123,-124,-84,-86,-87,-85,-74,-72,-75,-88,-92,-90,-91,-89,-102,-105,-104,-107,-103,-93,-100,-96,-99,-95,-97,-94,-106,-98,]),'loop':([74,75,76,77,78,81,82,83,90,93,94,95,125,126,127,128,129,134,143,144,145,146,157,159,166,170,171,172,173,174,175,176,177,178,179,180,181,182,183,186,189,190,191,205,209,210,211,221,223,224,228,229,230,231,247,254,257,258,259,260,261,266,267,273,274,275,277,278,295,296,297,298,300,301,302,303,305,],[-109,-50,-54,-60,-67,-73,-83,-76,-108,-116,-117,-118,-65,-70,-109,-66,-71,-82,206,208,-110,-111,-79,-113,-49,-51,-55,-52,-56,-53,-57,-58,-61,-59,-62,-63,-68,-64,-69,-81,-77,-78,-80,-101,-112,-115,-114,-125,-123,-124,-84,-86,-87,-85,276,-74,-72,-75,-88,-92,-90,-91,-89,-102,-105,-104,-107,-103,-93,-100,-96,-99,-95,-97,-94,-106,-98,]),'in':([74,75,76,77,78,81,82,83,90,93,94,95,100,125,126,127,128,129,134,135,136,137,138,145,146,157,159,166,170,171,172,173,174,175,176,177,178,179,180,181,182,183,186,189,190,191,194,196,205,209,210,211,221,223,224,228,229,230,231,232,233,254,257,258,259,260,261,266,267,273,274,275,277,278,295,296,297,298,300,301,302,303,305,],[-109,-50,-54,-60,-67,-73,-83,-76,-108,-116,-117,-118,-37,-65,-70,-109,-66,-71,-82,192,195,-38,-43,-110,-111,-79,-113,-49,-51,-55,-52,-56,-53,-57,-58,-61,-59,-62,-63,-68,-64,-69,-81,-77,-78,-80,-41,-40,-101,-112,-115,-114,-125,-123,-124,-84,-86,-87,-85,-39,-42,-74,-72,-75,-88,-92,-90,-91,-89,-102,-105,-104,-107,-103,-93,-100,-96,-99,-95,-97,-94,-106,-98,]),'else':([74,75,76,77,78,81,82,83,90,93,94,95,125,126,127,128,129,134,145,146,157,159,166,170,171,172,173,174,175,176,177,178,179,180,181,182,183,186,189,190,191,205,209,210,211,221,223,224,228,229,230,231,241,242,243,244,254,257,258,259,260,261,266,267,273,274,275,277,278,295,296,297,298,300,301,302,303,305,],[-109,-50,-54,-60,-67,-73,-83,-76,-108,-116,-117,-118,-65,-70,-109,-66,-71,-82,-110,-111,-79,-113,-49,-51,-55,-52,-56,-53,-57,-58,-61,-59,-62,-63,-68,-64,-69,-81,-77,-78,-80,-101,-112,-115,-114,-125,-123,-124,-84,-86,-87,-85,268,270,271,272,-74,-72,-75,-88,-92,-90,-91,-89,-102,-105,-104,-107,-103,-93,-100,-96,-99,-95,-97,-94,-106,-98,]),'pool':([74,75,76,77,78,81,82,83,90,93,94,95,125,126,127,128,129,134,145,146,157,159,166,170,171,172,173,174,175,176,177,178,179,180,181,182,183,186,189,190,191,205,209,210,211,221,223,224,228,229,230,231,245,246,247,248,254,257,258,259,260,261,266,267,273,274,275,277,278,293,295,296,297,298,300,301,302,303,305,],[-109,-50,-54,-60,-67,-73,-83,-76,-108,-116,-117,-118,-65,-70,-109,-66,-71,-82,-110,-111,-79,-113,-49,-51,-55,-52,-56,-53,-57,-58,-61,-59,-62,-63,-68,-64,-69,-81,-77,-78,-80,-101,-112,-115,-114,-125,-123,-124,-84,-86,-87,-85,273,275,277,278,-74,-72,-75,-88,-92,-90,-91,-89,-102,-105,-104,-107,-103,303,-93,-100,-96,-99,-95,-97,-94,-106,-98,]),'fi':([74,75,76,77,78,81,82,83,90,93,94,95,125,126,127,128,129,134,142,145,146,157,159,166,170,171,172,173,174,175,176,177,178,179,180,181,182,183,186,189,190,191,205,209,210,211,221,223,224,228,229,230,231,254,257,258,259,260,261,266,267,273,274,275,277,278,286,287,288,290,291,292,295,296,297,298,299,300,301,302,303,305,],[-109,-50,-54,-60,-67,-73,-83,-76,-108,-116,-117,-118,-65,-70,-109,-66,-71,-82,205,-110,-111,-79,-113,-49,-51,-55,-52,-56,-53,-57,-58,-61,-59,-62,-63,-68,-64,-69,-81,-77,-78,-80,-101,-112,-115,-114,-125,-123,-124,-84,-86,-87,-85,-74,-72,-75,-88,-92,-90,-91,-89,-102,-105,-104,-107,-103,295,297,298,300,301,302,-93,-100,-96,-99,305,-95,-97,-94,-106,-98,]),'esac':([234,235,239,240,262,263,264,284,],[259,261,266,267,-46,-47,-44,-45,]),'rarrow':([285,],[294,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'class_list':([0,3,4,],[2,6,7,]),'def_class':([0,3,4,],[3,3,3,]),'feature_list':([10,12,15,29,30,33,34,36,37,],[14,22,26,48,49,54,55,57,58,]),'epsilon':([10,12,15,28,29,30,32,33,34,36,37,115,117,227,],[16,16,16,46,16,16,46,16,16,16,16,165,165,165,]),'def_attr':([10,12,15,29,30,33,34,36,37,],[17,17,17,17,17,17,17,17,17,]),'def_func':([10,12,15,29,30,33,34,36,37,],[18,18,18,18,18,18,18,18,18,]),'formals':([28,32,],[42,52,]),'param_list':([28,32,60,62,],[43,43,96,98,]),'param_list_empty':([28,32,],[44,44,]),'param':([28,32,60,62,86,136,194,197,],[45,45,45,45,138,138,138,138,]),'expr':([59,64,65,72,84,85,87,88,89,92,102,111,115,116,117,126,129,133,140,142,144,148,158,160,168,171,173,175,177,179,181,183,192,193,195,198,202,203,204,206,207,208,212,213,214,215,218,222,227,229,242,246,251,256,268,269,270,271,272,276,287,289,294,],[73,101,103,113,132,134,139,141,143,149,113,113,162,166,169,113,113,113,113,113,113,113,149,220,220,113,113,113,113,113,113,113,228,230,231,233,241,243,244,245,247,248,249,250,252,253,220,169,169,113,113,113,113,220,286,288,290,291,292,293,113,299,304,]),'comp':([59,64,65,72,84,85,87,88,89,92,102,111,115,116,117,126,129,133,140,142,144,148,158,160,168,171,173,175,177,179,181,183,192,193,195,198,202,203,204,206,207,208,212,213,214,215,218,222,227,229,242,246,251,256,268,269,270,271,272,276,287,289,294,],[75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,]),'op':([59,64,65,72,84,85,87,88,89,92,102,111,115,116,117,118,119,120,126,129,133,140,142,144,148,158,160,168,171,173,175,177,179,181,183,192,193,195,198,202,203,204,206,207,208,212,213,214,215,218,222,227,229,242,246,251,256,268,269,270,271,272,276,287,289,294,],[76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,170,172,174,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,]),'term':([59,64,65,72,84,85,87,88,89,92,102,111,115,116,117,118,119,120,121,122,126,129,133,140,142,144,148,158,160,168,171,173,175,177,179,181,183,192,193,195,198,202,203,204,206,207,208,212,213,214,215,218,222,227,229,242,246,251,256,268,269,270,271,272,276,287,289,294,],[77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,176,178,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,]),'base_call':([59,64,65,72,79,80,84,85,87,88,89,92,102,111,115,116,117,118,119,120,121,122,123,124,126,129,133,140,142,144,148,158,160,168,171,173,175,177,179,181,183,192,193,195,198,202,203,204,206,207,208,212,213,214,215,218,222,227,229,242,246,251,256,268,269,270,271,272,276,287,289,294,],[78,78,78,78,125,128,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,180,182,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,]),'factor':([59,64,65,72,79,80,84,85,87,88,89,92,102,111,115,116,117,118,119,120,121,122,123,124,126,129,133,140,142,144,148,158,160,168,171,173,175,177,179,181,183,192,193,195,198,202,203,204,206,207,208,212,213,214,215,218,222,227,229,242,246,251,256,268,269,270,271,272,276,287,289,294,],[81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,]),'func_call':([59,64,65,72,79,80,84,85,87,88,89,92,102,111,115,116,117,118,119,120,121,122,123,124,126,129,131,133,140,142,144,148,158,160,168,171,173,175,177,179,181,183,192,193,195,198,202,203,204,206,207,208,212,213,214,215,216,218,222,225,226,227,229,242,246,251,256,268,269,270,271,272,276,287,289,294,],[82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,186,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,254,82,82,257,258,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,]),'atom':([59,64,65,72,79,80,84,85,87,88,89,92,102,111,115,116,117,118,119,120,121,122,123,124,126,129,133,140,142,144,148,158,160,168,171,173,175,177,179,181,183,192,193,195,198,202,203,204,206,207,208,212,213,214,215,218,222,227,229,242,246,251,256,268,269,270,271,272,276,287,289,294,],[83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,]),'block':([72,92,102,111,126,129,133,140,142,144,148,158,160,168,171,173,175,177,179,181,183,218,229,242,246,251,256,287,289,],[114,147,114,154,114,114,114,114,114,114,154,217,114,114,114,114,114,114,114,114,114,154,114,114,114,114,114,114,114,]),'let_list':([86,136,194,197,],[135,196,196,232,]),'let_assign':([86,136,194,197,],[137,137,137,137,]),'args':([115,117,227,],[161,167,161,]),'arg_list':([115,117,160,168,218,222,227,256,],[163,163,219,219,219,255,163,219,]),'arg_list_empty':([115,117,227,],[164,164,164,]),'cases_list':([199,200,201,235,238,264,],[234,239,240,262,262,284,]),'casep':([199,200,201,235,238,264,],[236,236,236,236,236,236,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> class_list','program',1,'p_program','parser.py',8),
  ('epsilon -> <empty>','epsilon',0,'p_epsilon','parser.py',12),
  ('class_list -> def_class class_list','class_list',2,'p_class_list','parser.py',17),
  ('class_list -> def_class','class_list',1,'p_class_list','parser.py',18),
  ('class_list -> error class_list','class_list',2,'p_class_list_error','parser.py',23),
  ('def_class -> class type ocur feature_list ccur semi','def_class',6,'p_def_class','parser.py',29),
  ('def_class -> class type inherits type ocur feature_list ccur semi','def_class',8,'p_def_class','parser.py',30),
  ('def_class -> class error ocur feature_list ccur semi','def_class',6,'p_def_class_error','parser.py',38),
  ('def_class -> class type ocur feature_list ccur error','def_class',6,'p_def_class_error','parser.py',39),
  ('def_class -> class error inherits type ocur feature_list ccur semi','def_class',8,'p_def_class_error','parser.py',40),
  ('def_class -> class error inherits error ocur feature_list ccur semi','def_class',8,'p_def_class_error','parser.py',41),
  ('def_class -> class type inherits error ocur feature_list ccur semi','def_class',8,'p_def_class_error','parser.py',42),
  ('def_class -> class type inherits type ocur feature_list ccur error','def_class',8,'p_def_class_error','parser.py',43),
  ('feature_list -> epsilon','feature_list',1,'p_feature_list','parser.py',48),
  ('feature_list -> def_attr semi feature_list','feature_list',3,'p_feature_list','parser.py',49),
  ('feature_list -> def_func semi feature_list','feature_list',3,'p_feature_list','parser.py',50),
  ('feature_list -> error feature_list','feature_list',2,'p_feature_list_error','parser.py',55),
  ('def_attr -> id colon type','def_attr',3,'p_def_attr','parser.py',60),
  ('def_attr -> id colon type larrow expr','def_attr',5,'p_def_attr','parser.py',61),
  ('def_attr -> error colon type','def_attr',3,'p_def_attr_error','parser.py',68),
  ('def_attr -> id colon error','def_attr',3,'p_def_attr_error','parser.py',69),
  ('def_attr -> error colon type larrow expr','def_attr',5,'p_def_attr_error','parser.py',70),
  ('def_attr -> id colon error larrow expr','def_attr',5,'p_def_attr_error','parser.py',71),
  ('def_attr -> id colon type larrow error','def_attr',5,'p_def_attr_error','parser.py',72),
  ('def_func -> id opar formals cpar colon type ocur expr ccur','def_func',9,'p_def_func','parser.py',77),
  ('def_func -> error opar formals cpar colon type ocur expr ccur','def_func',9,'p_def_func_error','parser.py',81),
  ('def_func -> id opar error cpar colon type ocur expr ccur','def_func',9,'p_def_func_error','parser.py',82),
  ('def_func -> id opar formals cpar colon error ocur expr ccur','def_func',9,'p_def_func_error','parser.py',83),
  ('def_func -> id opar formals cpar colon type ocur error ccur','def_func',9,'p_def_func_error','parser.py',84),
  ('formals -> param_list','formals',1,'p_formals','parser.py',89),
  ('formals -> param_list_empty','formals',1,'p_formals','parser.py',90),
  ('param_list -> param','param_list',1,'p_param_list','parser.py',96),
  ('param_list -> param comma param_list','param_list',3,'p_param_list','parser.py',97),
  ('param_list -> error comma param_list','param_list',3,'p_param_list_error','parser.py',101),
  ('param_list -> param comma error','param_list',3,'p_param_list_error','parser.py',102),
  ('param_list_empty -> epsilon','param_list_empty',1,'p_param_list_empty','parser.py',107),
  ('param -> id colon type','param',3,'p_param','parser.py',111),
  ('let_list -> let_assign','let_list',1,'p_let_list','parser.py',116),
  ('let_list -> let_assign comma let_list','let_list',3,'p_let_list','parser.py',117),
  ('let_list -> error let_list','let_list',2,'p_let_list_error','parser.py',121),
  ('let_list -> error','let_list',1,'p_let_list_error','parser.py',122),
  ('let_assign -> param larrow expr','let_assign',3,'p_let_assign','parser.py',126),
  ('let_assign -> param','let_assign',1,'p_let_assign','parser.py',127),
  ('cases_list -> casep semi','cases_list',2,'p_cases_list','parser.py',135),
  ('cases_list -> casep semi cases_list','cases_list',3,'p_cases_list','parser.py',136),
  ('cases_list -> error cases_list','cases_list',2,'p_cases_list_error','parser.py',140),
  ('cases_list -> error semi','cases_list',2,'p_cases_list_error','parser.py',141),
  ('casep -> id colon type rarrow expr','casep',5,'p_case','parser.py',145),
  ('expr -> id larrow expr','expr',3,'p_expr','parser.py',150),
  ('expr -> comp','expr',1,'p_expr','parser.py',151),
  ('comp -> comp less op','comp',3,'p_comp','parser.py',159),
  ('comp -> comp lesseq op','comp',3,'p_comp','parser.py',160),
  ('comp -> comp equal op','comp',3,'p_comp','parser.py',161),
  ('comp -> op','comp',1,'p_comp','parser.py',162),
  ('comp -> comp less error','comp',3,'p_comp_error','parser.py',174),
  ('comp -> comp lesseq error','comp',3,'p_comp_error','parser.py',175),
  ('comp -> comp equal error','comp',3,'p_comp_error','parser.py',176),
  ('op -> op plus term','op',3,'p_op','parser.py',181),
  ('op -> op minus term','op',3,'p_op','parser.py',182),
  ('op -> term','op',1,'p_op','parser.py',183),
  ('op -> op plus error','op',3,'p_op_error','parser.py',193),
  ('op -> op minus error','op',3,'p_op_error','parser.py',194),
  ('term -> term star base_call','term',3,'p_term','parser.py',199),
  ('term -> term div base_call','term',3,'p_term','parser.py',200),
  ('term -> isvoid base_call','term',2,'p_term','parser.py',201),
  ('term -> nox base_call','term',2,'p_term','parser.py',202),
  ('term -> base_call','term',1,'p_term','parser.py',203),
  ('term -> term star error','term',3,'p_term_error','parser.py',216),
  ('term -> term div error','term',3,'p_term_error','parser.py',217),
  ('term -> isvoid error','term',2,'p_term_error','parser.py',218),
  ('term -> nox error','term',2,'p_term_error','parser.py',219),
  ('base_call -> factor arroba type dot func_call','base_call',5,'p_base_call','parser.py',226),
  ('base_call -> factor','base_call',1,'p_base_call','parser.py',227),
  ('base_call -> error arroba type dot func_call','base_call',5,'p_base_call_error','parser.py',234),
  ('base_call -> factor arroba error dot func_call','base_call',5,'p_base_call_error','parser.py',235),
  ('factor -> atom','factor',1,'p_factor1','parser.py',240),
  ('factor -> opar expr cpar','factor',3,'p_factor1','parser.py',241),
  ('factor -> opar expr error','factor',3,'p_factor1_error','parser.py',245),
  ('factor -> error expr cpar','factor',3,'p_factor1_error','parser.py',246),
  ('factor -> opar error cpar','factor',3,'p_factor1_error','parser.py',247),
  ('factor -> factor dot func_call','factor',3,'p_factor2','parser.py',252),
  ('factor -> not expr','factor',2,'p_factor2','parser.py',253),
  ('factor -> func_call','factor',1,'p_factor2','parser.py',254),
  ('factor -> let let_list in expr','factor',4,'p_expr_let','parser.py',264),
  ('factor -> let error in expr','factor',4,'p_expr_let_error','parser.py',268),
  ('factor -> let let_list in error','factor',4,'p_expr_let_error','parser.py',269),
  ('factor -> let let_list error expr','factor',4,'p_expr_let_error','parser.py',270),
  ('factor -> case expr of cases_list esac','factor',5,'p_expr_case','parser.py',275),
  ('factor -> case error of cases_list esac','factor',5,'p_expr_case_error','parser.py',279),
  ('factor -> case expr of error esac','factor',5,'p_expr_case_error','parser.py',280),
  ('factor -> case expr error cases_list esac','factor',5,'p_expr_case_error','parser.py',281),
  ('factor -> case expr of cases_list error','factor',5,'p_expr_case_error','parser.py',282),
  ('factor -> if expr then expr else expr fi','factor',7,'p_expr_if','parser.py',287),
  ('factor -> if error then expr else expr fi','factor',7,'p_expr_if_error','parser.py',291),
  ('factor -> if expr then error else expr fi','factor',7,'p_expr_if_error','parser.py',292),
  ('factor -> if expr then expr else error fi','factor',7,'p_expr_if_error','parser.py',293),
  ('factor -> if expr error expr else expr fi','factor',7,'p_expr_if_error','parser.py',294),
  ('factor -> if expr then expr error error expr fi','factor',8,'p_expr_if_error','parser.py',295),
  ('factor -> if expr then expr error expr fi','factor',7,'p_expr_if_error','parser.py',296),
  ('factor -> if expr then expr else expr error','factor',7,'p_expr_if_error','parser.py',297),
  ('factor -> if error fi','factor',3,'p_expr_if_error','parser.py',298),
  ('factor -> while expr loop expr pool','factor',5,'p_expr_while','parser.py',303),
  ('factor -> while error loop expr pool','factor',5,'p_expr_while_error','parser.py',308),
  ('factor -> while expr loop error pool','factor',5,'p_expr_while_error','parser.py',309),
  ('factor -> while expr loop expr error','factor',5,'p_expr_while_error','parser.py',310),
  ('factor -> while expr error expr loop expr pool','factor',7,'p_expr_while_error','parser.py',311),
  ('factor -> while expr error expr pool','factor',5,'p_expr_while_error','parser.py',312),
  ('atom -> num','atom',1,'p_atom_num','parser.py',317),
  ('atom -> id','atom',1,'p_atom_id','parser.py',321),
  ('atom -> new type','atom',2,'p_atom_new','parser.py',325),
  ('atom -> new error','atom',2,'p_atom_new_error','parser.py',329),
  ('atom -> ocur block ccur','atom',3,'p_atom_block','parser.py',333),
  ('atom -> error block ccur','atom',3,'p_atom_block_error','parser.py',337),
  ('atom -> ocur error ccur','atom',3,'p_atom_block_error','parser.py',338),
  ('atom -> ocur block error','atom',3,'p_atom_block_error','parser.py',339),
  ('atom -> true','atom',1,'p_atom_boolean','parser.py',343),
  ('atom -> false','atom',1,'p_atom_boolean','parser.py',344),
  ('atom -> string','atom',1,'p_atom_string','parser.py',348),
  ('block -> expr semi','block',2,'p_block','parser.py',353),
  ('block -> expr semi block','block',3,'p_block','parser.py',354),
  ('block -> error block','block',2,'p_block_error','parser.py',358),
  ('block -> error semi','block',2,'p_block_error','parser.py',359),
  ('func_call -> id opar args cpar','func_call',4,'p_func_call','parser.py',364),
  ('func_call -> id opar error cpar','func_call',4,'p_func_call_error','parser.py',368),
  ('func_call -> error opar args cpar','func_call',4,'p_func_call_error','parser.py',369),
  ('args -> arg_list','args',1,'p_args','parser.py',374),
  ('args -> arg_list_empty','args',1,'p_args','parser.py',375),
  ('arg_list -> expr','arg_list',1,'p_arg_list','parser.py',381),
  ('arg_list -> expr comma arg_list','arg_list',3,'p_arg_list','parser.py',382),
  ('arg_list -> error arg_list','arg_list',2,'p_arg_list_error','parser.py',389),
  ('arg_list_empty -> epsilon','arg_list_empty',1,'p_arg_list_empty','parser.py',393),
]
