.text
.globl main
main:
# Save method directions in the methods array
la $v0, methods
la $t9, entry
sw $t9, 0($v0)
la $t9, function_abort_Object
sw $t9, 4($v0)
la $t9, function_type_name_Object
sw $t9, 8($v0)
la $t9, function_copy_Object
sw $t9, 12($v0)
la $t9, function_out_string_IO
sw $t9, 16($v0)
la $t9, function_out_int_IO
sw $t9, 20($v0)
la $t9, function_in_int_IO
sw $t9, 24($v0)
la $t9, function_in_string_IO
sw $t9, 28($v0)
la $t9, function_length_String
sw $t9, 32($v0)
la $t9, function_concat_String
sw $t9, 36($v0)
la $t9, function_substr_String
sw $t9, 40($v0)
la $t9, function_type_name_String
sw $t9, 44($v0)
la $t9, function_copy_String
sw $t9, 48($v0)
la $t9, function_type_name_Int
sw $t9, 52($v0)
la $t9, function_copy_Int
sw $t9, 56($v0)
la $t9, function_type_name_Bool
sw $t9, 60($v0)
la $t9, function_copy_Bool
sw $t9, 64($v0)
la $t9, function_abort_String
sw $t9, 68($v0)
la $t9, function_abort_Int
sw $t9, 72($v0)
la $t9, function_abort_Bool
sw $t9, 76($v0)
la $t9, function_A_A
sw $t9, 80($v0)
la $t9, function_value_A
sw $t9, 84($v0)
la $t9, function_set_var_A
sw $t9, 88($v0)
la $t9, function_method1_A
sw $t9, 92($v0)
la $t9, function_method2_A
sw $t9, 96($v0)
la $t9, function_method3_A
sw $t9, 100($v0)
la $t9, function_method4_A
sw $t9, 104($v0)
la $t9, function_method5_A
sw $t9, 108($v0)
la $t9, function_B_B
sw $t9, 112($v0)
la $t9, function_method5_B
sw $t9, 116($v0)
la $t9, function_C_C
sw $t9, 120($v0)
la $t9, function_method6_C
sw $t9, 124($v0)
la $t9, function_method5_C
sw $t9, 128($v0)
la $t9, function_D_D
sw $t9, 132($v0)
la $t9, function_method7_D
sw $t9, 136($v0)
la $t9, function_E_E
sw $t9, 140($v0)
la $t9, function_method6_E
sw $t9, 144($v0)
la $t9, function_c2i_A2I
sw $t9, 148($v0)
la $t9, function_i2c_A2I
sw $t9, 152($v0)
la $t9, function_a2i_A2I
sw $t9, 156($v0)
la $t9, function_a2i_aux_A2I
sw $t9, 160($v0)
la $t9, function_i2a_A2I
sw $t9, 164($v0)
la $t9, function_i2a_aux_A2I
sw $t9, 168($v0)
la $t9, function_Main_Main
sw $t9, 172($v0)
la $t9, function_menu_Main
sw $t9, 176($v0)
la $t9, function_prompt_Main
sw $t9, 180($v0)
la $t9, function_get_int_Main
sw $t9, 184($v0)
la $t9, function_is_even_Main
sw $t9, 188($v0)
la $t9, function_class_type_Main
sw $t9, 192($v0)
la $t9, function_print_Main
sw $t9, 196($v0)
la $t9, function_main_Main
sw $t9, 200($v0)
# Save types directions in the types array
la $t9, types
# Save space to locate the type info
# Allocating memory
li $v0, 9
li $a0, 12
syscall
# Filling table methods
la $t8, type_String
sw $t8, 0($v0)
# Copying direction to array
sw $v0, 0($t9)
# Table addr is now stored in t8
move $t8, $v0
# Creating the dispatch table
# Allocate dispatch table in the heap
li $v0, 9
li $a0, 28
syscall
# I save the offset of every one of the methods of this type
# Save the direction of methods
la $v1, methods
# Save the direction of the method function_length_String in a0
lw $a0, 32($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 4($v0)
# Save the direction of the method function_concat_String in a0
lw $a0, 36($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 8($v0)
# Save the direction of the method function_substr_String in a0
lw $a0, 40($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 12($v0)
# Save the direction of the method function_abort_String in a0
lw $a0, 68($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 16($v0)
# Save the direction of the method function_type_name_String in a0
lw $a0, 44($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 20($v0)
# Save the direction of the method function_copy_String in a0
lw $a0, 48($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 24($v0)
sw $v0, 8($t8)
# Allocating memory
li $v0, 9
li $a0, 12
syscall
# Filling table methods
la $t8, type_Int
sw $t8, 0($v0)
# Copying direction to array
sw $v0, 4($t9)
# Table addr is now stored in t8
move $t8, $v0
# Creating the dispatch table
# Allocate dispatch table in the heap
li $v0, 9
li $a0, 16
syscall
# I save the offset of every one of the methods of this type
# Save the direction of methods
la $v1, methods
# Save the direction of the method function_abort_Int in a0
lw $a0, 72($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 4($v0)
# Save the direction of the method function_type_name_Int in a0
lw $a0, 52($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 8($v0)
# Save the direction of the method function_copy_Int in a0
lw $a0, 56($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 12($v0)
sw $v0, 8($t8)
# Allocating memory
li $v0, 9
li $a0, 12
syscall
# Filling table methods
la $t8, type_Object
sw $t8, 0($v0)
# Copying direction to array
sw $v0, 8($t9)
# Table addr is now stored in t8
move $t8, $v0
# Creating the dispatch table
# Allocate dispatch table in the heap
li $v0, 9
li $a0, 16
syscall
# I save the offset of every one of the methods of this type
# Save the direction of methods
la $v1, methods
# Save the direction of the method function_abort_Object in a0
lw $a0, 4($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 4($v0)
# Save the direction of the method function_type_name_Object in a0
lw $a0, 8($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 8($v0)
# Save the direction of the method function_copy_Object in a0
lw $a0, 12($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 12($v0)
sw $v0, 8($t8)
# Allocating memory
li $v0, 9
li $a0, 12
syscall
# Filling table methods
la $t8, type_Bool
sw $t8, 0($v0)
# Copying direction to array
sw $v0, 12($t9)
# Table addr is now stored in t8
move $t8, $v0
# Creating the dispatch table
# Allocate dispatch table in the heap
li $v0, 9
li $a0, 16
syscall
# I save the offset of every one of the methods of this type
# Save the direction of methods
la $v1, methods
# Save the direction of the method function_abort_Bool in a0
lw $a0, 76($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 4($v0)
# Save the direction of the method function_type_name_Bool in a0
lw $a0, 60($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 8($v0)
# Save the direction of the method function_copy_Bool in a0
lw $a0, 64($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 12($v0)
sw $v0, 8($t8)
# Allocating memory
li $v0, 9
li $a0, 12
syscall
# Filling table methods
la $t8, type_IO
sw $t8, 0($v0)
# Copying direction to array
sw $v0, 16($t9)
# Table addr is now stored in t8
move $t8, $v0
# Creating the dispatch table
# Allocate dispatch table in the heap
li $v0, 9
li $a0, 32
syscall
# I save the offset of every one of the methods of this type
# Save the direction of methods
la $v1, methods
# Save the direction of the method function_abort_Object in a0
lw $a0, 4($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 4($v0)
# Save the direction of the method function_type_name_Object in a0
lw $a0, 8($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 8($v0)
# Save the direction of the method function_copy_Object in a0
lw $a0, 12($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 12($v0)
# Save the direction of the method function_out_string_IO in a0
lw $a0, 16($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 16($v0)
# Save the direction of the method function_out_int_IO in a0
lw $a0, 20($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 20($v0)
# Save the direction of the method function_in_int_IO in a0
lw $a0, 24($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 24($v0)
# Save the direction of the method function_in_string_IO in a0
lw $a0, 28($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 28($v0)
sw $v0, 8($t8)
# Allocating memory
li $v0, 9
li $a0, 12
syscall
# Filling table methods
la $t8, type_A
sw $t8, 0($v0)
# Copying direction to array
sw $v0, 20($t9)
# Table addr is now stored in t8
move $t8, $v0
# Creating the dispatch table
# Allocate dispatch table in the heap
li $v0, 9
li $a0, 48
syscall
# I save the offset of every one of the methods of this type
# Save the direction of methods
la $v1, methods
# Save the direction of the method function_abort_Object in a0
lw $a0, 4($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 4($v0)
# Save the direction of the method function_type_name_Object in a0
lw $a0, 8($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 8($v0)
# Save the direction of the method function_copy_Object in a0
lw $a0, 12($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 12($v0)
# Save the direction of the method function_value_A in a0
lw $a0, 84($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 16($v0)
# Save the direction of the method function_set_var_A in a0
lw $a0, 88($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 20($v0)
# Save the direction of the method function_method1_A in a0
lw $a0, 92($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 24($v0)
# Save the direction of the method function_method2_A in a0
lw $a0, 96($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 28($v0)
# Save the direction of the method function_method3_A in a0
lw $a0, 100($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 32($v0)
# Save the direction of the method function_method4_A in a0
lw $a0, 104($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 36($v0)
# Save the direction of the method function_method5_A in a0
lw $a0, 108($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 40($v0)
# Save the direction of the method function_A_A in a0
lw $a0, 80($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 44($v0)
sw $v0, 8($t8)
# Allocating memory
li $v0, 9
li $a0, 12
syscall
# Filling table methods
la $t8, type_B
sw $t8, 0($v0)
# Copying direction to array
sw $v0, 24($t9)
# Table addr is now stored in t8
move $t8, $v0
# Creating the dispatch table
# Allocate dispatch table in the heap
li $v0, 9
li $a0, 52
syscall
# I save the offset of every one of the methods of this type
# Save the direction of methods
la $v1, methods
# Save the direction of the method function_abort_Object in a0
lw $a0, 4($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 4($v0)
# Save the direction of the method function_type_name_Object in a0
lw $a0, 8($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 8($v0)
# Save the direction of the method function_copy_Object in a0
lw $a0, 12($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 12($v0)
# Save the direction of the method function_value_A in a0
lw $a0, 84($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 16($v0)
# Save the direction of the method function_set_var_A in a0
lw $a0, 88($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 20($v0)
# Save the direction of the method function_method1_A in a0
lw $a0, 92($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 24($v0)
# Save the direction of the method function_method2_A in a0
lw $a0, 96($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 28($v0)
# Save the direction of the method function_method3_A in a0
lw $a0, 100($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 32($v0)
# Save the direction of the method function_method4_A in a0
lw $a0, 104($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 36($v0)
# Save the direction of the method function_method5_B in a0
lw $a0, 116($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 40($v0)
# Save the direction of the method function_A_A in a0
lw $a0, 80($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 44($v0)
# Save the direction of the method function_B_B in a0
lw $a0, 112($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 48($v0)
sw $v0, 8($t8)
# Allocating memory
li $v0, 9
li $a0, 12
syscall
# Filling table methods
la $t8, type_C
sw $t8, 0($v0)
# Copying direction to array
sw $v0, 28($t9)
# Table addr is now stored in t8
move $t8, $v0
# Creating the dispatch table
# Allocate dispatch table in the heap
li $v0, 9
li $a0, 60
syscall
# I save the offset of every one of the methods of this type
# Save the direction of methods
la $v1, methods
# Save the direction of the method function_abort_Object in a0
lw $a0, 4($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 4($v0)
# Save the direction of the method function_type_name_Object in a0
lw $a0, 8($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 8($v0)
# Save the direction of the method function_copy_Object in a0
lw $a0, 12($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 12($v0)
# Save the direction of the method function_value_A in a0
lw $a0, 84($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 16($v0)
# Save the direction of the method function_set_var_A in a0
lw $a0, 88($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 20($v0)
# Save the direction of the method function_method1_A in a0
lw $a0, 92($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 24($v0)
# Save the direction of the method function_method2_A in a0
lw $a0, 96($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 28($v0)
# Save the direction of the method function_method3_A in a0
lw $a0, 100($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 32($v0)
# Save the direction of the method function_method4_A in a0
lw $a0, 104($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 36($v0)
# Save the direction of the method function_method5_C in a0
lw $a0, 128($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 40($v0)
# Save the direction of the method function_A_A in a0
lw $a0, 80($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 44($v0)
# Save the direction of the method function_B_B in a0
lw $a0, 112($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 48($v0)
# Save the direction of the method function_method6_C in a0
lw $a0, 124($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 52($v0)
# Save the direction of the method function_C_C in a0
lw $a0, 120($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 56($v0)
sw $v0, 8($t8)
# Allocating memory
li $v0, 9
li $a0, 12
syscall
# Filling table methods
la $t8, type_D
sw $t8, 0($v0)
# Copying direction to array
sw $v0, 32($t9)
# Table addr is now stored in t8
move $t8, $v0
# Creating the dispatch table
# Allocate dispatch table in the heap
li $v0, 9
li $a0, 60
syscall
# I save the offset of every one of the methods of this type
# Save the direction of methods
la $v1, methods
# Save the direction of the method function_abort_Object in a0
lw $a0, 4($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 4($v0)
# Save the direction of the method function_type_name_Object in a0
lw $a0, 8($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 8($v0)
# Save the direction of the method function_copy_Object in a0
lw $a0, 12($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 12($v0)
# Save the direction of the method function_value_A in a0
lw $a0, 84($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 16($v0)
# Save the direction of the method function_set_var_A in a0
lw $a0, 88($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 20($v0)
# Save the direction of the method function_method1_A in a0
lw $a0, 92($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 24($v0)
# Save the direction of the method function_method2_A in a0
lw $a0, 96($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 28($v0)
# Save the direction of the method function_method3_A in a0
lw $a0, 100($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 32($v0)
# Save the direction of the method function_method4_A in a0
lw $a0, 104($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 36($v0)
# Save the direction of the method function_method5_B in a0
lw $a0, 116($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 40($v0)
# Save the direction of the method function_A_A in a0
lw $a0, 80($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 44($v0)
# Save the direction of the method function_B_B in a0
lw $a0, 112($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 48($v0)
# Save the direction of the method function_method7_D in a0
lw $a0, 136($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 52($v0)
# Save the direction of the method function_D_D in a0
lw $a0, 132($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 56($v0)
sw $v0, 8($t8)
# Allocating memory
li $v0, 9
li $a0, 12
syscall
# Filling table methods
la $t8, type_E
sw $t8, 0($v0)
# Copying direction to array
sw $v0, 36($t9)
# Table addr is now stored in t8
move $t8, $v0
# Creating the dispatch table
# Allocate dispatch table in the heap
li $v0, 9
li $a0, 68
syscall
# I save the offset of every one of the methods of this type
# Save the direction of methods
la $v1, methods
# Save the direction of the method function_abort_Object in a0
lw $a0, 4($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 4($v0)
# Save the direction of the method function_type_name_Object in a0
lw $a0, 8($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 8($v0)
# Save the direction of the method function_copy_Object in a0
lw $a0, 12($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 12($v0)
# Save the direction of the method function_value_A in a0
lw $a0, 84($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 16($v0)
# Save the direction of the method function_set_var_A in a0
lw $a0, 88($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 20($v0)
# Save the direction of the method function_method1_A in a0
lw $a0, 92($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 24($v0)
# Save the direction of the method function_method2_A in a0
lw $a0, 96($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 28($v0)
# Save the direction of the method function_method3_A in a0
lw $a0, 100($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 32($v0)
# Save the direction of the method function_method4_A in a0
lw $a0, 104($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 36($v0)
# Save the direction of the method function_method5_B in a0
lw $a0, 116($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 40($v0)
# Save the direction of the method function_A_A in a0
lw $a0, 80($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 44($v0)
# Save the direction of the method function_B_B in a0
lw $a0, 112($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 48($v0)
# Save the direction of the method function_method7_D in a0
lw $a0, 136($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 52($v0)
# Save the direction of the method function_D_D in a0
lw $a0, 132($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 56($v0)
# Save the direction of the method function_method6_E in a0
lw $a0, 144($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 60($v0)
# Save the direction of the method function_E_E in a0
lw $a0, 140($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 64($v0)
sw $v0, 8($t8)
# Allocating memory
li $v0, 9
li $a0, 12
syscall
# Filling table methods
la $t8, type_A2I
sw $t8, 0($v0)
# Copying direction to array
sw $v0, 40($t9)
# Table addr is now stored in t8
move $t8, $v0
# Creating the dispatch table
# Allocate dispatch table in the heap
li $v0, 9
li $a0, 40
syscall
# I save the offset of every one of the methods of this type
# Save the direction of methods
la $v1, methods
# Save the direction of the method function_abort_Object in a0
lw $a0, 4($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 4($v0)
# Save the direction of the method function_type_name_Object in a0
lw $a0, 8($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 8($v0)
# Save the direction of the method function_copy_Object in a0
lw $a0, 12($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 12($v0)
# Save the direction of the method function_c2i_A2I in a0
lw $a0, 148($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 16($v0)
# Save the direction of the method function_i2c_A2I in a0
lw $a0, 152($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 20($v0)
# Save the direction of the method function_a2i_A2I in a0
lw $a0, 156($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 24($v0)
# Save the direction of the method function_a2i_aux_A2I in a0
lw $a0, 160($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 28($v0)
# Save the direction of the method function_i2a_A2I in a0
lw $a0, 164($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 32($v0)
# Save the direction of the method function_i2a_aux_A2I in a0
lw $a0, 168($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 36($v0)
sw $v0, 8($t8)
# Allocating memory
li $v0, 9
li $a0, 12
syscall
# Filling table methods
la $t8, type_Main
sw $t8, 0($v0)
# Copying direction to array
sw $v0, 44($t9)
# Table addr is now stored in t8
move $t8, $v0
# Creating the dispatch table
# Allocate dispatch table in the heap
li $v0, 9
li $a0, 64
syscall
# I save the offset of every one of the methods of this type
# Save the direction of methods
la $v1, methods
# Save the direction of the method function_abort_Object in a0
lw $a0, 4($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 4($v0)
# Save the direction of the method function_type_name_Object in a0
lw $a0, 8($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 8($v0)
# Save the direction of the method function_copy_Object in a0
lw $a0, 12($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 12($v0)
# Save the direction of the method function_out_string_IO in a0
lw $a0, 16($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 16($v0)
# Save the direction of the method function_out_int_IO in a0
lw $a0, 20($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 20($v0)
# Save the direction of the method function_in_string_IO in a0
lw $a0, 28($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 24($v0)
# Save the direction of the method function_in_int_IO in a0
lw $a0, 24($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 28($v0)
# Save the direction of the method function_menu_Main in a0
lw $a0, 176($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 32($v0)
# Save the direction of the method function_prompt_Main in a0
lw $a0, 180($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 36($v0)
# Save the direction of the method function_get_int_Main in a0
lw $a0, 184($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 40($v0)
# Save the direction of the method function_is_even_Main in a0
lw $a0, 188($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 44($v0)
# Save the direction of the method function_class_type_Main in a0
lw $a0, 192($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 48($v0)
# Save the direction of the method function_print_Main in a0
lw $a0, 196($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 52($v0)
# Save the direction of the method function_main_Main in a0
lw $a0, 200($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 56($v0)
# Save the direction of the method function_Main_Main in a0
lw $a0, 172($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 60($v0)
sw $v0, 8($t8)
# Copying parents
lw $v0, 0($t9)
li $t8, 0
sw $t8, 4($v0)
lw $v0, 4($t9)
li $t8, 0
sw $t8, 4($v0)
lw $v0, 8($t9)
li $t8, 0
sw $t8, 4($v0)
lw $v0, 12($t9)
li $t8, 0
sw $t8, 4($v0)
lw $v0, 16($t9)
lw $t8, 8($t9)
sw $t8, 4($v0)
lw $v0, 20($t9)
lw $t8, 8($t9)
sw $t8, 4($v0)
lw $v0, 24($t9)
lw $t8, 20($t9)
sw $t8, 4($v0)
lw $v0, 28($t9)
lw $t8, 24($t9)
sw $t8, 4($v0)
lw $v0, 32($t9)
lw $t8, 24($t9)
sw $t8, 4($v0)
lw $v0, 36($t9)
lw $t8, 32($t9)
sw $t8, 4($v0)
lw $v0, 40($t9)
lw $t8, 8($t9)
sw $t8, 4($v0)
lw $v0, 44($t9)
lw $t8, 16($t9)
sw $t8, 4($v0)

entry:
# Gets the params from the stack
move $fp, $sp
# Gets the frame pointer from the stack
# Updates stack pointer pushing local__internal_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local__internal_1 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
# Syscall to allocate memory of the object entry in heap
li $v0, 9
li $a0, 28
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_Main
sw $t9, 0($v0)
# Saves the size of the node
li $t9, 28
sw $t9, 4($v0)
move $t0, $v0
# Adding Type Info addr
la $t8, types
lw $v0, 44($t8)
sw $v0, 8($t0)
# Static Dispatch of the method Main
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
# This function will consume the arguments
jal function_Main_Main
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -4($fp)
# Static Dispatch of the method main
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
lw $t1, -0($fp)
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
sw $t1, -0($fp)
# This function will consume the arguments
jal function_main_Main
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -4($fp)
# saves the return value
move $t0, $v0
li $v0, 0
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
# Removing all locals from stack
addiu $sp, $sp, 8
jr $ra


function_abort_Object:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_abort_Object_self_0 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
lw $t1, -4($fp)
# Moving self to local_abort_Object_self_0
move $t1, $t0
sw $t1, -4($fp)
# Exiting the program
li $t8, 0
# Printing abort message
li $v0, 4
la $a0, abort_msg
syscall
li $v0, 4
lw $a0, 0($t0)
syscall
li $v0, 4
la $a0, new_line
syscall
li $v0, 17
move $a0, $t8
syscall
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -4($fp)
# Removing all locals from stack
addiu $sp, $sp, 8
jr $ra


function_type_name_Object:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_type_name_Object_result_0 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
lw $t1, -4($fp)
# local_type_name_Object_result_0 <- Type of self
lw $t1, 0($t0)
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -4($fp)
# Removing all locals from stack
addiu $sp, $sp, 8
jr $ra


function_copy_Object:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_copy_Object_result_0 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
lw $t1, -4($fp)
lw $t9, 4($t0)
# Syscall to allocate memory of the object entry in heap
li $v0, 9
move $a0, $t9
syscall
move $t1, $v0
# Loop to copy every field of the previous object
# t8 the register to loop
li $t8, 0
loop_0:
# In t9 is stored the size of the object
bge $t8, $t9, exit_0
lw $a0, ($t0)
sw $a0, ($v0)
addi $v0, $v0, 4
addi $t0, $t0, 4
# Increase loop counter
addi $t8, $t8, 4
j loop_0
exit_0:
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -4($fp)
# Removing all locals from stack
addiu $sp, $sp, 8
jr $ra


function_out_string_IO:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Pops the register with the param value word
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_out_string_String_self_0 to the stack
addiu $sp, $sp, -4
lw $t0, -4($fp)
lw $t1, -8($fp)
# Moving self to local_out_string_String_self_0
move $t1, $t0
sw $t1, -8($fp)
lw $t2, -0($fp)
# Printing a string
li $v0, 4
move $a0, $t2
syscall
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
sw $t1, -8($fp)
sw $t2, -0($fp)
# Removing all locals from stack
addiu $sp, $sp, 12
jr $ra


function_out_int_IO:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Pops the register with the param value number
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_out_int_IO_self_0 to the stack
addiu $sp, $sp, -4
lw $t0, -4($fp)
lw $t1, -8($fp)
# Moving self to local_out_int_IO_self_0
move $t1, $t0
sw $t1, -8($fp)
lw $t2, -0($fp)
# Printing an int
li $v0, 1
move $a0, $t2
syscall
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
sw $t1, -8($fp)
sw $t2, -0($fp)
# Removing all locals from stack
addiu $sp, $sp, 12
jr $ra


function_in_int_IO:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_in_int_IO_result_0 to the stack
addiu $sp, $sp, -4
lw $t0, -4($fp)
# Reading a int
li $v0, 5
syscall
move $t0, $v0
move $v0, $t0
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
# Removing all locals from stack
addiu $sp, $sp, 8
jr $ra


function_in_string_IO:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_in_string_IO_result_0 to the stack
addiu $sp, $sp, -4
lw $t0, -4($fp)
# Allocating memory for the buffer
li $a0, 356
li $v0, 9
syscall
move $t0, $v0
# Reading a string
# Putting buffer in a0
move $a0, $t0
# Putting length of string in a1
li $a1, 356
li $v0, 8
syscall
# Walks to eliminate the newline
move $t9, $t0
start_1:
lb $t8, 0($t9)
beqz $t8, end_1
add $t9, $t9, 1
j start_1
end_1:
addiu $t9, $t9, -1
sb $0, ($t9)
move $v0, $t0
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
# Removing all locals from stack
addiu $sp, $sp, 8
jr $ra


function_length_String:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_length_String_result_0 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
lw $t1, -4($fp)
move $t8, $t0
# Determining the length of a string
loop_2:
lb $t9, 0($t8)
beq $t9, $zero, end_2
addi $t8, $t8, 1
j loop_2
end_2:
sub $t1, $t8, $t0
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -4($fp)
# Removing all locals from stack
addiu $sp, $sp, 8
jr $ra


function_concat_String:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Pops the register with the param value word
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_concat_String_result_0 to the stack
addiu $sp, $sp, -4
lw $t0, -4($fp)
lw $t1, -0($fp)
lw $t2, -8($fp)
# Allocating memory for the buffer
li $a0, 356
li $v0, 9
syscall
move $t2, $v0
# Copy the first string to dest
move $a0, $t0
move $a1, $t2
sw $ra, ($sp)
addiu $sp, $sp, -4
jal strcopier
# Concatenate second string on result buffer
move $a0, $t1
move $a1, $v0
jal strcopier
sb $0, 0($v0)
addiu $sp, $sp, 4
lw $ra, ($sp)
j finish_3
# Definition of strcopier
strcopier:
# In a0 is the source and in a1 is the destination
loop_3:
lb $t8, ($a0)
beq $t8, $zero, end_3
addiu $a0, $a0, 1
sb $t8, ($a1)
addiu $a1, $a1, 1
b loop_3
end_3:
move $v0, $a1
jr $ra
finish_3:
move $v0, $t2
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
sw $t1, -0($fp)
sw $t2, -8($fp)
# Removing all locals from stack
addiu $sp, $sp, 12
jr $ra


function_substr_String:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Pops the register with the param value begin
addiu $fp, $fp, 4
# Pops the register with the param value end
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_substr_String_result_0 to the stack
addiu $sp, $sp, -4
lw $t0, -4($fp)
lw $t1, -0($fp)
lw $t2, -12($fp)
# Allocating memory for the buffer
li $a0, 356
li $v0, 9
syscall
move $t2, $v0
lw $t3, -8($fp)
# Getting the substring of a node
# Move to the first position in the string
li $v0, 0
move $t8, $t3
start_4:
lb $t9, 0($t8)
beqz $t9, error_4
addi $v0, 1
bgt $v0, $t0, end_len_4
addi $t8, 1
j start_4
end_len_4:
# Saving dest to iterate over him
move $v0, $t2
loop_4:
sub $t9, $v0, $t2
beq $t9, $t1, end_4
lb $t9, 0($t8)
beqz $t9, error_4
sb $t9, 0($v0)
addi $t8, $t8, 1
addi $v0, $v0, 1
j loop_4
error_4:
la $a0, index_error
li $v0, 4
move $a0, $t3
syscall
li $v0, 1
move $a0, $t0
syscall
li $v0, 1
move $a0, $t1
syscall
j .raise
end_4:
sb $0, 0($v0)
move $v0, $t2
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
sw $t1, -0($fp)
sw $t2, -12($fp)
sw $t3, -8($fp)
# Removing all locals from stack
addiu $sp, $sp, 16
jr $ra


function_type_name_String:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_type_name_String_result_0 to the stack
addiu $sp, $sp, -4
lw $t0, -4($fp)
# Saves in local_type_name_String_result_0 type_String
la $t0, type_String
move $v0, $t0
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
# Removing all locals from stack
addiu $sp, $sp, 8
jr $ra


function_copy_String:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_copy_String_result_0 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
lw $t1, -4($fp)
# Allocating memory for the buffer
li $a0, 356
li $v0, 9
syscall
move $t1, $v0
# Copy the first string to dest
move $a0, $t0
move $a1, $t1
sw $ra, ($sp)
addiu $sp, $sp, -4
jal strcopier
sb $0, 0($v0)
addiu $sp, $sp, 4
lw $ra, ($sp)
j finish_5
finish_5:
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -4($fp)
# Removing all locals from stack
addiu $sp, $sp, 8
jr $ra


function_type_name_Int:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_type_name_Int_result_0 to the stack
addiu $sp, $sp, -4
lw $t0, -4($fp)
# Saves in local_type_name_Int_result_0 type_Int
la $t0, type_Int
move $v0, $t0
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
# Removing all locals from stack
addiu $sp, $sp, 8
jr $ra


function_copy_Int:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_copy_Int_result_0 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
lw $t1, -4($fp)
# Moving self to local_copy_Int_result_0
move $t1, $t0
sw $t1, -4($fp)
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -4($fp)
# Removing all locals from stack
addiu $sp, $sp, 8
jr $ra


function_type_name_Bool:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_type_name_Bool_result_0 to the stack
addiu $sp, $sp, -4
lw $t0, -4($fp)
# Saves in local_type_name_Bool_result_0 type_Bool
la $t0, type_Bool
move $v0, $t0
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
# Removing all locals from stack
addiu $sp, $sp, 8
jr $ra


function_copy_Bool:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_copy_result_Bool_0 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
lw $t1, -4($fp)
# Moving self to local_copy_result_Bool_0
move $t1, $t0
sw $t1, -4($fp)
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -4($fp)
# Removing all locals from stack
addiu $sp, $sp, 8
jr $ra


function_abort_String:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_abort_String_msg_0 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
# Saves in self string_abort
la $t0, string_abort
# Printing a string
li $v0, 4
move $a0, $t0
syscall
# Exiting the program
li $t8, 0
li $v0, 17
move $a0, $t8
syscall
sw $t0, -0($fp)

function_abort_Int:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_abort_Int_msg_0 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
# Saves in self int_abort
la $t0, int_abort
# Printing a string
li $v0, 4
move $a0, $t0
syscall
# Exiting the program
li $t8, 0
li $v0, 17
move $a0, $t8
syscall
sw $t0, -0($fp)

function_abort_Bool:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_abort_Bool_msg_0 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
# Saves in self bool_abort
la $t0, bool_abort
# Printing a string
li $v0, 4
move $a0, $t0
syscall
# Exiting the program
li $t8, 0
li $v0, 17
move $a0, $t8
syscall
sw $t0, -0($fp)

function_A_A:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_A_A_internal_0 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
# self . var <- SET 0
li $t9, 0
sw $t9, 12($t0)
lw $t1, -4($fp)
# Moving self to local_A_A_internal_0
move $t1, $t0
sw $t1, -4($fp)
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -4($fp)
# Removing all locals from stack
addiu $sp, $sp, 8
jr $ra


function_value_A:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_value_A_var_0 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
lw $t1, -4($fp)
# local_value_A_var_0 <- GET self . var
lw $t1, 12($t0)
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -4($fp)
# Removing all locals from stack
addiu $sp, $sp, 8
jr $ra


function_set_var_A:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Pops the register with the param value num
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_set_var_A_internal_0 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
lw $t1, -4($fp)
# self . var <- SET num
sw $t0, 12($t1)
lw $t2, -8($fp)
# Moving self to local_set_var_A_internal_0
move $t2, $t1
sw $t2, -8($fp)
move $v0, $t2
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -4($fp)
sw $t2, -8($fp)
# Removing all locals from stack
addiu $sp, $sp, 12
jr $ra


function_method1_A:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Pops the register with the param value num
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
lw $t0, -4($fp)
move $v0, $t0
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
# Removing all locals from stack
addiu $sp, $sp, 8
jr $ra


function_method2_A:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Pops the register with the param value num1
addiu $fp, $fp, 4
# Pops the register with the param value num2
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_method2_A_x_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method2_A_internal_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method2_A_internal_2 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method2_A_internal_3 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method2_A_internal_4 to the stack
addiu $sp, $sp, -4
lw $t0, -12($fp)
# Moving 0 to local_method2_A_x_0
li $t0, 0
sw $t0, -12($fp)
lw $t1, -4($fp)
lw $t2, -0($fp)
lw $t3, -16($fp)
# local_method2_A_internal_1 <- num1 + num2
add $t3, $t1, $t2
# Moving local_method2_A_internal_1 to local_method2_A_x_0
move $t0, $t3
sw $t0, -12($fp)
lw $t4, -20($fp)
# Syscall to allocate memory of the object entry in heap
li $v0, 9
li $a0, 16
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_B
sw $t9, 0($v0)
# Saves the size of the node
li $t9, 16
sw $t9, 4($v0)
move $t4, $v0
# Adding Type Info addr
la $t8, types
lw $v0, 24($t8)
sw $v0, 8($t4)
# Static Dispatch of the method B
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t4, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -12($fp)
sw $t1, -4($fp)
sw $t2, -0($fp)
sw $t3, -16($fp)
sw $t4, -20($fp)
# This function will consume the arguments
jal function_B_B
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -20($fp)
# saves the return value
move $t0, $v0
lw $t1, -24($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_set_var_A
lw $t8, 20($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
lw $t2, -12($fp)
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -20($fp)
sw $t1, -24($fp)
sw $t2, -12($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -24($fp)
# saves the return value
move $t0, $v0
lw $t1, -28($fp)
# Moving local_method2_A_internal_3 to local_method2_A_internal_4
move $t1, $t0
sw $t1, -28($fp)
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -24($fp)
sw $t1, -28($fp)
# Removing all locals from stack
addiu $sp, $sp, 32
jr $ra


function_method3_A:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Pops the register with the param value num
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_method3_A_x_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method3_A_internal_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method3_A_internal_2 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method3_A_internal_3 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method3_A_internal_4 to the stack
addiu $sp, $sp, -4
lw $t0, -8($fp)
# Moving 0 to local_method3_A_x_0
li $t0, 0
sw $t0, -8($fp)
lw $t1, -0($fp)
lw $t2, -12($fp)
# local_method3_A_internal_1 <- ~num
not $t2, $t1
addi $t2, $t2, 1
# Moving local_method3_A_internal_1 to local_method3_A_x_0
move $t0, $t2
sw $t0, -8($fp)
lw $t3, -16($fp)
# Syscall to allocate memory of the object entry in heap
li $v0, 9
li $a0, 16
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_C
sw $t9, 0($v0)
# Saves the size of the node
li $t9, 16
sw $t9, 4($v0)
move $t3, $v0
# Adding Type Info addr
la $t8, types
lw $v0, 28($t8)
sw $v0, 8($t3)
# Static Dispatch of the method C
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t3, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -8($fp)
sw $t1, -0($fp)
sw $t2, -12($fp)
sw $t3, -16($fp)
# This function will consume the arguments
jal function_C_C
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -16($fp)
# saves the return value
move $t0, $v0
lw $t1, -20($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_set_var_A
lw $t8, 20($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
lw $t2, -8($fp)
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -16($fp)
sw $t1, -20($fp)
sw $t2, -8($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -20($fp)
# saves the return value
move $t0, $v0
lw $t1, -24($fp)
# Moving local_method3_A_internal_3 to local_method3_A_internal_4
move $t1, $t0
sw $t1, -24($fp)
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -20($fp)
sw $t1, -24($fp)
# Removing all locals from stack
addiu $sp, $sp, 28
jr $ra


function_method4_A:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Pops the register with the param value num1
addiu $fp, $fp, 4
# Pops the register with the param value num2
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_method4_A_internal_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method4_A_internal_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method4_A_x_2 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method4_A_internal_3 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method4_A_internal_4 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method4_A_internal_5 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method4_A_internal_6 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method4_A_x_7 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method4_A_internal_8 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method4_A_internal_9 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method4_A_internal_10 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method4_A_internal_11 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
lw $t1, -4($fp)
lw $t2, -12($fp)
# local_method4_A_internal_0 <- num2 < num1
slt $t2, $t0, $t1
# If local_method4_A_internal_0 goto true__113
sw $t0, -0($fp)
sw $t1, -4($fp)
sw $t2, -12($fp)
bnez $t2, true__113
lw $t0, -20($fp)
# Moving 0 to local_method4_A_x_2
li $t0, 0
sw $t0, -20($fp)
lw $t1, -0($fp)
lw $t2, -4($fp)
lw $t3, -24($fp)
# local_method4_A_internal_3 <- num2 - num1
sub $t3, $t1, $t2
# Moving local_method4_A_internal_3 to local_method4_A_x_2
move $t0, $t3
sw $t0, -20($fp)
lw $t4, -28($fp)
# Syscall to allocate memory of the object entry in heap
li $v0, 9
li $a0, 16
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_D
sw $t9, 0($v0)
# Saves the size of the node
li $t9, 16
sw $t9, 4($v0)
move $t4, $v0
# Adding Type Info addr
la $t8, types
lw $v0, 32($t8)
sw $v0, 8($t4)
# Static Dispatch of the method D
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t4, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -20($fp)
sw $t1, -0($fp)
sw $t2, -4($fp)
sw $t3, -24($fp)
sw $t4, -28($fp)
# This function will consume the arguments
jal function_D_D
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -28($fp)
# saves the return value
move $t0, $v0
lw $t1, -32($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_set_var_A
lw $t8, 20($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
lw $t2, -20($fp)
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -28($fp)
sw $t1, -32($fp)
sw $t2, -20($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -32($fp)
# saves the return value
move $t0, $v0
lw $t1, -36($fp)
# Moving local_method4_A_internal_5 to local_method4_A_internal_6
move $t1, $t0
sw $t1, -36($fp)
lw $t2, -16($fp)
# Moving local_method4_A_internal_6 to local_method4_A_internal_1
move $t2, $t1
sw $t2, -16($fp)
sw $t0, -32($fp)
sw $t1, -36($fp)
sw $t2, -16($fp)
j end__113
true__113:
lw $t0, -40($fp)
# Moving 0 to local_method4_A_x_7
li $t0, 0
sw $t0, -40($fp)
lw $t1, -4($fp)
lw $t2, -0($fp)
lw $t3, -44($fp)
# local_method4_A_internal_8 <- num1 - num2
sub $t3, $t1, $t2
# Moving local_method4_A_internal_8 to local_method4_A_x_7
move $t0, $t3
sw $t0, -40($fp)
lw $t4, -48($fp)
# Syscall to allocate memory of the object entry in heap
li $v0, 9
li $a0, 16
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_D
sw $t9, 0($v0)
# Saves the size of the node
li $t9, 16
sw $t9, 4($v0)
move $t4, $v0
# Adding Type Info addr
la $t8, types
lw $v0, 32($t8)
sw $v0, 8($t4)
# Static Dispatch of the method D
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t4, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -40($fp)
sw $t1, -4($fp)
sw $t2, -0($fp)
sw $t3, -44($fp)
sw $t4, -48($fp)
# This function will consume the arguments
jal function_D_D
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -48($fp)
# saves the return value
move $t0, $v0
lw $t1, -52($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_set_var_A
lw $t8, 20($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
lw $t2, -40($fp)
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -48($fp)
sw $t1, -52($fp)
sw $t2, -40($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -52($fp)
# saves the return value
move $t0, $v0
lw $t1, -56($fp)
# Moving local_method4_A_internal_10 to local_method4_A_internal_11
move $t1, $t0
sw $t1, -56($fp)
lw $t2, -16($fp)
# Moving local_method4_A_internal_11 to local_method4_A_internal_1
move $t2, $t1
sw $t2, -16($fp)
sw $t0, -52($fp)
sw $t1, -56($fp)
sw $t2, -16($fp)
end__113:
lw $t0, -16($fp)
move $v0, $t0
# Empty all used registers and saves them to memory
sw $t0, -16($fp)
# Removing all locals from stack
addiu $sp, $sp, 60
jr $ra


function_method5_A:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Pops the register with the param value num
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_method5_A_x_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method5_A_y_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method5_A_internal_2 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method5_A_internal_3 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method5_A_internal_4 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method5_A_internal_5 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method5_A_internal_6 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method5_A_internal_7 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method5_A_internal_8 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method5_A_internal_9 to the stack
addiu $sp, $sp, -4
lw $t0, -8($fp)
# Moving 1 to local_method5_A_x_0
li $t0, 1
sw $t0, -8($fp)
lw $t1, -12($fp)
# Moving 1 to local_method5_A_y_1
li $t1, 1
sw $t1, -12($fp)
lw $t2, -16($fp)
# Initialize void node
li $a0, 4
li $v0, 9
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_Void
sw $t9, 0($v0)
move $t2, $v0
sw $t0, -8($fp)
sw $t1, -12($fp)
sw $t2, -16($fp)
start__156:
lw $t0, -12($fp)
lw $t1, -0($fp)
lw $t2, -20($fp)
# local_method5_A_internal_3 <- local_method5_A_y_1 <= num
sle $t2, $t0, $t1
# If not local_method5_A_internal_3 goto end__156
sw $t0, -12($fp)
sw $t1, -0($fp)
sw $t2, -20($fp)
beqz $t2, end__156
lw $t0, -8($fp)
lw $t1, -12($fp)
lw $t2, -24($fp)
# local_method5_A_internal_4 <- local_method5_A_x_0 * local_method5_A_y_1
mult $t0, $t1
mflo $t2
# Moving local_method5_A_internal_4 to local_method5_A_x_0
move $t0, $t2
sw $t0, -8($fp)
lw $t3, -28($fp)
# local_method5_A_internal_5 <- local_method5_A_y_1 + 1
addi $t3, $t1, 1
# Moving local_method5_A_internal_5 to local_method5_A_y_1
move $t1, $t3
sw $t1, -12($fp)
lw $t4, -32($fp)
# Moving local_method5_A_internal_5 to local_method5_A_internal_6
move $t4, $t3
sw $t4, -32($fp)
lw $t5, -16($fp)
# Moving local_method5_A_internal_6 to local_method5_A_internal_2
move $t5, $t4
sw $t5, -16($fp)
sw $t0, -8($fp)
sw $t1, -12($fp)
sw $t2, -24($fp)
sw $t3, -28($fp)
sw $t4, -32($fp)
sw $t5, -16($fp)
j start__156
end__156:
lw $t0, -36($fp)
# Syscall to allocate memory of the object entry in heap
li $v0, 9
li $a0, 16
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_E
sw $t9, 0($v0)
# Saves the size of the node
li $t9, 16
sw $t9, 4($v0)
move $t0, $v0
# Adding Type Info addr
la $t8, types
lw $v0, 36($t8)
sw $v0, 8($t0)
# Static Dispatch of the method E
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -36($fp)
# This function will consume the arguments
jal function_E_E
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -36($fp)
# saves the return value
move $t0, $v0
lw $t1, -40($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_set_var_A
lw $t8, 20($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
lw $t2, -8($fp)
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -36($fp)
sw $t1, -40($fp)
sw $t2, -8($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -40($fp)
# saves the return value
move $t0, $v0
lw $t1, -44($fp)
# Moving local_method5_A_internal_8 to local_method5_A_internal_9
move $t1, $t0
sw $t1, -44($fp)
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -40($fp)
sw $t1, -44($fp)
# Removing all locals from stack
addiu $sp, $sp, 48
jr $ra


function_B_B:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_B_B_internal_0 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
# self . var <- SET 0
li $t9, 0
sw $t9, 12($t0)
lw $t1, -4($fp)
# Moving self to local_B_B_internal_0
move $t1, $t0
sw $t1, -4($fp)
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -4($fp)
# Removing all locals from stack
addiu $sp, $sp, 8
jr $ra


function_method5_B:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Pops the register with the param value num
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_method5_B_x_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method5_B_internal_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method5_B_internal_2 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method5_B_internal_3 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method5_B_internal_4 to the stack
addiu $sp, $sp, -4
lw $t0, -8($fp)
# Moving 0 to local_method5_B_x_0
li $t0, 0
sw $t0, -8($fp)
lw $t1, -0($fp)
lw $t2, -12($fp)
# local_method5_B_internal_1 <- num * num
mult $t1, $t1
mflo $t2
# Moving local_method5_B_internal_1 to local_method5_B_x_0
move $t0, $t2
sw $t0, -8($fp)
lw $t3, -16($fp)
# Syscall to allocate memory of the object entry in heap
li $v0, 9
li $a0, 16
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_E
sw $t9, 0($v0)
# Saves the size of the node
li $t9, 16
sw $t9, 4($v0)
move $t3, $v0
# Adding Type Info addr
la $t8, types
lw $v0, 36($t8)
sw $v0, 8($t3)
# Static Dispatch of the method E
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t3, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -8($fp)
sw $t1, -0($fp)
sw $t2, -12($fp)
sw $t3, -16($fp)
# This function will consume the arguments
jal function_E_E
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -16($fp)
# saves the return value
move $t0, $v0
lw $t1, -20($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_set_var_A
lw $t8, 20($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
lw $t2, -8($fp)
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -16($fp)
sw $t1, -20($fp)
sw $t2, -8($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -20($fp)
# saves the return value
move $t0, $v0
lw $t1, -24($fp)
# Moving local_method5_B_internal_3 to local_method5_B_internal_4
move $t1, $t0
sw $t1, -24($fp)
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -20($fp)
sw $t1, -24($fp)
# Removing all locals from stack
addiu $sp, $sp, 28
jr $ra


function_C_C:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_C_C_internal_0 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
# self . var <- SET 0
li $t9, 0
sw $t9, 12($t0)
lw $t1, -4($fp)
# Moving self to local_C_C_internal_0
move $t1, $t0
sw $t1, -4($fp)
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -4($fp)
# Removing all locals from stack
addiu $sp, $sp, 8
jr $ra


function_method6_C:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Pops the register with the param value num
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_method6_C_x_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method6_C_internal_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method6_C_internal_2 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method6_C_internal_3 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method6_C_internal_4 to the stack
addiu $sp, $sp, -4
lw $t0, -8($fp)
# Moving 0 to local_method6_C_x_0
li $t0, 0
sw $t0, -8($fp)
lw $t1, -0($fp)
lw $t2, -12($fp)
# local_method6_C_internal_1 <- ~num
not $t2, $t1
addi $t2, $t2, 1
# Moving local_method6_C_internal_1 to local_method6_C_x_0
move $t0, $t2
sw $t0, -8($fp)
lw $t3, -16($fp)
# Syscall to allocate memory of the object entry in heap
li $v0, 9
li $a0, 16
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_A
sw $t9, 0($v0)
# Saves the size of the node
li $t9, 16
sw $t9, 4($v0)
move $t3, $v0
# Adding Type Info addr
la $t8, types
lw $v0, 20($t8)
sw $v0, 8($t3)
# Static Dispatch of the method A
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t3, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -8($fp)
sw $t1, -0($fp)
sw $t2, -12($fp)
sw $t3, -16($fp)
# This function will consume the arguments
jal function_A_A
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -16($fp)
# saves the return value
move $t0, $v0
lw $t1, -20($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_set_var_A
lw $t8, 20($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
lw $t2, -8($fp)
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -16($fp)
sw $t1, -20($fp)
sw $t2, -8($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -20($fp)
# saves the return value
move $t0, $v0
lw $t1, -24($fp)
# Moving local_method6_C_internal_3 to local_method6_C_internal_4
move $t1, $t0
sw $t1, -24($fp)
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -20($fp)
sw $t1, -24($fp)
# Removing all locals from stack
addiu $sp, $sp, 28
jr $ra


function_method5_C:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Pops the register with the param value num
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_method5_C_x_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method5_C_internal_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method5_C_internal_2 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method5_C_internal_3 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method5_C_internal_4 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method5_C_internal_5 to the stack
addiu $sp, $sp, -4
lw $t0, -8($fp)
# Moving 0 to local_method5_C_x_0
li $t0, 0
sw $t0, -8($fp)
lw $t1, -0($fp)
lw $t2, -16($fp)
# local_method5_C_internal_2 <- num * num
mult $t1, $t1
mflo $t2
lw $t3, -12($fp)
# local_method5_C_internal_1 <- local_method5_C_internal_2 * num
mult $t2, $t1
mflo $t3
# Moving local_method5_C_internal_1 to local_method5_C_x_0
move $t0, $t3
sw $t0, -8($fp)
lw $t4, -20($fp)
# Syscall to allocate memory of the object entry in heap
li $v0, 9
li $a0, 16
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_E
sw $t9, 0($v0)
# Saves the size of the node
li $t9, 16
sw $t9, 4($v0)
move $t4, $v0
# Adding Type Info addr
la $t8, types
lw $v0, 36($t8)
sw $v0, 8($t4)
# Static Dispatch of the method E
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t4, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -8($fp)
sw $t1, -0($fp)
sw $t2, -16($fp)
sw $t3, -12($fp)
sw $t4, -20($fp)
# This function will consume the arguments
jal function_E_E
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -20($fp)
# saves the return value
move $t0, $v0
lw $t1, -24($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_set_var_A
lw $t8, 20($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
lw $t2, -8($fp)
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -20($fp)
sw $t1, -24($fp)
sw $t2, -8($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -24($fp)
# saves the return value
move $t0, $v0
lw $t1, -28($fp)
# Moving local_method5_C_internal_4 to local_method5_C_internal_5
move $t1, $t0
sw $t1, -28($fp)
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -24($fp)
sw $t1, -28($fp)
# Removing all locals from stack
addiu $sp, $sp, 32
jr $ra


function_D_D:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_D_D_internal_0 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
# self . var <- SET 0
li $t9, 0
sw $t9, 12($t0)
lw $t1, -4($fp)
# Moving self to local_D_D_internal_0
move $t1, $t0
sw $t1, -4($fp)
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -4($fp)
# Removing all locals from stack
addiu $sp, $sp, 8
jr $ra


function_method7_D:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Pops the register with the param value num
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_method7_D_x_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method7_D_internal_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method7_D_internal_2 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method7_D_internal_3 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method7_D_internal_4 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method7_D_internal_5 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method7_D_internal_6 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method7_D_internal_7 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method7_D_internal_8 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method7_D_internal_9 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method7_D_internal_10 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method7_D_internal_11 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method7_D_internal_12 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
lw $t1, -8($fp)
# Moving num to local_method7_D_x_0
move $t1, $t0
sw $t1, -8($fp)
lw $t2, -12($fp)
# local_method7_D_internal_1 <- local_method7_D_x_0 < 0
li $t9, 0
slt $t2, $t1, $t9
# If local_method7_D_internal_1 goto true__264
sw $t0, -0($fp)
sw $t1, -8($fp)
sw $t2, -12($fp)
bnez $t2, true__264
lw $t0, -8($fp)
lw $t1, -20($fp)
# local_method7_D_internal_3 <- 0 = local_method7_D_x_0
li $t9, 0
seq $t1, $t9, $t0
# If local_method7_D_internal_3 goto true__268
sw $t0, -8($fp)
sw $t1, -20($fp)
bnez $t1, true__268
lw $t0, -8($fp)
lw $t1, -28($fp)
# local_method7_D_internal_5 <- 1 = local_method7_D_x_0
li $t9, 1
seq $t1, $t9, $t0
# If local_method7_D_internal_5 goto true__272
sw $t0, -8($fp)
sw $t1, -28($fp)
bnez $t1, true__272
lw $t0, -8($fp)
lw $t1, -36($fp)
# local_method7_D_internal_7 <- 2 = local_method7_D_x_0
li $t9, 2
seq $t1, $t9, $t0
# If local_method7_D_internal_7 goto true__276
sw $t0, -8($fp)
sw $t1, -36($fp)
bnez $t1, true__276
lw $t0, -8($fp)
lw $t1, -44($fp)
# local_method7_D_internal_9 <- local_method7_D_x_0 - 3
addi $t1, $t0, -3
lw $t2, -4($fp)
lw $t3, -48($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_method7_D
lw $t8, 52($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -8($fp)
sw $t1, -44($fp)
sw $t2, -4($fp)
sw $t3, -48($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -48($fp)
# saves the return value
move $t0, $v0
lw $t1, -40($fp)
# Moving local_method7_D_internal_10 to local_method7_D_internal_8
move $t1, $t0
sw $t1, -40($fp)
sw $t0, -48($fp)
sw $t1, -40($fp)
j end__276
true__276:
lw $t0, -40($fp)
# Moving 0 to local_method7_D_internal_8
li $t0, 0
sw $t0, -40($fp)
sw $t0, -40($fp)
end__276:
lw $t0, -40($fp)
lw $t1, -32($fp)
# Moving local_method7_D_internal_8 to local_method7_D_internal_6
move $t1, $t0
sw $t1, -32($fp)
sw $t0, -40($fp)
sw $t1, -32($fp)
j end__272
true__272:
lw $t0, -32($fp)
# Moving 0 to local_method7_D_internal_6
li $t0, 0
sw $t0, -32($fp)
sw $t0, -32($fp)
end__272:
lw $t0, -32($fp)
lw $t1, -24($fp)
# Moving local_method7_D_internal_6 to local_method7_D_internal_4
move $t1, $t0
sw $t1, -24($fp)
sw $t0, -32($fp)
sw $t1, -24($fp)
j end__268
true__268:
lw $t0, -24($fp)
# Moving 1 to local_method7_D_internal_4
li $t0, 1
sw $t0, -24($fp)
sw $t0, -24($fp)
end__268:
lw $t0, -24($fp)
lw $t1, -16($fp)
# Moving local_method7_D_internal_4 to local_method7_D_internal_2
move $t1, $t0
sw $t1, -16($fp)
sw $t0, -24($fp)
sw $t1, -16($fp)
j end__264
true__264:
lw $t0, -8($fp)
lw $t1, -52($fp)
# local_method7_D_internal_11 <- ~local_method7_D_x_0
not $t1, $t0
addi $t1, $t1, 1
lw $t2, -4($fp)
lw $t3, -56($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_method7_D
lw $t8, 52($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -8($fp)
sw $t1, -52($fp)
sw $t2, -4($fp)
sw $t3, -56($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -56($fp)
# saves the return value
move $t0, $v0
lw $t1, -16($fp)
# Moving local_method7_D_internal_12 to local_method7_D_internal_2
move $t1, $t0
sw $t1, -16($fp)
sw $t0, -56($fp)
sw $t1, -16($fp)
end__264:
lw $t0, -16($fp)
move $v0, $t0
# Empty all used registers and saves them to memory
sw $t0, -16($fp)
# Removing all locals from stack
addiu $sp, $sp, 60
jr $ra


function_E_E:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_E_E_internal_0 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
# self . var <- SET 0
li $t9, 0
sw $t9, 12($t0)
lw $t1, -4($fp)
# Moving self to local_E_E_internal_0
move $t1, $t0
sw $t1, -4($fp)
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -4($fp)
# Removing all locals from stack
addiu $sp, $sp, 8
jr $ra


function_method6_E:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Pops the register with the param value num
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_method6_E_x_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method6_E_internal_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method6_E_internal_2 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method6_E_internal_3 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_method6_E_internal_4 to the stack
addiu $sp, $sp, -4
lw $t0, -8($fp)
# Moving 0 to local_method6_E_x_0
li $t0, 0
sw $t0, -8($fp)
lw $t1, -0($fp)
lw $t2, -12($fp)
# local_method6_E_internal_1 <- num / 8
li $t9, 8
la $a0, zero_error
beqz $t9, .raise
div $t1, $t9
mflo $t2
# Moving local_method6_E_internal_1 to local_method6_E_x_0
move $t0, $t2
sw $t0, -8($fp)
lw $t3, -16($fp)
# Syscall to allocate memory of the object entry in heap
li $v0, 9
li $a0, 16
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_A
sw $t9, 0($v0)
# Saves the size of the node
li $t9, 16
sw $t9, 4($v0)
move $t3, $v0
# Adding Type Info addr
la $t8, types
lw $v0, 20($t8)
sw $v0, 8($t3)
# Static Dispatch of the method A
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t3, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -8($fp)
sw $t1, -0($fp)
sw $t2, -12($fp)
sw $t3, -16($fp)
# This function will consume the arguments
jal function_A_A
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -16($fp)
# saves the return value
move $t0, $v0
lw $t1, -20($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_set_var_A
lw $t8, 20($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
lw $t2, -8($fp)
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -16($fp)
sw $t1, -20($fp)
sw $t2, -8($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -20($fp)
# saves the return value
move $t0, $v0
lw $t1, -24($fp)
# Moving local_method6_E_internal_3 to local_method6_E_internal_4
move $t1, $t0
sw $t1, -24($fp)
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -20($fp)
sw $t1, -24($fp)
# Removing all locals from stack
addiu $sp, $sp, 28
jr $ra


function_c2i_A2I:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Pops the register with the param value char
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_c2i_A2I_internal_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_c2i_A2I_internal_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_c2i_A2I_internal_2 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_c2i_A2I_internal_3 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_c2i_A2I_internal_4 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_c2i_A2I_internal_5 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_c2i_A2I_internal_6 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_c2i_A2I_internal_7 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_c2i_A2I_internal_8 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_c2i_A2I_internal_9 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_c2i_A2I_internal_10 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_c2i_A2I_internal_11 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_c2i_A2I_internal_12 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_c2i_A2I_internal_13 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_c2i_A2I_internal_14 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_c2i_A2I_internal_15 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_c2i_A2I_internal_16 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_c2i_A2I_internal_17 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_c2i_A2I_internal_18 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_c2i_A2I_internal_19 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_c2i_A2I_internal_20 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_c2i_A2I_internal_21 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_c2i_A2I_internal_22 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_c2i_A2I_internal_23 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_c2i_A2I_internal_24 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_c2i_A2I_internal_25 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_c2i_A2I_internal_26 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_c2i_A2I_internal_27 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_c2i_A2I_internal_28 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_c2i_A2I_internal_29 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_c2i_A2I_internal_30 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_c2i_A2I_internal_31 to the stack
addiu $sp, $sp, -4
lw $t0, -12($fp)
# Saves in local_c2i_A2I_internal_1 data_1
la $t0, data_1
lw $t1, -0($fp)
lw $t2, -8($fp)
# local_c2i_A2I_internal_0 <- char = local_c2i_A2I_internal_1
move $t8, $t1
move $t9, $t0
loop_6:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_6
beqz $a1, mismatch_6
seq $v0, $a0, $a1
beqz $v0, mismatch_6
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_6
mismatch_6:
li $v0, 0
j end_6
check_6:
bnez $a1, mismatch_6
li $v0, 1
end_6:
move $t2, $v0
# If local_c2i_A2I_internal_0 goto true__341
sw $t0, -12($fp)
sw $t1, -0($fp)
sw $t2, -8($fp)
bnez $t2, true__341
lw $t0, -24($fp)
# Saves in local_c2i_A2I_internal_4 data_2
la $t0, data_2
lw $t1, -0($fp)
lw $t2, -20($fp)
# local_c2i_A2I_internal_3 <- char = local_c2i_A2I_internal_4
move $t8, $t1
move $t9, $t0
loop_7:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_7
beqz $a1, mismatch_7
seq $v0, $a0, $a1
beqz $v0, mismatch_7
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_7
mismatch_7:
li $v0, 0
j end_7
check_7:
bnez $a1, mismatch_7
li $v0, 1
end_7:
move $t2, $v0
# If local_c2i_A2I_internal_3 goto true__348
sw $t0, -24($fp)
sw $t1, -0($fp)
sw $t2, -20($fp)
bnez $t2, true__348
lw $t0, -36($fp)
# Saves in local_c2i_A2I_internal_7 data_3
la $t0, data_3
lw $t1, -0($fp)
lw $t2, -32($fp)
# local_c2i_A2I_internal_6 <- char = local_c2i_A2I_internal_7
move $t8, $t1
move $t9, $t0
loop_8:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_8
beqz $a1, mismatch_8
seq $v0, $a0, $a1
beqz $v0, mismatch_8
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_8
mismatch_8:
li $v0, 0
j end_8
check_8:
bnez $a1, mismatch_8
li $v0, 1
end_8:
move $t2, $v0
# If local_c2i_A2I_internal_6 goto true__355
sw $t0, -36($fp)
sw $t1, -0($fp)
sw $t2, -32($fp)
bnez $t2, true__355
lw $t0, -48($fp)
# Saves in local_c2i_A2I_internal_10 data_4
la $t0, data_4
lw $t1, -0($fp)
lw $t2, -44($fp)
# local_c2i_A2I_internal_9 <- char = local_c2i_A2I_internal_10
move $t8, $t1
move $t9, $t0
loop_9:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_9
beqz $a1, mismatch_9
seq $v0, $a0, $a1
beqz $v0, mismatch_9
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_9
mismatch_9:
li $v0, 0
j end_9
check_9:
bnez $a1, mismatch_9
li $v0, 1
end_9:
move $t2, $v0
# If local_c2i_A2I_internal_9 goto true__362
sw $t0, -48($fp)
sw $t1, -0($fp)
sw $t2, -44($fp)
bnez $t2, true__362
lw $t0, -60($fp)
# Saves in local_c2i_A2I_internal_13 data_5
la $t0, data_5
lw $t1, -0($fp)
lw $t2, -56($fp)
# local_c2i_A2I_internal_12 <- char = local_c2i_A2I_internal_13
move $t8, $t1
move $t9, $t0
loop_10:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_10
beqz $a1, mismatch_10
seq $v0, $a0, $a1
beqz $v0, mismatch_10
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_10
mismatch_10:
li $v0, 0
j end_10
check_10:
bnez $a1, mismatch_10
li $v0, 1
end_10:
move $t2, $v0
# If local_c2i_A2I_internal_12 goto true__369
sw $t0, -60($fp)
sw $t1, -0($fp)
sw $t2, -56($fp)
bnez $t2, true__369
lw $t0, -72($fp)
# Saves in local_c2i_A2I_internal_16 data_6
la $t0, data_6
lw $t1, -0($fp)
lw $t2, -68($fp)
# local_c2i_A2I_internal_15 <- char = local_c2i_A2I_internal_16
move $t8, $t1
move $t9, $t0
loop_11:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_11
beqz $a1, mismatch_11
seq $v0, $a0, $a1
beqz $v0, mismatch_11
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_11
mismatch_11:
li $v0, 0
j end_11
check_11:
bnez $a1, mismatch_11
li $v0, 1
end_11:
move $t2, $v0
# If local_c2i_A2I_internal_15 goto true__376
sw $t0, -72($fp)
sw $t1, -0($fp)
sw $t2, -68($fp)
bnez $t2, true__376
lw $t0, -84($fp)
# Saves in local_c2i_A2I_internal_19 data_7
la $t0, data_7
lw $t1, -0($fp)
lw $t2, -80($fp)
# local_c2i_A2I_internal_18 <- char = local_c2i_A2I_internal_19
move $t8, $t1
move $t9, $t0
loop_12:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_12
beqz $a1, mismatch_12
seq $v0, $a0, $a1
beqz $v0, mismatch_12
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_12
mismatch_12:
li $v0, 0
j end_12
check_12:
bnez $a1, mismatch_12
li $v0, 1
end_12:
move $t2, $v0
# If local_c2i_A2I_internal_18 goto true__383
sw $t0, -84($fp)
sw $t1, -0($fp)
sw $t2, -80($fp)
bnez $t2, true__383
lw $t0, -96($fp)
# Saves in local_c2i_A2I_internal_22 data_8
la $t0, data_8
lw $t1, -0($fp)
lw $t2, -92($fp)
# local_c2i_A2I_internal_21 <- char = local_c2i_A2I_internal_22
move $t8, $t1
move $t9, $t0
loop_13:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_13
beqz $a1, mismatch_13
seq $v0, $a0, $a1
beqz $v0, mismatch_13
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_13
mismatch_13:
li $v0, 0
j end_13
check_13:
bnez $a1, mismatch_13
li $v0, 1
end_13:
move $t2, $v0
# If local_c2i_A2I_internal_21 goto true__390
sw $t0, -96($fp)
sw $t1, -0($fp)
sw $t2, -92($fp)
bnez $t2, true__390
lw $t0, -108($fp)
# Saves in local_c2i_A2I_internal_25 data_9
la $t0, data_9
lw $t1, -0($fp)
lw $t2, -104($fp)
# local_c2i_A2I_internal_24 <- char = local_c2i_A2I_internal_25
move $t8, $t1
move $t9, $t0
loop_14:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_14
beqz $a1, mismatch_14
seq $v0, $a0, $a1
beqz $v0, mismatch_14
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_14
mismatch_14:
li $v0, 0
j end_14
check_14:
bnez $a1, mismatch_14
li $v0, 1
end_14:
move $t2, $v0
# If local_c2i_A2I_internal_24 goto true__397
sw $t0, -108($fp)
sw $t1, -0($fp)
sw $t2, -104($fp)
bnez $t2, true__397
lw $t0, -120($fp)
# Saves in local_c2i_A2I_internal_28 data_10
la $t0, data_10
lw $t1, -0($fp)
lw $t2, -116($fp)
# local_c2i_A2I_internal_27 <- char = local_c2i_A2I_internal_28
move $t8, $t1
move $t9, $t0
loop_15:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_15
beqz $a1, mismatch_15
seq $v0, $a0, $a1
beqz $v0, mismatch_15
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_15
mismatch_15:
li $v0, 0
j end_15
check_15:
bnez $a1, mismatch_15
li $v0, 1
end_15:
move $t2, $v0
# If local_c2i_A2I_internal_27 goto true__404
sw $t0, -120($fp)
sw $t1, -0($fp)
sw $t2, -116($fp)
bnez $t2, true__404
lw $t0, -4($fp)
lw $t1, -128($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_abort_Object
lw $t8, 4($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
sw $t1, -128($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -128($fp)
# saves the return value
move $t0, $v0
lw $t1, -132($fp)
# Moving 0 to local_c2i_A2I_internal_31
li $t1, 0
sw $t1, -132($fp)
lw $t2, -124($fp)
# Moving local_c2i_A2I_internal_31 to local_c2i_A2I_internal_29
move $t2, $t1
sw $t2, -124($fp)
sw $t0, -128($fp)
sw $t1, -132($fp)
sw $t2, -124($fp)
j end__404
true__404:
lw $t0, -124($fp)
# Moving 9 to local_c2i_A2I_internal_29
li $t0, 9
sw $t0, -124($fp)
sw $t0, -124($fp)
end__404:
lw $t0, -124($fp)
lw $t1, -112($fp)
# Moving local_c2i_A2I_internal_29 to local_c2i_A2I_internal_26
move $t1, $t0
sw $t1, -112($fp)
sw $t0, -124($fp)
sw $t1, -112($fp)
j end__397
true__397:
lw $t0, -112($fp)
# Moving 8 to local_c2i_A2I_internal_26
li $t0, 8
sw $t0, -112($fp)
sw $t0, -112($fp)
end__397:
lw $t0, -112($fp)
lw $t1, -100($fp)
# Moving local_c2i_A2I_internal_26 to local_c2i_A2I_internal_23
move $t1, $t0
sw $t1, -100($fp)
sw $t0, -112($fp)
sw $t1, -100($fp)
j end__390
true__390:
lw $t0, -100($fp)
# Moving 7 to local_c2i_A2I_internal_23
li $t0, 7
sw $t0, -100($fp)
sw $t0, -100($fp)
end__390:
lw $t0, -100($fp)
lw $t1, -88($fp)
# Moving local_c2i_A2I_internal_23 to local_c2i_A2I_internal_20
move $t1, $t0
sw $t1, -88($fp)
sw $t0, -100($fp)
sw $t1, -88($fp)
j end__383
true__383:
lw $t0, -88($fp)
# Moving 6 to local_c2i_A2I_internal_20
li $t0, 6
sw $t0, -88($fp)
sw $t0, -88($fp)
end__383:
lw $t0, -88($fp)
lw $t1, -76($fp)
# Moving local_c2i_A2I_internal_20 to local_c2i_A2I_internal_17
move $t1, $t0
sw $t1, -76($fp)
sw $t0, -88($fp)
sw $t1, -76($fp)
j end__376
true__376:
lw $t0, -76($fp)
# Moving 5 to local_c2i_A2I_internal_17
li $t0, 5
sw $t0, -76($fp)
sw $t0, -76($fp)
end__376:
lw $t0, -76($fp)
lw $t1, -64($fp)
# Moving local_c2i_A2I_internal_17 to local_c2i_A2I_internal_14
move $t1, $t0
sw $t1, -64($fp)
sw $t0, -76($fp)
sw $t1, -64($fp)
j end__369
true__369:
lw $t0, -64($fp)
# Moving 4 to local_c2i_A2I_internal_14
li $t0, 4
sw $t0, -64($fp)
sw $t0, -64($fp)
end__369:
lw $t0, -64($fp)
lw $t1, -52($fp)
# Moving local_c2i_A2I_internal_14 to local_c2i_A2I_internal_11
move $t1, $t0
sw $t1, -52($fp)
sw $t0, -64($fp)
sw $t1, -52($fp)
j end__362
true__362:
lw $t0, -52($fp)
# Moving 3 to local_c2i_A2I_internal_11
li $t0, 3
sw $t0, -52($fp)
sw $t0, -52($fp)
end__362:
lw $t0, -52($fp)
lw $t1, -40($fp)
# Moving local_c2i_A2I_internal_11 to local_c2i_A2I_internal_8
move $t1, $t0
sw $t1, -40($fp)
sw $t0, -52($fp)
sw $t1, -40($fp)
j end__355
true__355:
lw $t0, -40($fp)
# Moving 2 to local_c2i_A2I_internal_8
li $t0, 2
sw $t0, -40($fp)
sw $t0, -40($fp)
end__355:
lw $t0, -40($fp)
lw $t1, -28($fp)
# Moving local_c2i_A2I_internal_8 to local_c2i_A2I_internal_5
move $t1, $t0
sw $t1, -28($fp)
sw $t0, -40($fp)
sw $t1, -28($fp)
j end__348
true__348:
lw $t0, -28($fp)
# Moving 1 to local_c2i_A2I_internal_5
li $t0, 1
sw $t0, -28($fp)
sw $t0, -28($fp)
end__348:
lw $t0, -28($fp)
lw $t1, -16($fp)
# Moving local_c2i_A2I_internal_5 to local_c2i_A2I_internal_2
move $t1, $t0
sw $t1, -16($fp)
sw $t0, -28($fp)
sw $t1, -16($fp)
j end__341
true__341:
lw $t0, -16($fp)
# Moving 0 to local_c2i_A2I_internal_2
li $t0, 0
sw $t0, -16($fp)
sw $t0, -16($fp)
end__341:
lw $t0, -16($fp)
move $v0, $t0
# Empty all used registers and saves them to memory
sw $t0, -16($fp)
# Removing all locals from stack
addiu $sp, $sp, 136
jr $ra


function_i2c_A2I:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Pops the register with the param value i
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_i2c_A2I_internal_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2c_A2I_internal_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2c_A2I_internal_2 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2c_A2I_internal_3 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2c_A2I_internal_4 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2c_A2I_internal_5 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2c_A2I_internal_6 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2c_A2I_internal_7 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2c_A2I_internal_8 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2c_A2I_internal_9 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2c_A2I_internal_10 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2c_A2I_internal_11 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2c_A2I_internal_12 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2c_A2I_internal_13 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2c_A2I_internal_14 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2c_A2I_internal_15 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2c_A2I_internal_16 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2c_A2I_internal_17 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2c_A2I_internal_18 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2c_A2I_internal_19 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2c_A2I_internal_20 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2c_A2I_internal_21 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2c_A2I_internal_22 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2c_A2I_internal_23 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2c_A2I_internal_24 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2c_A2I_internal_25 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2c_A2I_internal_26 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2c_A2I_internal_27 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2c_A2I_internal_28 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2c_A2I_internal_29 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2c_A2I_internal_30 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2c_A2I_internal_31 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2c_A2I_internal_32 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
lw $t1, -8($fp)
# local_i2c_A2I_internal_0 <- i = 0
li $t9, 0
seq $t1, $t0, $t9
# If local_i2c_A2I_internal_0 goto true__466
sw $t0, -0($fp)
sw $t1, -8($fp)
bnez $t1, true__466
lw $t0, -0($fp)
lw $t1, -16($fp)
# local_i2c_A2I_internal_2 <- i = 1
li $t9, 1
seq $t1, $t0, $t9
# If local_i2c_A2I_internal_2 goto true__470
sw $t0, -0($fp)
sw $t1, -16($fp)
bnez $t1, true__470
lw $t0, -0($fp)
lw $t1, -24($fp)
# local_i2c_A2I_internal_4 <- i = 2
li $t9, 2
seq $t1, $t0, $t9
# If local_i2c_A2I_internal_4 goto true__474
sw $t0, -0($fp)
sw $t1, -24($fp)
bnez $t1, true__474
lw $t0, -0($fp)
lw $t1, -32($fp)
# local_i2c_A2I_internal_6 <- i = 3
li $t9, 3
seq $t1, $t0, $t9
# If local_i2c_A2I_internal_6 goto true__478
sw $t0, -0($fp)
sw $t1, -32($fp)
bnez $t1, true__478
lw $t0, -0($fp)
lw $t1, -40($fp)
# local_i2c_A2I_internal_8 <- i = 4
li $t9, 4
seq $t1, $t0, $t9
# If local_i2c_A2I_internal_8 goto true__482
sw $t0, -0($fp)
sw $t1, -40($fp)
bnez $t1, true__482
lw $t0, -0($fp)
lw $t1, -48($fp)
# local_i2c_A2I_internal_10 <- i = 5
li $t9, 5
seq $t1, $t0, $t9
# If local_i2c_A2I_internal_10 goto true__486
sw $t0, -0($fp)
sw $t1, -48($fp)
bnez $t1, true__486
lw $t0, -0($fp)
lw $t1, -56($fp)
# local_i2c_A2I_internal_12 <- i = 6
li $t9, 6
seq $t1, $t0, $t9
# If local_i2c_A2I_internal_12 goto true__490
sw $t0, -0($fp)
sw $t1, -56($fp)
bnez $t1, true__490
lw $t0, -0($fp)
lw $t1, -64($fp)
# local_i2c_A2I_internal_14 <- i = 7
li $t9, 7
seq $t1, $t0, $t9
# If local_i2c_A2I_internal_14 goto true__494
sw $t0, -0($fp)
sw $t1, -64($fp)
bnez $t1, true__494
lw $t0, -0($fp)
lw $t1, -72($fp)
# local_i2c_A2I_internal_16 <- i = 8
li $t9, 8
seq $t1, $t0, $t9
# If local_i2c_A2I_internal_16 goto true__498
sw $t0, -0($fp)
sw $t1, -72($fp)
bnez $t1, true__498
lw $t0, -0($fp)
lw $t1, -80($fp)
# local_i2c_A2I_internal_18 <- i = 9
li $t9, 9
seq $t1, $t0, $t9
# If local_i2c_A2I_internal_18 goto true__502
sw $t0, -0($fp)
sw $t1, -80($fp)
bnez $t1, true__502
lw $t0, -4($fp)
lw $t1, -88($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_abort_Object
lw $t8, 4($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
sw $t1, -88($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -88($fp)
# saves the return value
move $t0, $v0
lw $t1, -92($fp)
# Saves in local_i2c_A2I_internal_21 data_11
la $t1, data_11
lw $t2, -96($fp)
# Moving local_i2c_A2I_internal_21 to local_i2c_A2I_internal_22
move $t2, $t1
sw $t2, -96($fp)
lw $t3, -84($fp)
# Moving local_i2c_A2I_internal_22 to local_i2c_A2I_internal_19
move $t3, $t2
sw $t3, -84($fp)
sw $t0, -88($fp)
sw $t1, -92($fp)
sw $t2, -96($fp)
sw $t3, -84($fp)
j end__502
true__502:
lw $t0, -100($fp)
# Saves in local_i2c_A2I_internal_23 data_12
la $t0, data_12
lw $t1, -84($fp)
# Moving local_i2c_A2I_internal_23 to local_i2c_A2I_internal_19
move $t1, $t0
sw $t1, -84($fp)
sw $t0, -100($fp)
sw $t1, -84($fp)
end__502:
lw $t0, -84($fp)
lw $t1, -76($fp)
# Moving local_i2c_A2I_internal_19 to local_i2c_A2I_internal_17
move $t1, $t0
sw $t1, -76($fp)
sw $t0, -84($fp)
sw $t1, -76($fp)
j end__498
true__498:
lw $t0, -104($fp)
# Saves in local_i2c_A2I_internal_24 data_13
la $t0, data_13
lw $t1, -76($fp)
# Moving local_i2c_A2I_internal_24 to local_i2c_A2I_internal_17
move $t1, $t0
sw $t1, -76($fp)
sw $t0, -104($fp)
sw $t1, -76($fp)
end__498:
lw $t0, -76($fp)
lw $t1, -68($fp)
# Moving local_i2c_A2I_internal_17 to local_i2c_A2I_internal_15
move $t1, $t0
sw $t1, -68($fp)
sw $t0, -76($fp)
sw $t1, -68($fp)
j end__494
true__494:
lw $t0, -108($fp)
# Saves in local_i2c_A2I_internal_25 data_14
la $t0, data_14
lw $t1, -68($fp)
# Moving local_i2c_A2I_internal_25 to local_i2c_A2I_internal_15
move $t1, $t0
sw $t1, -68($fp)
sw $t0, -108($fp)
sw $t1, -68($fp)
end__494:
lw $t0, -68($fp)
lw $t1, -60($fp)
# Moving local_i2c_A2I_internal_15 to local_i2c_A2I_internal_13
move $t1, $t0
sw $t1, -60($fp)
sw $t0, -68($fp)
sw $t1, -60($fp)
j end__490
true__490:
lw $t0, -112($fp)
# Saves in local_i2c_A2I_internal_26 data_15
la $t0, data_15
lw $t1, -60($fp)
# Moving local_i2c_A2I_internal_26 to local_i2c_A2I_internal_13
move $t1, $t0
sw $t1, -60($fp)
sw $t0, -112($fp)
sw $t1, -60($fp)
end__490:
lw $t0, -60($fp)
lw $t1, -52($fp)
# Moving local_i2c_A2I_internal_13 to local_i2c_A2I_internal_11
move $t1, $t0
sw $t1, -52($fp)
sw $t0, -60($fp)
sw $t1, -52($fp)
j end__486
true__486:
lw $t0, -116($fp)
# Saves in local_i2c_A2I_internal_27 data_16
la $t0, data_16
lw $t1, -52($fp)
# Moving local_i2c_A2I_internal_27 to local_i2c_A2I_internal_11
move $t1, $t0
sw $t1, -52($fp)
sw $t0, -116($fp)
sw $t1, -52($fp)
end__486:
lw $t0, -52($fp)
lw $t1, -44($fp)
# Moving local_i2c_A2I_internal_11 to local_i2c_A2I_internal_9
move $t1, $t0
sw $t1, -44($fp)
sw $t0, -52($fp)
sw $t1, -44($fp)
j end__482
true__482:
lw $t0, -120($fp)
# Saves in local_i2c_A2I_internal_28 data_17
la $t0, data_17
lw $t1, -44($fp)
# Moving local_i2c_A2I_internal_28 to local_i2c_A2I_internal_9
move $t1, $t0
sw $t1, -44($fp)
sw $t0, -120($fp)
sw $t1, -44($fp)
end__482:
lw $t0, -44($fp)
lw $t1, -36($fp)
# Moving local_i2c_A2I_internal_9 to local_i2c_A2I_internal_7
move $t1, $t0
sw $t1, -36($fp)
sw $t0, -44($fp)
sw $t1, -36($fp)
j end__478
true__478:
lw $t0, -124($fp)
# Saves in local_i2c_A2I_internal_29 data_18
la $t0, data_18
lw $t1, -36($fp)
# Moving local_i2c_A2I_internal_29 to local_i2c_A2I_internal_7
move $t1, $t0
sw $t1, -36($fp)
sw $t0, -124($fp)
sw $t1, -36($fp)
end__478:
lw $t0, -36($fp)
lw $t1, -28($fp)
# Moving local_i2c_A2I_internal_7 to local_i2c_A2I_internal_5
move $t1, $t0
sw $t1, -28($fp)
sw $t0, -36($fp)
sw $t1, -28($fp)
j end__474
true__474:
lw $t0, -128($fp)
# Saves in local_i2c_A2I_internal_30 data_19
la $t0, data_19
lw $t1, -28($fp)
# Moving local_i2c_A2I_internal_30 to local_i2c_A2I_internal_5
move $t1, $t0
sw $t1, -28($fp)
sw $t0, -128($fp)
sw $t1, -28($fp)
end__474:
lw $t0, -28($fp)
lw $t1, -20($fp)
# Moving local_i2c_A2I_internal_5 to local_i2c_A2I_internal_3
move $t1, $t0
sw $t1, -20($fp)
sw $t0, -28($fp)
sw $t1, -20($fp)
j end__470
true__470:
lw $t0, -132($fp)
# Saves in local_i2c_A2I_internal_31 data_20
la $t0, data_20
lw $t1, -20($fp)
# Moving local_i2c_A2I_internal_31 to local_i2c_A2I_internal_3
move $t1, $t0
sw $t1, -20($fp)
sw $t0, -132($fp)
sw $t1, -20($fp)
end__470:
lw $t0, -20($fp)
lw $t1, -12($fp)
# Moving local_i2c_A2I_internal_3 to local_i2c_A2I_internal_1
move $t1, $t0
sw $t1, -12($fp)
sw $t0, -20($fp)
sw $t1, -12($fp)
j end__466
true__466:
lw $t0, -136($fp)
# Saves in local_i2c_A2I_internal_32 data_21
la $t0, data_21
lw $t1, -12($fp)
# Moving local_i2c_A2I_internal_32 to local_i2c_A2I_internal_1
move $t1, $t0
sw $t1, -12($fp)
sw $t0, -136($fp)
sw $t1, -12($fp)
end__466:
lw $t0, -12($fp)
move $v0, $t0
# Empty all used registers and saves them to memory
sw $t0, -12($fp)
# Removing all locals from stack
addiu $sp, $sp, 140
jr $ra


function_a2i_A2I:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Pops the register with the param value s
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_a2i_A2I_internal_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_A2I_internal_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_A2I_internal_2 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_A2I_internal_3 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_A2I_internal_4 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_A2I_internal_5 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_A2I_internal_6 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_A2I_internal_7 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_A2I_internal_8 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_A2I_internal_9 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_A2I_internal_10 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_A2I_internal_11 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_A2I_internal_12 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_A2I_internal_13 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_A2I_internal_14 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_A2I_internal_15 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_A2I_internal_16 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_A2I_internal_17 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_A2I_internal_18 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_A2I_internal_19 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_A2I_internal_20 to the stack
addiu $sp, $sp, -4
lw $t0, -12($fp)
# Static Dispatch of the method length
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
lw $t1, -0($fp)
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -12($fp)
sw $t1, -0($fp)
# This function will consume the arguments
jal function_length_String
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -12($fp)
# saves the return value
move $t0, $v0
lw $t1, -8($fp)
# local_a2i_A2I_internal_0 <- local_a2i_A2I_internal_1 = 0
li $t9, 0
seq $t1, $t0, $t9
# If local_a2i_A2I_internal_0 goto true__600
sw $t0, -12($fp)
sw $t1, -8($fp)
bnez $t1, true__600
lw $t0, -24($fp)
# Static Dispatch of the method substr
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
li $t9, 1
sw $t9, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
li $t9, 0
sw $t9, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
lw $t1, -0($fp)
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -24($fp)
sw $t1, -0($fp)
# This function will consume the arguments
jal function_substr_String
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -24($fp)
# saves the return value
move $t0, $v0
lw $t1, -28($fp)
# Saves in local_a2i_A2I_internal_5 data_22
la $t1, data_22
lw $t2, -20($fp)
# local_a2i_A2I_internal_3 <- local_a2i_A2I_internal_4 = local_a2i_A2I_internal_5
move $t8, $t0
move $t9, $t1
loop_16:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_16
beqz $a1, mismatch_16
seq $v0, $a0, $a1
beqz $v0, mismatch_16
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_16
mismatch_16:
li $v0, 0
j end_16
check_16:
bnez $a1, mismatch_16
li $v0, 1
end_16:
move $t2, $v0
# If local_a2i_A2I_internal_3 goto true__612
sw $t0, -24($fp)
sw $t1, -28($fp)
sw $t2, -20($fp)
bnez $t2, true__612
lw $t0, -40($fp)
# Static Dispatch of the method substr
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
li $t9, 1
sw $t9, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
li $t9, 0
sw $t9, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
lw $t1, -0($fp)
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -40($fp)
sw $t1, -0($fp)
# This function will consume the arguments
jal function_substr_String
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -40($fp)
# saves the return value
move $t0, $v0
lw $t1, -44($fp)
# Saves in local_a2i_A2I_internal_9 data_23
la $t1, data_23
lw $t2, -36($fp)
# local_a2i_A2I_internal_7 <- local_a2i_A2I_internal_8 = local_a2i_A2I_internal_9
move $t8, $t0
move $t9, $t1
loop_17:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_17
beqz $a1, mismatch_17
seq $v0, $a0, $a1
beqz $v0, mismatch_17
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_17
mismatch_17:
li $v0, 0
j end_17
check_17:
bnez $a1, mismatch_17
li $v0, 1
end_17:
move $t2, $v0
# If local_a2i_A2I_internal_7 goto true__624
sw $t0, -40($fp)
sw $t1, -44($fp)
sw $t2, -36($fp)
bnez $t2, true__624
lw $t0, -4($fp)
lw $t1, -52($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_a2i_aux_A2I
lw $t8, 28($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
lw $t2, -0($fp)
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
sw $t1, -52($fp)
sw $t2, -0($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -52($fp)
# saves the return value
move $t0, $v0
lw $t1, -48($fp)
# Moving local_a2i_A2I_internal_11 to local_a2i_A2I_internal_10
move $t1, $t0
sw $t1, -48($fp)
sw $t0, -52($fp)
sw $t1, -48($fp)
j end__624
true__624:
lw $t0, -60($fp)
# Static Dispatch of the method length
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
lw $t1, -0($fp)
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -60($fp)
sw $t1, -0($fp)
# This function will consume the arguments
jal function_length_String
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -60($fp)
# saves the return value
move $t0, $v0
lw $t1, -56($fp)
# local_a2i_A2I_internal_12 <- local_a2i_A2I_internal_13 - 1
addi $t1, $t0, -1
lw $t2, -64($fp)
# Static Dispatch of the method substr
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
li $t9, 1
sw $t9, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
lw $t3, -0($fp)
sw $t3, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -60($fp)
sw $t1, -56($fp)
sw $t2, -64($fp)
sw $t3, -0($fp)
# This function will consume the arguments
jal function_substr_String
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -64($fp)
# saves the return value
move $t0, $v0
lw $t1, -4($fp)
lw $t2, -68($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_a2i_aux_A2I
lw $t8, 28($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -64($fp)
sw $t1, -4($fp)
sw $t2, -68($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -68($fp)
# saves the return value
move $t0, $v0
lw $t1, -48($fp)
# Moving local_a2i_A2I_internal_15 to local_a2i_A2I_internal_10
move $t1, $t0
sw $t1, -48($fp)
sw $t0, -68($fp)
sw $t1, -48($fp)
end__624:
lw $t0, -48($fp)
lw $t1, -32($fp)
# Moving local_a2i_A2I_internal_10 to local_a2i_A2I_internal_6
move $t1, $t0
sw $t1, -32($fp)
sw $t0, -48($fp)
sw $t1, -32($fp)
j end__612
true__612:
lw $t0, -80($fp)
# Static Dispatch of the method length
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
lw $t1, -0($fp)
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -80($fp)
sw $t1, -0($fp)
# This function will consume the arguments
jal function_length_String
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -80($fp)
# saves the return value
move $t0, $v0
lw $t1, -76($fp)
# local_a2i_A2I_internal_17 <- local_a2i_A2I_internal_18 - 1
addi $t1, $t0, -1
lw $t2, -84($fp)
# Static Dispatch of the method substr
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
li $t9, 1
sw $t9, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
lw $t3, -0($fp)
sw $t3, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -80($fp)
sw $t1, -76($fp)
sw $t2, -84($fp)
sw $t3, -0($fp)
# This function will consume the arguments
jal function_substr_String
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -84($fp)
# saves the return value
move $t0, $v0
lw $t1, -4($fp)
lw $t2, -88($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_a2i_aux_A2I
lw $t8, 28($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -84($fp)
sw $t1, -4($fp)
sw $t2, -88($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -88($fp)
# saves the return value
move $t0, $v0
lw $t1, -72($fp)
# local_a2i_A2I_internal_16 <- ~local_a2i_A2I_internal_20
not $t1, $t0
addi $t1, $t1, 1
lw $t2, -32($fp)
# Moving local_a2i_A2I_internal_16 to local_a2i_A2I_internal_6
move $t2, $t1
sw $t2, -32($fp)
sw $t0, -88($fp)
sw $t1, -72($fp)
sw $t2, -32($fp)
end__612:
lw $t0, -32($fp)
lw $t1, -16($fp)
# Moving local_a2i_A2I_internal_6 to local_a2i_A2I_internal_2
move $t1, $t0
sw $t1, -16($fp)
sw $t0, -32($fp)
sw $t1, -16($fp)
j end__600
true__600:
lw $t0, -16($fp)
# Moving 0 to local_a2i_A2I_internal_2
li $t0, 0
sw $t0, -16($fp)
sw $t0, -16($fp)
end__600:
lw $t0, -16($fp)
move $v0, $t0
# Empty all used registers and saves them to memory
sw $t0, -16($fp)
# Removing all locals from stack
addiu $sp, $sp, 92
jr $ra


function_a2i_aux_A2I:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Pops the register with the param value s
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_a2i_aux_A2I_int_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_aux_A2I_j_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_aux_A2I_internal_2 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_aux_A2I_i_3 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_aux_A2I_internal_4 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_aux_A2I_internal_5 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_aux_A2I_internal_6 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_aux_A2I_internal_7 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_aux_A2I_internal_8 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_aux_A2I_internal_9 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_aux_A2I_internal_10 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_aux_A2I_internal_11 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_a2i_aux_A2I_internal_12 to the stack
addiu $sp, $sp, -4
lw $t0, -8($fp)
# Moving 0 to local_a2i_aux_A2I_int_0
li $t0, 0
sw $t0, -8($fp)
lw $t1, -16($fp)
# Static Dispatch of the method length
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
lw $t2, -0($fp)
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -8($fp)
sw $t1, -16($fp)
sw $t2, -0($fp)
# This function will consume the arguments
jal function_length_String
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -16($fp)
# saves the return value
move $t0, $v0
lw $t1, -12($fp)
# Moving local_a2i_aux_A2I_internal_2 to local_a2i_aux_A2I_j_1
move $t1, $t0
sw $t1, -12($fp)
lw $t2, -20($fp)
# Moving 0 to local_a2i_aux_A2I_i_3
li $t2, 0
sw $t2, -20($fp)
lw $t3, -24($fp)
# Initialize void node
li $a0, 4
li $v0, 9
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_Void
sw $t9, 0($v0)
move $t3, $v0
sw $t0, -16($fp)
sw $t1, -12($fp)
sw $t2, -20($fp)
sw $t3, -24($fp)
start__685:
lw $t0, -20($fp)
lw $t1, -12($fp)
lw $t2, -28($fp)
# local_a2i_aux_A2I_internal_5 <- local_a2i_aux_A2I_i_3 < local_a2i_aux_A2I_j_1
slt $t2, $t0, $t1
# If not local_a2i_aux_A2I_internal_5 goto end__685
sw $t0, -20($fp)
sw $t1, -12($fp)
sw $t2, -28($fp)
beqz $t2, end__685
lw $t0, -8($fp)
lw $t1, -36($fp)
# local_a2i_aux_A2I_internal_7 <- local_a2i_aux_A2I_int_0 * 10
li $t9, 10
mult $t0, $t9
mflo $t1
lw $t2, -40($fp)
# Static Dispatch of the method substr
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
li $t9, 1
sw $t9, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
lw $t3, -20($fp)
sw $t3, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
lw $t4, -0($fp)
sw $t4, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -8($fp)
sw $t1, -36($fp)
sw $t2, -40($fp)
sw $t3, -20($fp)
sw $t4, -0($fp)
# This function will consume the arguments
jal function_substr_String
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -40($fp)
# saves the return value
move $t0, $v0
lw $t1, -4($fp)
lw $t2, -44($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_c2i_A2I
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -40($fp)
sw $t1, -4($fp)
sw $t2, -44($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -44($fp)
# saves the return value
move $t0, $v0
lw $t1, -36($fp)
lw $t2, -32($fp)
# local_a2i_aux_A2I_internal_6 <- local_a2i_aux_A2I_internal_7 + local_a2i_aux_A2I_internal_9
add $t2, $t1, $t0
lw $t3, -8($fp)
# Moving local_a2i_aux_A2I_internal_6 to local_a2i_aux_A2I_int_0
move $t3, $t2
sw $t3, -8($fp)
lw $t4, -20($fp)
lw $t5, -48($fp)
# local_a2i_aux_A2I_internal_10 <- local_a2i_aux_A2I_i_3 + 1
addi $t5, $t4, 1
# Moving local_a2i_aux_A2I_internal_10 to local_a2i_aux_A2I_i_3
move $t4, $t5
sw $t4, -20($fp)
lw $t6, -52($fp)
# Moving local_a2i_aux_A2I_internal_10 to local_a2i_aux_A2I_internal_11
move $t6, $t5
sw $t6, -52($fp)
lw $t7, -24($fp)
# Moving local_a2i_aux_A2I_internal_11 to local_a2i_aux_A2I_internal_4
move $t7, $t6
sw $t7, -24($fp)
sw $t0, -44($fp)
sw $t1, -36($fp)
sw $t2, -32($fp)
sw $t3, -8($fp)
sw $t4, -20($fp)
sw $t5, -48($fp)
sw $t6, -52($fp)
sw $t7, -24($fp)
j start__685
end__685:
lw $t0, -8($fp)
lw $t1, -56($fp)
# Moving local_a2i_aux_A2I_int_0 to local_a2i_aux_A2I_internal_12
move $t1, $t0
sw $t1, -56($fp)
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -8($fp)
sw $t1, -56($fp)
# Removing all locals from stack
addiu $sp, $sp, 60
jr $ra


function_i2a_A2I:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Pops the register with the param value i
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_i2a_A2I_internal_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2a_A2I_internal_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2a_A2I_internal_2 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2a_A2I_internal_3 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2a_A2I_internal_4 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2a_A2I_internal_5 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2a_A2I_internal_6 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2a_A2I_internal_7 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2a_A2I_internal_8 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2a_A2I_internal_9 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2a_A2I_internal_10 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
lw $t1, -8($fp)
# local_i2a_A2I_internal_0 <- i = 0
li $t9, 0
seq $t1, $t0, $t9
# If local_i2a_A2I_internal_0 goto true__720
sw $t0, -0($fp)
sw $t1, -8($fp)
bnez $t1, true__720
lw $t0, -0($fp)
lw $t1, -16($fp)
# local_i2a_A2I_internal_2 <- 0 < i
li $t9, 0
slt $t1, $t9, $t0
# If local_i2a_A2I_internal_2 goto true__724
sw $t0, -0($fp)
sw $t1, -16($fp)
bnez $t1, true__724
lw $t0, -24($fp)
# Saves in local_i2a_A2I_internal_4 data_24
la $t0, data_24
lw $t1, -32($fp)
li $t9, 1
# local_i2a_A2I_internal_6 <- ~1
not $t1, $t9
addi $t1, $t1, 1
lw $t2, -0($fp)
lw $t3, -28($fp)
# local_i2a_A2I_internal_5 <- i * local_i2a_A2I_internal_6
mult $t2, $t1
mflo $t3
lw $t4, -4($fp)
lw $t5, -36($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t4)
lw $a0, 8($t9)
# Saves in t8 the direction of function_i2a_aux_A2I
lw $t8, 36($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t3, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t4, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -24($fp)
sw $t1, -32($fp)
sw $t2, -0($fp)
sw $t3, -28($fp)
sw $t4, -4($fp)
sw $t5, -36($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -36($fp)
# saves the return value
move $t0, $v0
lw $t1, -40($fp)
# Static Dispatch of the method concat
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
lw $t2, -24($fp)
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -36($fp)
sw $t1, -40($fp)
sw $t2, -24($fp)
# This function will consume the arguments
jal function_concat_String
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -40($fp)
# saves the return value
move $t0, $v0
lw $t1, -20($fp)
# Moving local_i2a_A2I_internal_8 to local_i2a_A2I_internal_3
move $t1, $t0
sw $t1, -20($fp)
sw $t0, -40($fp)
sw $t1, -20($fp)
j end__724
true__724:
lw $t0, -4($fp)
lw $t1, -44($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_i2a_aux_A2I
lw $t8, 36($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
lw $t2, -0($fp)
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
sw $t1, -44($fp)
sw $t2, -0($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -44($fp)
# saves the return value
move $t0, $v0
lw $t1, -20($fp)
# Moving local_i2a_A2I_internal_9 to local_i2a_A2I_internal_3
move $t1, $t0
sw $t1, -20($fp)
sw $t0, -44($fp)
sw $t1, -20($fp)
end__724:
lw $t0, -20($fp)
lw $t1, -12($fp)
# Moving local_i2a_A2I_internal_3 to local_i2a_A2I_internal_1
move $t1, $t0
sw $t1, -12($fp)
sw $t0, -20($fp)
sw $t1, -12($fp)
j end__720
true__720:
lw $t0, -48($fp)
# Saves in local_i2a_A2I_internal_10 data_25
la $t0, data_25
lw $t1, -12($fp)
# Moving local_i2a_A2I_internal_10 to local_i2a_A2I_internal_1
move $t1, $t0
sw $t1, -12($fp)
sw $t0, -48($fp)
sw $t1, -12($fp)
end__720:
lw $t0, -12($fp)
move $v0, $t0
# Empty all used registers and saves them to memory
sw $t0, -12($fp)
# Removing all locals from stack
addiu $sp, $sp, 52
jr $ra


function_i2a_aux_A2I:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Pops the register with the param value i
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_i2a_aux_A2I_internal_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2a_aux_A2I_internal_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2a_aux_A2I_next_2 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2a_aux_A2I_internal_3 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2a_aux_A2I_internal_4 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2a_aux_A2I_internal_5 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2a_aux_A2I_internal_6 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2a_aux_A2I_internal_7 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2a_aux_A2I_internal_8 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_i2a_aux_A2I_internal_9 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
lw $t1, -8($fp)
# local_i2a_aux_A2I_internal_0 <- i = 0
li $t9, 0
seq $t1, $t0, $t9
# If local_i2a_aux_A2I_internal_0 goto true__762
sw $t0, -0($fp)
sw $t1, -8($fp)
bnez $t1, true__762
lw $t0, -0($fp)
lw $t1, -20($fp)
# local_i2a_aux_A2I_internal_3 <- i / 10
li $t9, 10
la $a0, zero_error
beqz $t9, .raise
div $t0, $t9
mflo $t1
lw $t2, -16($fp)
# Moving local_i2a_aux_A2I_internal_3 to local_i2a_aux_A2I_next_2
move $t2, $t1
sw $t2, -16($fp)
lw $t3, -4($fp)
lw $t4, -24($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t3)
lw $a0, 8($t9)
# Saves in t8 the direction of function_i2a_aux_A2I
lw $t8, 36($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t3, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -20($fp)
sw $t2, -16($fp)
sw $t3, -4($fp)
sw $t4, -24($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -24($fp)
# saves the return value
move $t0, $v0
lw $t1, -16($fp)
lw $t2, -32($fp)
# local_i2a_aux_A2I_internal_6 <- local_i2a_aux_A2I_next_2 * 10
li $t9, 10
mult $t1, $t9
mflo $t2
lw $t3, -0($fp)
lw $t4, -28($fp)
# local_i2a_aux_A2I_internal_5 <- i - local_i2a_aux_A2I_internal_6
sub $t4, $t3, $t2
lw $t5, -4($fp)
lw $t6, -36($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t5)
lw $a0, 8($t9)
# Saves in t8 the direction of function_i2c_A2I
lw $t8, 20($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t4, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t5, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -24($fp)
sw $t1, -16($fp)
sw $t2, -32($fp)
sw $t3, -0($fp)
sw $t4, -28($fp)
sw $t5, -4($fp)
sw $t6, -36($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -36($fp)
# saves the return value
move $t0, $v0
lw $t1, -40($fp)
# Static Dispatch of the method concat
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
lw $t2, -24($fp)
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -36($fp)
sw $t1, -40($fp)
sw $t2, -24($fp)
# This function will consume the arguments
jal function_concat_String
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -40($fp)
# saves the return value
move $t0, $v0
lw $t1, -12($fp)
# Moving local_i2a_aux_A2I_internal_8 to local_i2a_aux_A2I_internal_1
move $t1, $t0
sw $t1, -12($fp)
sw $t0, -40($fp)
sw $t1, -12($fp)
j end__762
true__762:
lw $t0, -44($fp)
# Saves in local_i2a_aux_A2I_internal_9 data_26
la $t0, data_26
lw $t1, -12($fp)
# Moving local_i2a_aux_A2I_internal_9 to local_i2a_aux_A2I_internal_1
move $t1, $t0
sw $t1, -12($fp)
sw $t0, -44($fp)
sw $t1, -12($fp)
end__762:
lw $t0, -12($fp)
move $v0, $t0
# Empty all used registers and saves them to memory
sw $t0, -12($fp)
# Removing all locals from stack
addiu $sp, $sp, 48
jr $ra


function_Main_Main:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_Main_Main_internal_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Main_Main_avar_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Main_Main_a_var_2 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Main_Main_internal_3 to the stack
addiu $sp, $sp, -4
lw $t0, -4($fp)
# Saves in local_Main_Main_internal_0 data_27
la $t0, data_27
lw $t1, -0($fp)
# self . char <- SET local_Main_Main_internal_0
sw $t0, 12($t1)
lw $t2, -8($fp)
# Initialize void node
li $a0, 4
li $v0, 9
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_Void
sw $t9, 0($v0)
move $t2, $v0
# self . avar <- SET local_Main_Main_avar_1
sw $t2, 16($t1)
lw $t3, -12($fp)
# Initialize void node
li $a0, 4
li $v0, 9
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_Void
sw $t9, 0($v0)
move $t3, $v0
# self . a_var <- SET local_Main_Main_a_var_2
sw $t3, 20($t1)
# self . flag <- SET 1
li $t9, 1
sw $t9, 24($t1)
lw $t4, -16($fp)
# Moving self to local_Main_Main_internal_3
move $t4, $t1
sw $t4, -16($fp)
move $v0, $t4
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
sw $t1, -0($fp)
sw $t2, -8($fp)
sw $t3, -12($fp)
sw $t4, -16($fp)
# Removing all locals from stack
addiu $sp, $sp, 20
jr $ra


function_menu_Main:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_menu_Main_internal_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_internal_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_avar_2 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_internal_3 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_internal_4 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_internal_5 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_internal_6 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_internal_7 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_avar_8 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_internal_9 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_internal_10 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_internal_11 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_internal_12 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_internal_13 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_avar_14 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_internal_15 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_internal_16 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_internal_17 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_internal_18 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_internal_19 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_avar_20 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_internal_21 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_internal_22 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_internal_23 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_internal_24 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_internal_25 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_avar_26 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_internal_27 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_internal_28 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_internal_29 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_internal_30 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_internal_31 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_avar_32 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_internal_33 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_internal_34 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_internal_35 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_internal_36 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_internal_37 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_avar_38 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_internal_39 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_internal_40 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_internal_41 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_internal_42 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_internal_43 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_avar_44 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_internal_45 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_internal_46 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_internal_47 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_internal_48 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_internal_49 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_internal_50 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_internal_51 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_internal_52 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_menu_Main_internal_53 to the stack
addiu $sp, $sp, -4
lw $t0, -4($fp)
# Saves in local_menu_Main_internal_0 data_28
la $t0, data_28
lw $t1, -0($fp)
lw $t2, -8($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
sw $t1, -0($fp)
sw $t2, -8($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -8($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
lw $t2, -12($fp)
# local_menu_Main_avar_2 <- GET self . avar
lw $t2, 16($t1)
lw $t3, -16($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_print_Main
lw $t8, 52($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -8($fp)
sw $t1, -0($fp)
sw $t2, -12($fp)
sw $t3, -16($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -16($fp)
# saves the return value
move $t0, $v0
lw $t1, -20($fp)
# Saves in local_menu_Main_internal_4 data_29
la $t1, data_29
lw $t2, -0($fp)
lw $t3, -24($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -16($fp)
sw $t1, -20($fp)
sw $t2, -0($fp)
sw $t3, -24($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -24($fp)
# saves the return value
move $t0, $v0
lw $t1, -28($fp)
# Saves in local_menu_Main_internal_6 data_30
la $t1, data_30
lw $t2, -0($fp)
lw $t3, -32($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -24($fp)
sw $t1, -28($fp)
sw $t2, -0($fp)
sw $t3, -32($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -32($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
lw $t2, -36($fp)
# local_menu_Main_avar_8 <- GET self . avar
lw $t2, 16($t1)
lw $t3, -40($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_print_Main
lw $t8, 52($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -32($fp)
sw $t1, -0($fp)
sw $t2, -36($fp)
sw $t3, -40($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -40($fp)
# saves the return value
move $t0, $v0
lw $t1, -44($fp)
# Saves in local_menu_Main_internal_10 data_31
la $t1, data_31
lw $t2, -0($fp)
lw $t3, -48($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -40($fp)
sw $t1, -44($fp)
sw $t2, -0($fp)
sw $t3, -48($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -48($fp)
# saves the return value
move $t0, $v0
lw $t1, -52($fp)
# Saves in local_menu_Main_internal_12 data_32
la $t1, data_32
lw $t2, -0($fp)
lw $t3, -56($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -48($fp)
sw $t1, -52($fp)
sw $t2, -0($fp)
sw $t3, -56($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -56($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
lw $t2, -60($fp)
# local_menu_Main_avar_14 <- GET self . avar
lw $t2, 16($t1)
lw $t3, -64($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_print_Main
lw $t8, 52($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -56($fp)
sw $t1, -0($fp)
sw $t2, -60($fp)
sw $t3, -64($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -64($fp)
# saves the return value
move $t0, $v0
lw $t1, -68($fp)
# Saves in local_menu_Main_internal_16 data_33
la $t1, data_33
lw $t2, -0($fp)
lw $t3, -72($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -64($fp)
sw $t1, -68($fp)
sw $t2, -0($fp)
sw $t3, -72($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -72($fp)
# saves the return value
move $t0, $v0
lw $t1, -76($fp)
# Saves in local_menu_Main_internal_18 data_34
la $t1, data_34
lw $t2, -0($fp)
lw $t3, -80($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -72($fp)
sw $t1, -76($fp)
sw $t2, -0($fp)
sw $t3, -80($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -80($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
lw $t2, -84($fp)
# local_menu_Main_avar_20 <- GET self . avar
lw $t2, 16($t1)
lw $t3, -88($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_print_Main
lw $t8, 52($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -80($fp)
sw $t1, -0($fp)
sw $t2, -84($fp)
sw $t3, -88($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -88($fp)
# saves the return value
move $t0, $v0
lw $t1, -92($fp)
# Saves in local_menu_Main_internal_22 data_35
la $t1, data_35
lw $t2, -0($fp)
lw $t3, -96($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -88($fp)
sw $t1, -92($fp)
sw $t2, -0($fp)
sw $t3, -96($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -96($fp)
# saves the return value
move $t0, $v0
lw $t1, -100($fp)
# Saves in local_menu_Main_internal_24 data_36
la $t1, data_36
lw $t2, -0($fp)
lw $t3, -104($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -96($fp)
sw $t1, -100($fp)
sw $t2, -0($fp)
sw $t3, -104($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -104($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
lw $t2, -108($fp)
# local_menu_Main_avar_26 <- GET self . avar
lw $t2, 16($t1)
lw $t3, -112($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_print_Main
lw $t8, 52($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -104($fp)
sw $t1, -0($fp)
sw $t2, -108($fp)
sw $t3, -112($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -112($fp)
# saves the return value
move $t0, $v0
lw $t1, -116($fp)
# Saves in local_menu_Main_internal_28 data_37
la $t1, data_37
lw $t2, -0($fp)
lw $t3, -120($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -112($fp)
sw $t1, -116($fp)
sw $t2, -0($fp)
sw $t3, -120($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -120($fp)
# saves the return value
move $t0, $v0
lw $t1, -124($fp)
# Saves in local_menu_Main_internal_30 data_38
la $t1, data_38
lw $t2, -0($fp)
lw $t3, -128($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -120($fp)
sw $t1, -124($fp)
sw $t2, -0($fp)
sw $t3, -128($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -128($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
lw $t2, -132($fp)
# local_menu_Main_avar_32 <- GET self . avar
lw $t2, 16($t1)
lw $t3, -136($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_print_Main
lw $t8, 52($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -128($fp)
sw $t1, -0($fp)
sw $t2, -132($fp)
sw $t3, -136($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -136($fp)
# saves the return value
move $t0, $v0
lw $t1, -140($fp)
# Saves in local_menu_Main_internal_34 data_39
la $t1, data_39
lw $t2, -0($fp)
lw $t3, -144($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -136($fp)
sw $t1, -140($fp)
sw $t2, -0($fp)
sw $t3, -144($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -144($fp)
# saves the return value
move $t0, $v0
lw $t1, -148($fp)
# Saves in local_menu_Main_internal_36 data_40
la $t1, data_40
lw $t2, -0($fp)
lw $t3, -152($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -144($fp)
sw $t1, -148($fp)
sw $t2, -0($fp)
sw $t3, -152($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -152($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
lw $t2, -156($fp)
# local_menu_Main_avar_38 <- GET self . avar
lw $t2, 16($t1)
lw $t3, -160($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_print_Main
lw $t8, 52($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -152($fp)
sw $t1, -0($fp)
sw $t2, -156($fp)
sw $t3, -160($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -160($fp)
# saves the return value
move $t0, $v0
lw $t1, -164($fp)
# Saves in local_menu_Main_internal_40 data_41
la $t1, data_41
lw $t2, -0($fp)
lw $t3, -168($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -160($fp)
sw $t1, -164($fp)
sw $t2, -0($fp)
sw $t3, -168($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -168($fp)
# saves the return value
move $t0, $v0
lw $t1, -172($fp)
# Saves in local_menu_Main_internal_42 data_42
la $t1, data_42
lw $t2, -0($fp)
lw $t3, -176($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -168($fp)
sw $t1, -172($fp)
sw $t2, -0($fp)
sw $t3, -176($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -176($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
lw $t2, -180($fp)
# local_menu_Main_avar_44 <- GET self . avar
lw $t2, 16($t1)
lw $t3, -184($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_print_Main
lw $t8, 52($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -176($fp)
sw $t1, -0($fp)
sw $t2, -180($fp)
sw $t3, -184($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -184($fp)
# saves the return value
move $t0, $v0
lw $t1, -188($fp)
# Saves in local_menu_Main_internal_46 data_43
la $t1, data_43
lw $t2, -0($fp)
lw $t3, -192($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -184($fp)
sw $t1, -188($fp)
sw $t2, -0($fp)
sw $t3, -192($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -192($fp)
# saves the return value
move $t0, $v0
lw $t1, -196($fp)
# Saves in local_menu_Main_internal_48 data_44
la $t1, data_44
lw $t2, -0($fp)
lw $t3, -200($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -192($fp)
sw $t1, -196($fp)
sw $t2, -0($fp)
sw $t3, -200($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -200($fp)
# saves the return value
move $t0, $v0
lw $t1, -204($fp)
# Saves in local_menu_Main_internal_50 data_45
la $t1, data_45
lw $t2, -0($fp)
lw $t3, -208($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -200($fp)
sw $t1, -204($fp)
sw $t2, -0($fp)
sw $t3, -208($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -208($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
lw $t2, -212($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_in_string_IO
lw $t8, 24($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -208($fp)
sw $t1, -0($fp)
sw $t2, -212($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -212($fp)
# saves the return value
move $t0, $v0
lw $t1, -216($fp)
# Moving local_menu_Main_internal_52 to local_menu_Main_internal_53
move $t1, $t0
sw $t1, -216($fp)
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -212($fp)
sw $t1, -216($fp)
# Removing all locals from stack
addiu $sp, $sp, 220
jr $ra


function_prompt_Main:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_prompt_Main_internal_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_prompt_Main_internal_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_prompt_Main_internal_2 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_prompt_Main_internal_3 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_prompt_Main_internal_4 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_prompt_Main_internal_5 to the stack
addiu $sp, $sp, -4
lw $t0, -4($fp)
# Saves in local_prompt_Main_internal_0 data_46
la $t0, data_46
lw $t1, -0($fp)
lw $t2, -8($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
sw $t1, -0($fp)
sw $t2, -8($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -8($fp)
# saves the return value
move $t0, $v0
lw $t1, -12($fp)
# Saves in local_prompt_Main_internal_2 data_47
la $t1, data_47
lw $t2, -0($fp)
lw $t3, -16($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -8($fp)
sw $t1, -12($fp)
sw $t2, -0($fp)
sw $t3, -16($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -16($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
lw $t2, -20($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_in_string_IO
lw $t8, 24($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -16($fp)
sw $t1, -0($fp)
sw $t2, -20($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -20($fp)
# saves the return value
move $t0, $v0
lw $t1, -24($fp)
# Moving local_prompt_Main_internal_4 to local_prompt_Main_internal_5
move $t1, $t0
sw $t1, -24($fp)
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -20($fp)
sw $t1, -24($fp)
# Removing all locals from stack
addiu $sp, $sp, 28
jr $ra


function_get_int_Main:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_get_int_Main_z_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_get_int_Main_internal_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_get_int_Main_s_2 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_get_int_Main_internal_3 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_get_int_Main_internal_4 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_get_int_Main_internal_5 to the stack
addiu $sp, $sp, -4
lw $t0, -8($fp)
# Syscall to allocate memory of the object entry in heap
li $v0, 9
li $a0, 12
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_A2I
sw $t9, 0($v0)
# Saves the size of the node
li $t9, 12
sw $t9, 4($v0)
move $t0, $v0
# Adding Type Info addr
la $t8, types
lw $v0, 40($t8)
sw $v0, 8($t0)
lw $t1, -4($fp)
# Moving local_get_int_Main_internal_1 to local_get_int_Main_z_0
move $t1, $t0
sw $t1, -4($fp)
lw $t2, -0($fp)
lw $t3, -16($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_prompt_Main
lw $t8, 36($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -8($fp)
sw $t1, -4($fp)
sw $t2, -0($fp)
sw $t3, -16($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -16($fp)
# saves the return value
move $t0, $v0
lw $t1, -12($fp)
# Moving local_get_int_Main_internal_3 to local_get_int_Main_s_2
move $t1, $t0
sw $t1, -12($fp)
lw $t2, -4($fp)
lw $t3, -20($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_a2i_A2I
lw $t8, 24($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -16($fp)
sw $t1, -12($fp)
sw $t2, -4($fp)
sw $t3, -20($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -20($fp)
# saves the return value
move $t0, $v0
lw $t1, -24($fp)
# Moving local_get_int_Main_internal_4 to local_get_int_Main_internal_5
move $t1, $t0
sw $t1, -24($fp)
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -20($fp)
sw $t1, -24($fp)
# Removing all locals from stack
addiu $sp, $sp, 28
jr $ra


function_is_even_Main:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Pops the register with the param value num
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_is_even_Main_x_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_is_even_Main_internal_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_is_even_Main_internal_2 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_is_even_Main_internal_3 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_is_even_Main_internal_4 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_is_even_Main_internal_5 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_is_even_Main_internal_6 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_is_even_Main_internal_7 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_is_even_Main_internal_8 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_is_even_Main_internal_9 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_is_even_Main_internal_10 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
lw $t1, -8($fp)
# Moving num to local_is_even_Main_x_0
move $t1, $t0
sw $t1, -8($fp)
lw $t2, -12($fp)
# local_is_even_Main_internal_1 <- local_is_even_Main_x_0 < 0
li $t9, 0
slt $t2, $t1, $t9
# If local_is_even_Main_internal_1 goto true__1005
sw $t0, -0($fp)
sw $t1, -8($fp)
sw $t2, -12($fp)
bnez $t2, true__1005
lw $t0, -8($fp)
lw $t1, -20($fp)
# local_is_even_Main_internal_3 <- 0 = local_is_even_Main_x_0
li $t9, 0
seq $t1, $t9, $t0
# If local_is_even_Main_internal_3 goto true__1009
sw $t0, -8($fp)
sw $t1, -20($fp)
bnez $t1, true__1009
lw $t0, -8($fp)
lw $t1, -28($fp)
# local_is_even_Main_internal_5 <- 1 = local_is_even_Main_x_0
li $t9, 1
seq $t1, $t9, $t0
# If local_is_even_Main_internal_5 goto true__1013
sw $t0, -8($fp)
sw $t1, -28($fp)
bnez $t1, true__1013
lw $t0, -8($fp)
lw $t1, -36($fp)
# local_is_even_Main_internal_7 <- local_is_even_Main_x_0 - 2
addi $t1, $t0, -2
lw $t2, -4($fp)
lw $t3, -40($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_is_even_Main
lw $t8, 44($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -8($fp)
sw $t1, -36($fp)
sw $t2, -4($fp)
sw $t3, -40($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -40($fp)
# saves the return value
move $t0, $v0
lw $t1, -32($fp)
# Moving local_is_even_Main_internal_8 to local_is_even_Main_internal_6
move $t1, $t0
sw $t1, -32($fp)
sw $t0, -40($fp)
sw $t1, -32($fp)
j end__1013
true__1013:
lw $t0, -32($fp)
# Moving 0 to local_is_even_Main_internal_6
li $t0, 0
sw $t0, -32($fp)
sw $t0, -32($fp)
end__1013:
lw $t0, -32($fp)
lw $t1, -24($fp)
# Moving local_is_even_Main_internal_6 to local_is_even_Main_internal_4
move $t1, $t0
sw $t1, -24($fp)
sw $t0, -32($fp)
sw $t1, -24($fp)
j end__1009
true__1009:
lw $t0, -24($fp)
# Moving 1 to local_is_even_Main_internal_4
li $t0, 1
sw $t0, -24($fp)
sw $t0, -24($fp)
end__1009:
lw $t0, -24($fp)
lw $t1, -16($fp)
# Moving local_is_even_Main_internal_4 to local_is_even_Main_internal_2
move $t1, $t0
sw $t1, -16($fp)
sw $t0, -24($fp)
sw $t1, -16($fp)
j end__1005
true__1005:
lw $t0, -8($fp)
lw $t1, -44($fp)
# local_is_even_Main_internal_9 <- ~local_is_even_Main_x_0
not $t1, $t0
addi $t1, $t1, 1
lw $t2, -4($fp)
lw $t3, -48($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_is_even_Main
lw $t8, 44($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -8($fp)
sw $t1, -44($fp)
sw $t2, -4($fp)
sw $t3, -48($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -48($fp)
# saves the return value
move $t0, $v0
lw $t1, -16($fp)
# Moving local_is_even_Main_internal_10 to local_is_even_Main_internal_2
move $t1, $t0
sw $t1, -16($fp)
sw $t0, -48($fp)
sw $t1, -16($fp)
end__1005:
lw $t0, -16($fp)
move $v0, $t0
# Empty all used registers and saves them to memory
sw $t0, -16($fp)
# Removing all locals from stack
addiu $sp, $sp, 52
jr $ra


function_class_type_Main:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Pops the register with the param value var
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_class_type_Main_internal_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_class_type_Main_internal_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_class_type_Main_internal_2 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_class_type_Main_internal_3 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_class_type_Main_e_4 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_class_type_Main_internal_5 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_class_type_Main_internal_6 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_class_type_Main_internal_7 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_class_type_Main_c_8 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_class_type_Main_internal_9 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_class_type_Main_internal_10 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_class_type_Main_internal_11 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_class_type_Main_d_12 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_class_type_Main_internal_13 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_class_type_Main_internal_14 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_class_type_Main_internal_15 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_class_type_Main_b_16 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_class_type_Main_internal_17 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_class_type_Main_internal_18 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_class_type_Main_internal_19 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_class_type_Main_a_20 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_class_type_Main_internal_21 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_class_type_Main_internal_22 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_class_type_Main_internal_23 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_class_type_Main_o_24 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_class_type_Main_internal_25 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_class_type_Main_internal_26 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
lw $t1, -12($fp)
# local_class_type_Main_internal_1 <- Type of var
lw $t1, 0($t0)
lw $t2, -16($fp)
# Saves in local_class_type_Main_internal_2 data_0
la $t2, data_0
# local_class_type_Main_internal_1 <- local_class_type_Main_internal_1 = local_class_type_Main_internal_2
move $t8, $t1
move $t9, $t2
loop_18:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_18
beqz $a1, mismatch_18
seq $v0, $a0, $a1
beqz $v0, mismatch_18
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_18
mismatch_18:
li $v0, 0
j end_18
check_18:
bnez $a1, mismatch_18
li $v0, 1
end_18:
move $t1, $v0
# If local_class_type_Main_internal_1 goto error__1045
sw $t0, -0($fp)
sw $t1, -12($fp)
sw $t2, -16($fp)
bnez $t1, error__1045
lw $t0, -0($fp)
lw $t1, -20($fp)
la $t9, type_E
lw $v0, 8($t0)
loop_19:
move $t8, $v0
beqz $t8, false_19
lw $v1, 0($t8)
beq $t9, $v1, true_19
lw $v0, 4($t8)
j loop_19
true_19:
li $t1, 1
j end_19
false_19:
li $t1, 0
end_19:
# If not local_class_type_Main_internal_3 goto next__1051_0
sw $t0, -0($fp)
sw $t1, -20($fp)
beqz $t1, next__1051_0
lw $t0, -0($fp)
lw $t1, -24($fp)
# Moving var to local_class_type_Main_e_4
move $t1, $t0
sw $t1, -24($fp)
lw $t2, -28($fp)
# Saves in local_class_type_Main_internal_5 data_48
la $t2, data_48
lw $t3, -4($fp)
lw $t4, -32($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t3)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t3, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -24($fp)
sw $t2, -28($fp)
sw $t3, -4($fp)
sw $t4, -32($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -32($fp)
# saves the return value
move $t0, $v0
lw $t1, -8($fp)
# Moving local_class_type_Main_internal_6 to local_class_type_Main_internal_0
move $t1, $t0
sw $t1, -8($fp)
sw $t0, -32($fp)
sw $t1, -8($fp)
j end__1045
next__1051_0:
lw $t0, -0($fp)
lw $t1, -36($fp)
la $t9, type_C
lw $v0, 8($t0)
loop_20:
move $t8, $v0
beqz $t8, false_20
lw $v1, 0($t8)
beq $t9, $v1, true_20
lw $v0, 4($t8)
j loop_20
true_20:
li $t1, 1
j end_20
false_20:
li $t1, 0
end_20:
# If not local_class_type_Main_internal_7 goto next__1065_1
sw $t0, -0($fp)
sw $t1, -36($fp)
beqz $t1, next__1065_1
lw $t0, -0($fp)
lw $t1, -40($fp)
# Moving var to local_class_type_Main_c_8
move $t1, $t0
sw $t1, -40($fp)
lw $t2, -44($fp)
# Saves in local_class_type_Main_internal_9 data_49
la $t2, data_49
lw $t3, -4($fp)
lw $t4, -48($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t3)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t3, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -40($fp)
sw $t2, -44($fp)
sw $t3, -4($fp)
sw $t4, -48($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -48($fp)
# saves the return value
move $t0, $v0
lw $t1, -8($fp)
# Moving local_class_type_Main_internal_10 to local_class_type_Main_internal_0
move $t1, $t0
sw $t1, -8($fp)
sw $t0, -48($fp)
sw $t1, -8($fp)
j end__1045
next__1065_1:
lw $t0, -0($fp)
lw $t1, -52($fp)
la $t9, type_D
lw $v0, 8($t0)
loop_21:
move $t8, $v0
beqz $t8, false_21
lw $v1, 0($t8)
beq $t9, $v1, true_21
lw $v0, 4($t8)
j loop_21
true_21:
li $t1, 1
j end_21
false_21:
li $t1, 0
end_21:
# If not local_class_type_Main_internal_11 goto next__1079_2
sw $t0, -0($fp)
sw $t1, -52($fp)
beqz $t1, next__1079_2
lw $t0, -0($fp)
lw $t1, -56($fp)
# Moving var to local_class_type_Main_d_12
move $t1, $t0
sw $t1, -56($fp)
lw $t2, -60($fp)
# Saves in local_class_type_Main_internal_13 data_50
la $t2, data_50
lw $t3, -4($fp)
lw $t4, -64($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t3)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t3, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -56($fp)
sw $t2, -60($fp)
sw $t3, -4($fp)
sw $t4, -64($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -64($fp)
# saves the return value
move $t0, $v0
lw $t1, -8($fp)
# Moving local_class_type_Main_internal_14 to local_class_type_Main_internal_0
move $t1, $t0
sw $t1, -8($fp)
sw $t0, -64($fp)
sw $t1, -8($fp)
j end__1045
next__1079_2:
lw $t0, -0($fp)
lw $t1, -68($fp)
la $t9, type_B
lw $v0, 8($t0)
loop_22:
move $t8, $v0
beqz $t8, false_22
lw $v1, 0($t8)
beq $t9, $v1, true_22
lw $v0, 4($t8)
j loop_22
true_22:
li $t1, 1
j end_22
false_22:
li $t1, 0
end_22:
# If not local_class_type_Main_internal_15 goto next__1093_3
sw $t0, -0($fp)
sw $t1, -68($fp)
beqz $t1, next__1093_3
lw $t0, -0($fp)
lw $t1, -72($fp)
# Moving var to local_class_type_Main_b_16
move $t1, $t0
sw $t1, -72($fp)
lw $t2, -76($fp)
# Saves in local_class_type_Main_internal_17 data_51
la $t2, data_51
lw $t3, -4($fp)
lw $t4, -80($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t3)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t3, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -72($fp)
sw $t2, -76($fp)
sw $t3, -4($fp)
sw $t4, -80($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -80($fp)
# saves the return value
move $t0, $v0
lw $t1, -8($fp)
# Moving local_class_type_Main_internal_18 to local_class_type_Main_internal_0
move $t1, $t0
sw $t1, -8($fp)
sw $t0, -80($fp)
sw $t1, -8($fp)
j end__1045
next__1093_3:
lw $t0, -0($fp)
lw $t1, -84($fp)
la $t9, type_A
lw $v0, 8($t0)
loop_23:
move $t8, $v0
beqz $t8, false_23
lw $v1, 0($t8)
beq $t9, $v1, true_23
lw $v0, 4($t8)
j loop_23
true_23:
li $t1, 1
j end_23
false_23:
li $t1, 0
end_23:
# If not local_class_type_Main_internal_19 goto next__1107_4
sw $t0, -0($fp)
sw $t1, -84($fp)
beqz $t1, next__1107_4
lw $t0, -0($fp)
lw $t1, -88($fp)
# Moving var to local_class_type_Main_a_20
move $t1, $t0
sw $t1, -88($fp)
lw $t2, -92($fp)
# Saves in local_class_type_Main_internal_21 data_52
la $t2, data_52
lw $t3, -4($fp)
lw $t4, -96($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t3)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t3, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -88($fp)
sw $t2, -92($fp)
sw $t3, -4($fp)
sw $t4, -96($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -96($fp)
# saves the return value
move $t0, $v0
lw $t1, -8($fp)
# Moving local_class_type_Main_internal_22 to local_class_type_Main_internal_0
move $t1, $t0
sw $t1, -8($fp)
sw $t0, -96($fp)
sw $t1, -8($fp)
j end__1045
next__1107_4:
lw $t0, -0($fp)
lw $t1, -100($fp)
la $t9, type_Object
lw $v0, 8($t0)
loop_24:
move $t8, $v0
beqz $t8, false_24
lw $v1, 0($t8)
beq $t9, $v1, true_24
lw $v0, 4($t8)
j loop_24
true_24:
li $t1, 1
j end_24
false_24:
li $t1, 0
end_24:
# If not local_class_type_Main_internal_23 goto next__1121_5
sw $t0, -0($fp)
sw $t1, -100($fp)
beqz $t1, next__1121_5
lw $t0, -0($fp)
lw $t1, -104($fp)
# Moving var to local_class_type_Main_o_24
move $t1, $t0
sw $t1, -104($fp)
lw $t2, -108($fp)
# Saves in local_class_type_Main_internal_25 data_53
la $t2, data_53
lw $t3, -4($fp)
lw $t4, -112($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t3)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t3, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -104($fp)
sw $t2, -108($fp)
sw $t3, -4($fp)
sw $t4, -112($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -112($fp)
# saves the return value
move $t0, $v0
lw $t1, -8($fp)
# Moving local_class_type_Main_internal_26 to local_class_type_Main_internal_0
move $t1, $t0
sw $t1, -8($fp)
sw $t0, -112($fp)
sw $t1, -8($fp)
j end__1045
next__1121_5:
la $a0, case_error
j .raise
error__1045:
la $a0, case_void_error
j .raise
end__1045:
lw $t0, -8($fp)
move $v0, $t0
# Empty all used registers and saves them to memory
sw $t0, -8($fp)
# Removing all locals from stack
addiu $sp, $sp, 116
jr $ra


function_print_Main:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Pops the register with the param value var
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_print_Main_z_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_print_Main_internal_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_print_Main_internal_2 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_print_Main_internal_3 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_print_Main_internal_4 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_print_Main_internal_5 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_print_Main_internal_6 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_print_Main_internal_7 to the stack
addiu $sp, $sp, -4
lw $t0, -12($fp)
# Syscall to allocate memory of the object entry in heap
li $v0, 9
li $a0, 12
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_A2I
sw $t9, 0($v0)
# Saves the size of the node
li $t9, 12
sw $t9, 4($v0)
move $t0, $v0
# Adding Type Info addr
la $t8, types
lw $v0, 40($t8)
sw $v0, 8($t0)
lw $t1, -8($fp)
# Moving local_print_Main_internal_1 to local_print_Main_z_0
move $t1, $t0
sw $t1, -8($fp)
lw $t2, -0($fp)
lw $t3, -16($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_value_A
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -12($fp)
sw $t1, -8($fp)
sw $t2, -0($fp)
sw $t3, -16($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -16($fp)
# saves the return value
move $t0, $v0
lw $t1, -8($fp)
lw $t2, -20($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_i2a_A2I
lw $t8, 32($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -16($fp)
sw $t1, -8($fp)
sw $t2, -20($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -20($fp)
# saves the return value
move $t0, $v0
lw $t1, -4($fp)
lw $t2, -24($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -20($fp)
sw $t1, -4($fp)
sw $t2, -24($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -24($fp)
# saves the return value
move $t0, $v0
lw $t1, -28($fp)
# Saves in local_print_Main_internal_5 data_54
la $t1, data_54
lw $t2, -4($fp)
lw $t3, -32($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -24($fp)
sw $t1, -28($fp)
sw $t2, -4($fp)
sw $t3, -32($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -32($fp)
# saves the return value
move $t0, $v0
lw $t1, -36($fp)
# Moving local_print_Main_internal_6 to local_print_Main_internal_7
move $t1, $t0
sw $t1, -36($fp)
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -32($fp)
sw $t1, -36($fp)
# Removing all locals from stack
addiu $sp, $sp, 40
jr $ra


function_main_Main:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_main_Main_internal_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_flag_2 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_3 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_4 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_avar_5 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_6 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_avar_7 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_8 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_9 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_10 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_11 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_12 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_13 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_14 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_avar_15 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_16 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_17 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_18 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_char_19 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_20 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_21 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_22 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_char_23 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_24 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_25 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_26 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_char_27 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_28 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_29 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_30 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_char_31 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_32 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_33 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_34 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_char_35 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_36 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_37 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_38 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_char_39 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_40 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_41 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_42 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_char_43 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_44 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_45 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_46 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_char_47 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_48 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_49 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_50 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_char_51 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_52 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_53 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_54 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_char_55 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_56 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_57 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_58 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_avar_59 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_60 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_61 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_62 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_x_63 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_x_64 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_65 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_avar_66 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_67 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_68 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_r_69 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_70 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_avar_71 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_72 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_73 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_74 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_75 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_76 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_avar_77 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_78 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_79 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_80 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_81 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_82 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_83 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_a_84 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_85 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_86 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_87 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_88 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_89 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_90 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_91 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_92 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_93 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_avar_94 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_95 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_96 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_97 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_98 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_99 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_avar_100 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_101 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_102 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_103 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_104 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_105 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_106 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_avar_107 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_108 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_109 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_110 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_111 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_112 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_avar_113 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_114 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_115 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_116 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_avar_117 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_118 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_119 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_120 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_avar_121 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_122 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_123 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_124 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_125 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_126 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_127 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_avar_128 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_129 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_a_var_130 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_131 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_132 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_133 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_avar_134 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_135 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_136 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_137 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_138 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_c_139 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_140 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_141 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_142 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_a_143 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_144 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_145 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_146 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_o_147 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_148 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_149 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_150 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_151 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_152 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_153 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_154 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_155 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_avar_156 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_157 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_a_var_158 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_159 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_160 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_161 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_162 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_main_Main_internal_163 to the stack
addiu $sp, $sp, -4
lw $t0, -4($fp)
# Syscall to allocate memory of the object entry in heap
li $v0, 9
li $a0, 16
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_A
sw $t9, 0($v0)
# Saves the size of the node
li $t9, 16
sw $t9, 4($v0)
move $t0, $v0
# Adding Type Info addr
la $t8, types
lw $v0, 20($t8)
sw $v0, 8($t0)
# Static Dispatch of the method A
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
# This function will consume the arguments
jal function_A_A
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -4($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
# self . avar <- SET local_main_Main_internal_0
sw $t0, 16($t1)
lw $t2, -8($fp)
# Initialize void node
li $a0, 4
li $v0, 9
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_Void
sw $t9, 0($v0)
move $t2, $v0
sw $t0, -4($fp)
sw $t1, -0($fp)
sw $t2, -8($fp)
start__1172:
lw $t0, -0($fp)
lw $t1, -12($fp)
# local_main_Main_flag_2 <- GET self . flag
lw $t1, 24($t0)
# If not local_main_Main_flag_2 goto end__1172
sw $t0, -0($fp)
sw $t1, -12($fp)
beqz $t1, end__1172
lw $t0, -16($fp)
# Saves in local_main_Main_internal_3 data_55
la $t0, data_55
lw $t1, -0($fp)
lw $t2, -20($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -16($fp)
sw $t1, -0($fp)
sw $t2, -20($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -20($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
lw $t2, -24($fp)
# local_main_Main_avar_5 <- GET self . avar
lw $t2, 16($t1)
lw $t3, -28($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_print_Main
lw $t8, 52($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -20($fp)
sw $t1, -0($fp)
sw $t2, -24($fp)
sw $t3, -28($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -28($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
lw $t2, -32($fp)
# local_main_Main_avar_7 <- GET self . avar
lw $t2, 16($t1)
lw $t3, -36($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_value_A
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -28($fp)
sw $t1, -0($fp)
sw $t2, -32($fp)
sw $t3, -36($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -36($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
lw $t2, -40($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_is_even_Main
lw $t8, 44($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -36($fp)
sw $t1, -0($fp)
sw $t2, -40($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -40($fp)
# saves the return value
move $t0, $v0
# If local_main_Main_internal_9 goto true__1197
sw $t0, -40($fp)
bnez $t0, true__1197
lw $t0, -48($fp)
# Saves in local_main_Main_internal_11 data_56
la $t0, data_56
lw $t1, -0($fp)
lw $t2, -52($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -48($fp)
sw $t1, -0($fp)
sw $t2, -52($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -52($fp)
# saves the return value
move $t0, $v0
lw $t1, -44($fp)
# Moving local_main_Main_internal_12 to local_main_Main_internal_10
move $t1, $t0
sw $t1, -44($fp)
sw $t0, -52($fp)
sw $t1, -44($fp)
j end__1197
true__1197:
lw $t0, -56($fp)
# Saves in local_main_Main_internal_13 data_57
la $t0, data_57
lw $t1, -0($fp)
lw $t2, -60($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -56($fp)
sw $t1, -0($fp)
sw $t2, -60($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -60($fp)
# saves the return value
move $t0, $v0
lw $t1, -44($fp)
# Moving local_main_Main_internal_14 to local_main_Main_internal_10
move $t1, $t0
sw $t1, -44($fp)
sw $t0, -60($fp)
sw $t1, -44($fp)
end__1197:
lw $t0, -0($fp)
lw $t1, -64($fp)
# local_main_Main_avar_15 <- GET self . avar
lw $t1, 16($t0)
lw $t2, -68($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_class_type_Main
lw $t8, 48($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -64($fp)
sw $t2, -68($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -68($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
lw $t2, -72($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_menu_Main
lw $t8, 32($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -68($fp)
sw $t1, -0($fp)
sw $t2, -72($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -72($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
# self . char <- SET local_main_Main_internal_17
sw $t0, 12($t1)
lw $t2, -80($fp)
# local_main_Main_char_19 <- GET self . char
lw $t2, 12($t1)
lw $t3, -84($fp)
# Saves in local_main_Main_internal_20 data_58
la $t3, data_58
lw $t4, -76($fp)
# local_main_Main_internal_18 <- local_main_Main_char_19 = local_main_Main_internal_20
move $t8, $t2
move $t9, $t3
loop_25:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_25
beqz $a1, mismatch_25
seq $v0, $a0, $a1
beqz $v0, mismatch_25
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_25
mismatch_25:
li $v0, 0
j end_25
check_25:
bnez $a1, mismatch_25
li $v0, 1
end_25:
move $t4, $v0
# If local_main_Main_internal_18 goto true__1231
sw $t0, -72($fp)
sw $t1, -0($fp)
sw $t2, -80($fp)
sw $t3, -84($fp)
sw $t4, -76($fp)
bnez $t4, true__1231
lw $t0, -0($fp)
lw $t1, -96($fp)
# local_main_Main_char_23 <- GET self . char
lw $t1, 12($t0)
lw $t2, -100($fp)
# Saves in local_main_Main_internal_24 data_59
la $t2, data_59
lw $t3, -92($fp)
# local_main_Main_internal_22 <- local_main_Main_char_23 = local_main_Main_internal_24
move $t8, $t1
move $t9, $t2
loop_26:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_26
beqz $a1, mismatch_26
seq $v0, $a0, $a1
beqz $v0, mismatch_26
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_26
mismatch_26:
li $v0, 0
j end_26
check_26:
bnez $a1, mismatch_26
li $v0, 1
end_26:
move $t3, $v0
# If local_main_Main_internal_22 goto true__1240
sw $t0, -0($fp)
sw $t1, -96($fp)
sw $t2, -100($fp)
sw $t3, -92($fp)
bnez $t3, true__1240
lw $t0, -0($fp)
lw $t1, -112($fp)
# local_main_Main_char_27 <- GET self . char
lw $t1, 12($t0)
lw $t2, -116($fp)
# Saves in local_main_Main_internal_28 data_60
la $t2, data_60
lw $t3, -108($fp)
# local_main_Main_internal_26 <- local_main_Main_char_27 = local_main_Main_internal_28
move $t8, $t1
move $t9, $t2
loop_27:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_27
beqz $a1, mismatch_27
seq $v0, $a0, $a1
beqz $v0, mismatch_27
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_27
mismatch_27:
li $v0, 0
j end_27
check_27:
bnez $a1, mismatch_27
li $v0, 1
end_27:
move $t3, $v0
# If local_main_Main_internal_26 goto true__1249
sw $t0, -0($fp)
sw $t1, -112($fp)
sw $t2, -116($fp)
sw $t3, -108($fp)
bnez $t3, true__1249
lw $t0, -0($fp)
lw $t1, -128($fp)
# local_main_Main_char_31 <- GET self . char
lw $t1, 12($t0)
lw $t2, -132($fp)
# Saves in local_main_Main_internal_32 data_61
la $t2, data_61
lw $t3, -124($fp)
# local_main_Main_internal_30 <- local_main_Main_char_31 = local_main_Main_internal_32
move $t8, $t1
move $t9, $t2
loop_28:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_28
beqz $a1, mismatch_28
seq $v0, $a0, $a1
beqz $v0, mismatch_28
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_28
mismatch_28:
li $v0, 0
j end_28
check_28:
bnez $a1, mismatch_28
li $v0, 1
end_28:
move $t3, $v0
# If local_main_Main_internal_30 goto true__1258
sw $t0, -0($fp)
sw $t1, -128($fp)
sw $t2, -132($fp)
sw $t3, -124($fp)
bnez $t3, true__1258
lw $t0, -0($fp)
lw $t1, -144($fp)
# local_main_Main_char_35 <- GET self . char
lw $t1, 12($t0)
lw $t2, -148($fp)
# Saves in local_main_Main_internal_36 data_62
la $t2, data_62
lw $t3, -140($fp)
# local_main_Main_internal_34 <- local_main_Main_char_35 = local_main_Main_internal_36
move $t8, $t1
move $t9, $t2
loop_29:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_29
beqz $a1, mismatch_29
seq $v0, $a0, $a1
beqz $v0, mismatch_29
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_29
mismatch_29:
li $v0, 0
j end_29
check_29:
bnez $a1, mismatch_29
li $v0, 1
end_29:
move $t3, $v0
# If local_main_Main_internal_34 goto true__1267
sw $t0, -0($fp)
sw $t1, -144($fp)
sw $t2, -148($fp)
sw $t3, -140($fp)
bnez $t3, true__1267
lw $t0, -0($fp)
lw $t1, -160($fp)
# local_main_Main_char_39 <- GET self . char
lw $t1, 12($t0)
lw $t2, -164($fp)
# Saves in local_main_Main_internal_40 data_63
la $t2, data_63
lw $t3, -156($fp)
# local_main_Main_internal_38 <- local_main_Main_char_39 = local_main_Main_internal_40
move $t8, $t1
move $t9, $t2
loop_30:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_30
beqz $a1, mismatch_30
seq $v0, $a0, $a1
beqz $v0, mismatch_30
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_30
mismatch_30:
li $v0, 0
j end_30
check_30:
bnez $a1, mismatch_30
li $v0, 1
end_30:
move $t3, $v0
# If local_main_Main_internal_38 goto true__1276
sw $t0, -0($fp)
sw $t1, -160($fp)
sw $t2, -164($fp)
sw $t3, -156($fp)
bnez $t3, true__1276
lw $t0, -0($fp)
lw $t1, -176($fp)
# local_main_Main_char_43 <- GET self . char
lw $t1, 12($t0)
lw $t2, -180($fp)
# Saves in local_main_Main_internal_44 data_64
la $t2, data_64
lw $t3, -172($fp)
# local_main_Main_internal_42 <- local_main_Main_char_43 = local_main_Main_internal_44
move $t8, $t1
move $t9, $t2
loop_31:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_31
beqz $a1, mismatch_31
seq $v0, $a0, $a1
beqz $v0, mismatch_31
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_31
mismatch_31:
li $v0, 0
j end_31
check_31:
bnez $a1, mismatch_31
li $v0, 1
end_31:
move $t3, $v0
# If local_main_Main_internal_42 goto true__1285
sw $t0, -0($fp)
sw $t1, -176($fp)
sw $t2, -180($fp)
sw $t3, -172($fp)
bnez $t3, true__1285
lw $t0, -0($fp)
lw $t1, -192($fp)
# local_main_Main_char_47 <- GET self . char
lw $t1, 12($t0)
lw $t2, -196($fp)
# Saves in local_main_Main_internal_48 data_65
la $t2, data_65
lw $t3, -188($fp)
# local_main_Main_internal_46 <- local_main_Main_char_47 = local_main_Main_internal_48
move $t8, $t1
move $t9, $t2
loop_32:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_32
beqz $a1, mismatch_32
seq $v0, $a0, $a1
beqz $v0, mismatch_32
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_32
mismatch_32:
li $v0, 0
j end_32
check_32:
bnez $a1, mismatch_32
li $v0, 1
end_32:
move $t3, $v0
# If local_main_Main_internal_46 goto true__1294
sw $t0, -0($fp)
sw $t1, -192($fp)
sw $t2, -196($fp)
sw $t3, -188($fp)
bnez $t3, true__1294
lw $t0, -0($fp)
lw $t1, -208($fp)
# local_main_Main_char_51 <- GET self . char
lw $t1, 12($t0)
lw $t2, -212($fp)
# Saves in local_main_Main_internal_52 data_66
la $t2, data_66
lw $t3, -204($fp)
# local_main_Main_internal_50 <- local_main_Main_char_51 = local_main_Main_internal_52
move $t8, $t1
move $t9, $t2
loop_33:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_33
beqz $a1, mismatch_33
seq $v0, $a0, $a1
beqz $v0, mismatch_33
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_33
mismatch_33:
li $v0, 0
j end_33
check_33:
bnez $a1, mismatch_33
li $v0, 1
end_33:
move $t3, $v0
# If local_main_Main_internal_50 goto true__1303
sw $t0, -0($fp)
sw $t1, -208($fp)
sw $t2, -212($fp)
sw $t3, -204($fp)
bnez $t3, true__1303
lw $t0, -0($fp)
lw $t1, -224($fp)
# local_main_Main_char_55 <- GET self . char
lw $t1, 12($t0)
lw $t2, -228($fp)
# Saves in local_main_Main_internal_56 data_67
la $t2, data_67
lw $t3, -220($fp)
# local_main_Main_internal_54 <- local_main_Main_char_55 = local_main_Main_internal_56
move $t8, $t1
move $t9, $t2
loop_34:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_34
beqz $a1, mismatch_34
seq $v0, $a0, $a1
beqz $v0, mismatch_34
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_34
mismatch_34:
li $v0, 0
j end_34
check_34:
bnez $a1, mismatch_34
li $v0, 1
end_34:
move $t3, $v0
# If local_main_Main_internal_54 goto true__1312
sw $t0, -0($fp)
sw $t1, -224($fp)
sw $t2, -228($fp)
sw $t3, -220($fp)
bnez $t3, true__1312
lw $t0, -236($fp)
# Syscall to allocate memory of the object entry in heap
li $v0, 9
li $a0, 16
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_A
sw $t9, 0($v0)
# Saves the size of the node
li $t9, 16
sw $t9, 4($v0)
move $t0, $v0
# Adding Type Info addr
la $t8, types
lw $v0, 20($t8)
sw $v0, 8($t0)
# Static Dispatch of the method A
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -236($fp)
# This function will consume the arguments
jal function_A_A
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -236($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
lw $t2, -240($fp)
# local_main_Main_avar_59 <- GET self . avar
lw $t2, 16($t1)
lw $t3, -244($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_value_A
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -236($fp)
sw $t1, -0($fp)
sw $t2, -240($fp)
sw $t3, -244($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -244($fp)
# saves the return value
move $t0, $v0
lw $t1, -236($fp)
lw $t2, -248($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_method1_A
lw $t8, 24($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -244($fp)
sw $t1, -236($fp)
sw $t2, -248($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -248($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
# self . avar <- SET local_main_Main_internal_61
sw $t0, 16($t1)
lw $t2, -232($fp)
# Moving local_main_Main_internal_61 to local_main_Main_internal_57
move $t2, $t0
sw $t2, -232($fp)
sw $t0, -248($fp)
sw $t1, -0($fp)
sw $t2, -232($fp)
j end__1312
true__1312:
lw $t0, -0($fp)
# self . flag <- SET 0
li $t9, 0
sw $t9, 24($t0)
lw $t1, -232($fp)
# Moving 0 to local_main_Main_internal_57
li $t1, 0
sw $t1, -232($fp)
sw $t0, -0($fp)
sw $t1, -232($fp)
end__1312:
lw $t0, -232($fp)
lw $t1, -216($fp)
# Moving local_main_Main_internal_57 to local_main_Main_internal_53
move $t1, $t0
sw $t1, -216($fp)
sw $t0, -232($fp)
sw $t1, -216($fp)
j end__1303
true__1303:
lw $t0, -252($fp)
# Syscall to allocate memory of the object entry in heap
li $v0, 9
li $a0, 16
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_A
sw $t9, 0($v0)
# Saves the size of the node
li $t9, 16
sw $t9, 4($v0)
move $t0, $v0
# Adding Type Info addr
la $t8, types
lw $v0, 20($t8)
sw $v0, 8($t0)
# Static Dispatch of the method A
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -252($fp)
# This function will consume the arguments
jal function_A_A
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -252($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
# self . avar <- SET local_main_Main_internal_62
sw $t0, 16($t1)
lw $t2, -216($fp)
# Moving local_main_Main_internal_62 to local_main_Main_internal_53
move $t2, $t0
sw $t2, -216($fp)
sw $t0, -252($fp)
sw $t1, -0($fp)
sw $t2, -216($fp)
end__1303:
lw $t0, -216($fp)
lw $t1, -200($fp)
# Moving local_main_Main_internal_53 to local_main_Main_internal_49
move $t1, $t0
sw $t1, -200($fp)
sw $t0, -216($fp)
sw $t1, -200($fp)
j end__1294
true__1294:
lw $t0, -260($fp)
# Initialize void node
li $a0, 4
li $v0, 9
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_Void
sw $t9, 0($v0)
move $t0, $v0
lw $t1, -256($fp)
# Moving local_main_Main_x_64 to local_main_Main_x_63
move $t1, $t0
sw $t1, -256($fp)
lw $t2, -264($fp)
# Syscall to allocate memory of the object entry in heap
li $v0, 9
li $a0, 16
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_E
sw $t9, 0($v0)
# Saves the size of the node
li $t9, 16
sw $t9, 4($v0)
move $t2, $v0
# Adding Type Info addr
la $t8, types
lw $v0, 36($t8)
sw $v0, 8($t2)
# Static Dispatch of the method E
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -260($fp)
sw $t1, -256($fp)
sw $t2, -264($fp)
# This function will consume the arguments
jal function_E_E
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -264($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
lw $t2, -268($fp)
# local_main_Main_avar_66 <- GET self . avar
lw $t2, 16($t1)
lw $t3, -272($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_value_A
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -264($fp)
sw $t1, -0($fp)
sw $t2, -268($fp)
sw $t3, -272($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -272($fp)
# saves the return value
move $t0, $v0
lw $t1, -264($fp)
lw $t2, -276($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_method6_E
lw $t8, 60($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -272($fp)
sw $t1, -264($fp)
sw $t2, -276($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -276($fp)
# saves the return value
move $t0, $v0
lw $t1, -260($fp)
# Moving local_main_Main_internal_68 to local_main_Main_x_64
move $t1, $t0
sw $t1, -260($fp)
lw $t2, -0($fp)
lw $t3, -288($fp)
# local_main_Main_avar_71 <- GET self . avar
lw $t3, 16($t2)
lw $t4, -292($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t3)
lw $a0, 8($t9)
# Saves in t8 the direction of function_value_A
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t3, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -276($fp)
sw $t1, -260($fp)
sw $t2, -0($fp)
sw $t3, -288($fp)
sw $t4, -292($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -292($fp)
# saves the return value
move $t0, $v0
lw $t1, -260($fp)
lw $t2, -300($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_value_A
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -292($fp)
sw $t1, -260($fp)
sw $t2, -300($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -300($fp)
# saves the return value
move $t0, $v0
lw $t1, -296($fp)
# local_main_Main_internal_73 <- local_main_Main_internal_74 * 8
li $t9, 8
mult $t0, $t9
mflo $t1
lw $t2, -292($fp)
lw $t3, -284($fp)
# local_main_Main_internal_70 <- local_main_Main_internal_72 - local_main_Main_internal_73
sub $t3, $t2, $t1
lw $t4, -280($fp)
# Moving local_main_Main_internal_70 to local_main_Main_r_69
move $t4, $t3
sw $t4, -280($fp)
lw $t5, -304($fp)
# Saves in local_main_Main_internal_75 data_68
la $t5, data_68
lw $t6, -0($fp)
lw $t7, -308($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t6)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t5, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t6, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -300($fp)
sw $t1, -296($fp)
sw $t2, -292($fp)
sw $t3, -284($fp)
sw $t4, -280($fp)
sw $t5, -304($fp)
sw $t6, -0($fp)
sw $t7, -308($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -308($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
lw $t2, -312($fp)
# local_main_Main_avar_77 <- GET self . avar
lw $t2, 16($t1)
lw $t3, -316($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_print_Main
lw $t8, 52($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -308($fp)
sw $t1, -0($fp)
sw $t2, -312($fp)
sw $t3, -316($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -316($fp)
# saves the return value
move $t0, $v0
lw $t1, -320($fp)
# Saves in local_main_Main_internal_79 data_69
la $t1, data_69
lw $t2, -0($fp)
lw $t3, -324($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -316($fp)
sw $t1, -320($fp)
sw $t2, -0($fp)
sw $t3, -324($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -324($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
lw $t2, -328($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_print_Main
lw $t8, 52($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
lw $t3, -260($fp)
sw $t3, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -324($fp)
sw $t1, -0($fp)
sw $t2, -328($fp)
sw $t3, -260($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -328($fp)
# saves the return value
move $t0, $v0
lw $t1, -332($fp)
# Saves in local_main_Main_internal_82 data_70
la $t1, data_70
lw $t2, -0($fp)
lw $t3, -336($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -328($fp)
sw $t1, -332($fp)
sw $t2, -0($fp)
sw $t3, -336($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -336($fp)
# saves the return value
move $t0, $v0
lw $t1, -344($fp)
# Syscall to allocate memory of the object entry in heap
li $v0, 9
li $a0, 12
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_A2I
sw $t9, 0($v0)
# Saves the size of the node
li $t9, 12
sw $t9, 4($v0)
move $t1, $v0
# Adding Type Info addr
la $t8, types
lw $v0, 40($t8)
sw $v0, 8($t1)
lw $t2, -340($fp)
# Moving local_main_Main_internal_85 to local_main_Main_a_84
move $t2, $t1
sw $t2, -340($fp)
lw $t3, -348($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_i2a_A2I
lw $t8, 32($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
lw $t4, -280($fp)
sw $t4, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -336($fp)
sw $t1, -344($fp)
sw $t2, -340($fp)
sw $t3, -348($fp)
sw $t4, -280($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -348($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
lw $t2, -352($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -348($fp)
sw $t1, -0($fp)
sw $t2, -352($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -352($fp)
# saves the return value
move $t0, $v0
lw $t1, -356($fp)
# Saves in local_main_Main_internal_88 data_71
la $t1, data_71
lw $t2, -0($fp)
lw $t3, -360($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -352($fp)
sw $t1, -356($fp)
sw $t2, -0($fp)
sw $t3, -360($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -360($fp)
# saves the return value
move $t0, $v0
lw $t1, -364($fp)
# Moving local_main_Main_internal_89 to local_main_Main_internal_90
move $t1, $t0
sw $t1, -364($fp)
lw $t2, -368($fp)
# Moving local_main_Main_internal_90 to local_main_Main_internal_91
move $t2, $t1
sw $t2, -368($fp)
lw $t3, -260($fp)
lw $t4, -0($fp)
# self . avar <- SET local_main_Main_x_64
sw $t3, 16($t4)
lw $t5, -372($fp)
# Moving local_main_Main_x_64 to local_main_Main_internal_92
move $t5, $t3
sw $t5, -372($fp)
lw $t6, -200($fp)
# Moving local_main_Main_internal_92 to local_main_Main_internal_49
move $t6, $t5
sw $t6, -200($fp)
sw $t0, -360($fp)
sw $t1, -364($fp)
sw $t2, -368($fp)
sw $t3, -260($fp)
sw $t4, -0($fp)
sw $t5, -372($fp)
sw $t6, -200($fp)
end__1294:
lw $t0, -200($fp)
lw $t1, -184($fp)
# Moving local_main_Main_internal_49 to local_main_Main_internal_45
move $t1, $t0
sw $t1, -184($fp)
sw $t0, -200($fp)
sw $t1, -184($fp)
j end__1285
true__1285:
lw $t0, -376($fp)
# Syscall to allocate memory of the object entry in heap
li $v0, 9
li $a0, 16
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_D
sw $t9, 0($v0)
# Saves the size of the node
li $t9, 16
sw $t9, 4($v0)
move $t0, $v0
# Adding Type Info addr
la $t8, types
lw $v0, 32($t8)
sw $v0, 8($t0)
# Static Dispatch of the method D
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -376($fp)
# This function will consume the arguments
jal function_D_D
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -376($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
lw $t2, -380($fp)
# local_main_Main_avar_94 <- GET self . avar
lw $t2, 16($t1)
lw $t3, -384($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_value_A
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -376($fp)
sw $t1, -0($fp)
sw $t2, -380($fp)
sw $t3, -384($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -384($fp)
# saves the return value
move $t0, $v0
lw $t1, -376($fp)
lw $t2, -388($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_method7_D
lw $t8, 52($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -384($fp)
sw $t1, -376($fp)
sw $t2, -388($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -388($fp)
# saves the return value
move $t0, $v0
# If local_main_Main_internal_96 goto true__1443
sw $t0, -388($fp)
bnez $t0, true__1443
lw $t0, -396($fp)
# Saves in local_main_Main_internal_98 data_72
la $t0, data_72
lw $t1, -0($fp)
lw $t2, -400($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -396($fp)
sw $t1, -0($fp)
sw $t2, -400($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -400($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
lw $t2, -404($fp)
# local_main_Main_avar_100 <- GET self . avar
lw $t2, 16($t1)
lw $t3, -408($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_print_Main
lw $t8, 52($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -400($fp)
sw $t1, -0($fp)
sw $t2, -404($fp)
sw $t3, -408($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -408($fp)
# saves the return value
move $t0, $v0
lw $t1, -412($fp)
# Saves in local_main_Main_internal_102 data_73
la $t1, data_73
lw $t2, -0($fp)
lw $t3, -416($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -408($fp)
sw $t1, -412($fp)
sw $t2, -0($fp)
sw $t3, -416($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -416($fp)
# saves the return value
move $t0, $v0
lw $t1, -420($fp)
# Moving local_main_Main_internal_103 to local_main_Main_internal_104
move $t1, $t0
sw $t1, -420($fp)
lw $t2, -392($fp)
# Moving local_main_Main_internal_104 to local_main_Main_internal_97
move $t2, $t1
sw $t2, -392($fp)
sw $t0, -416($fp)
sw $t1, -420($fp)
sw $t2, -392($fp)
j end__1443
true__1443:
lw $t0, -424($fp)
# Saves in local_main_Main_internal_105 data_74
la $t0, data_74
lw $t1, -0($fp)
lw $t2, -428($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -424($fp)
sw $t1, -0($fp)
sw $t2, -428($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -428($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
lw $t2, -432($fp)
# local_main_Main_avar_107 <- GET self . avar
lw $t2, 16($t1)
lw $t3, -436($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_print_Main
lw $t8, 52($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -428($fp)
sw $t1, -0($fp)
sw $t2, -432($fp)
sw $t3, -436($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -436($fp)
# saves the return value
move $t0, $v0
lw $t1, -440($fp)
# Saves in local_main_Main_internal_109 data_75
la $t1, data_75
lw $t2, -0($fp)
lw $t3, -444($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -436($fp)
sw $t1, -440($fp)
sw $t2, -0($fp)
sw $t3, -444($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -444($fp)
# saves the return value
move $t0, $v0
lw $t1, -448($fp)
# Moving local_main_Main_internal_110 to local_main_Main_internal_111
move $t1, $t0
sw $t1, -448($fp)
lw $t2, -392($fp)
# Moving local_main_Main_internal_111 to local_main_Main_internal_97
move $t2, $t1
sw $t2, -392($fp)
sw $t0, -444($fp)
sw $t1, -448($fp)
sw $t2, -392($fp)
end__1443:
lw $t0, -392($fp)
lw $t1, -184($fp)
# Moving local_main_Main_internal_97 to local_main_Main_internal_45
move $t1, $t0
sw $t1, -184($fp)
sw $t0, -392($fp)
sw $t1, -184($fp)
end__1285:
lw $t0, -184($fp)
lw $t1, -168($fp)
# Moving local_main_Main_internal_45 to local_main_Main_internal_41
move $t1, $t0
sw $t1, -168($fp)
sw $t0, -184($fp)
sw $t1, -168($fp)
j end__1276
true__1276:
lw $t0, -452($fp)
# Syscall to allocate memory of the object entry in heap
li $v0, 9
li $a0, 16
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_C
sw $t9, 0($v0)
# Saves the size of the node
li $t9, 16
sw $t9, 4($v0)
move $t0, $v0
# Adding Type Info addr
la $t8, types
lw $v0, 28($t8)
sw $v0, 8($t0)
# Static Dispatch of the method C
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -452($fp)
# This function will consume the arguments
jal function_C_C
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -452($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
lw $t2, -456($fp)
# local_main_Main_avar_113 <- GET self . avar
lw $t2, 16($t1)
lw $t3, -460($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_value_A
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -452($fp)
sw $t1, -0($fp)
sw $t2, -456($fp)
sw $t3, -460($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -460($fp)
# saves the return value
move $t0, $v0
lw $t1, -464($fp)
# Static Dispatch of the method method5
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
lw $t2, -452($fp)
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -460($fp)
sw $t1, -464($fp)
sw $t2, -452($fp)
# This function will consume the arguments
jal function_method5_C
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -464($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
# self . avar <- SET local_main_Main_internal_115
sw $t0, 16($t1)
lw $t2, -168($fp)
# Moving local_main_Main_internal_115 to local_main_Main_internal_41
move $t2, $t0
sw $t2, -168($fp)
sw $t0, -464($fp)
sw $t1, -0($fp)
sw $t2, -168($fp)
end__1276:
lw $t0, -168($fp)
lw $t1, -152($fp)
# Moving local_main_Main_internal_41 to local_main_Main_internal_37
move $t1, $t0
sw $t1, -152($fp)
sw $t0, -168($fp)
sw $t1, -152($fp)
j end__1267
true__1267:
lw $t0, -468($fp)
# Syscall to allocate memory of the object entry in heap
li $v0, 9
li $a0, 16
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_C
sw $t9, 0($v0)
# Saves the size of the node
li $t9, 16
sw $t9, 4($v0)
move $t0, $v0
# Adding Type Info addr
la $t8, types
lw $v0, 28($t8)
sw $v0, 8($t0)
# Static Dispatch of the method C
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -468($fp)
# This function will consume the arguments
jal function_C_C
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -468($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
lw $t2, -472($fp)
# local_main_Main_avar_117 <- GET self . avar
lw $t2, 16($t1)
lw $t3, -476($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_value_A
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -468($fp)
sw $t1, -0($fp)
sw $t2, -472($fp)
sw $t3, -476($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -476($fp)
# saves the return value
move $t0, $v0
lw $t1, -480($fp)
# Static Dispatch of the method method5
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
lw $t2, -468($fp)
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -476($fp)
sw $t1, -480($fp)
sw $t2, -468($fp)
# This function will consume the arguments
jal function_method5_B
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -480($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
# self . avar <- SET local_main_Main_internal_119
sw $t0, 16($t1)
lw $t2, -152($fp)
# Moving local_main_Main_internal_119 to local_main_Main_internal_37
move $t2, $t0
sw $t2, -152($fp)
sw $t0, -480($fp)
sw $t1, -0($fp)
sw $t2, -152($fp)
end__1267:
lw $t0, -152($fp)
lw $t1, -136($fp)
# Moving local_main_Main_internal_37 to local_main_Main_internal_33
move $t1, $t0
sw $t1, -136($fp)
sw $t0, -152($fp)
sw $t1, -136($fp)
j end__1258
true__1258:
lw $t0, -484($fp)
# Syscall to allocate memory of the object entry in heap
li $v0, 9
li $a0, 16
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_C
sw $t9, 0($v0)
# Saves the size of the node
li $t9, 16
sw $t9, 4($v0)
move $t0, $v0
# Adding Type Info addr
la $t8, types
lw $v0, 28($t8)
sw $v0, 8($t0)
# Static Dispatch of the method C
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -484($fp)
# This function will consume the arguments
jal function_C_C
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -484($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
lw $t2, -488($fp)
# local_main_Main_avar_121 <- GET self . avar
lw $t2, 16($t1)
lw $t3, -492($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_value_A
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -484($fp)
sw $t1, -0($fp)
sw $t2, -488($fp)
sw $t3, -492($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -492($fp)
# saves the return value
move $t0, $v0
lw $t1, -496($fp)
# Static Dispatch of the method method5
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
lw $t2, -484($fp)
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -492($fp)
sw $t1, -496($fp)
sw $t2, -484($fp)
# This function will consume the arguments
jal function_method5_A
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -496($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
# self . avar <- SET local_main_Main_internal_123
sw $t0, 16($t1)
lw $t2, -136($fp)
# Moving local_main_Main_internal_123 to local_main_Main_internal_33
move $t2, $t0
sw $t2, -136($fp)
sw $t0, -496($fp)
sw $t1, -0($fp)
sw $t2, -136($fp)
end__1258:
lw $t0, -136($fp)
lw $t1, -120($fp)
# Moving local_main_Main_internal_33 to local_main_Main_internal_29
move $t1, $t0
sw $t1, -120($fp)
sw $t0, -136($fp)
sw $t1, -120($fp)
j end__1249
true__1249:
lw $t0, -500($fp)
# Syscall to allocate memory of the object entry in heap
li $v0, 9
li $a0, 16
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_A
sw $t9, 0($v0)
# Saves the size of the node
li $t9, 16
sw $t9, 4($v0)
move $t0, $v0
# Adding Type Info addr
la $t8, types
lw $v0, 20($t8)
sw $v0, 8($t0)
# Static Dispatch of the method A
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -500($fp)
# This function will consume the arguments
jal function_A_A
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -500($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
lw $t2, -504($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_get_int_Main
lw $t8, 40($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -500($fp)
sw $t1, -0($fp)
sw $t2, -504($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -504($fp)
# saves the return value
move $t0, $v0
lw $t1, -500($fp)
lw $t2, -508($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_set_var_A
lw $t8, 20($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -504($fp)
sw $t1, -500($fp)
sw $t2, -508($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -508($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
# self . a_var <- SET local_main_Main_internal_126
sw $t0, 20($t1)
lw $t2, -512($fp)
# Syscall to allocate memory of the object entry in heap
li $v0, 9
li $a0, 16
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_D
sw $t9, 0($v0)
# Saves the size of the node
li $t9, 16
sw $t9, 4($v0)
move $t2, $v0
# Adding Type Info addr
la $t8, types
lw $v0, 32($t8)
sw $v0, 8($t2)
# Static Dispatch of the method D
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -508($fp)
sw $t1, -0($fp)
sw $t2, -512($fp)
# This function will consume the arguments
jal function_D_D
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -512($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
lw $t2, -516($fp)
# local_main_Main_avar_128 <- GET self . avar
lw $t2, 16($t1)
lw $t3, -520($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_value_A
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -512($fp)
sw $t1, -0($fp)
sw $t2, -516($fp)
sw $t3, -520($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -520($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
lw $t2, -524($fp)
# local_main_Main_a_var_130 <- GET self . a_var
lw $t2, 20($t1)
lw $t3, -528($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_value_A
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -520($fp)
sw $t1, -0($fp)
sw $t2, -524($fp)
sw $t3, -528($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -528($fp)
# saves the return value
move $t0, $v0
lw $t1, -512($fp)
lw $t2, -532($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_method4_A
lw $t8, 36($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
lw $t3, -520($fp)
sw $t3, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -528($fp)
sw $t1, -512($fp)
sw $t2, -532($fp)
sw $t3, -520($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -532($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
# self . avar <- SET local_main_Main_internal_132
sw $t0, 16($t1)
lw $t2, -536($fp)
# Moving local_main_Main_internal_132 to local_main_Main_internal_133
move $t2, $t0
sw $t2, -536($fp)
lw $t3, -120($fp)
# Moving local_main_Main_internal_133 to local_main_Main_internal_29
move $t3, $t2
sw $t3, -120($fp)
sw $t0, -532($fp)
sw $t1, -0($fp)
sw $t2, -536($fp)
sw $t3, -120($fp)
end__1249:
lw $t0, -120($fp)
lw $t1, -104($fp)
# Moving local_main_Main_internal_29 to local_main_Main_internal_25
move $t1, $t0
sw $t1, -104($fp)
sw $t0, -120($fp)
sw $t1, -104($fp)
j end__1240
true__1240:
lw $t0, -0($fp)
lw $t1, -540($fp)
# local_main_Main_avar_134 <- GET self . avar
lw $t1, 16($t0)
lw $t2, -548($fp)
# local_main_Main_internal_136 <- Type of local_main_Main_avar_134
lw $t2, 0($t1)
lw $t3, -552($fp)
# Saves in local_main_Main_internal_137 data_0
la $t3, data_0
# local_main_Main_internal_136 <- local_main_Main_internal_136 = local_main_Main_internal_137
move $t8, $t2
move $t9, $t3
loop_35:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_35
beqz $a1, mismatch_35
seq $v0, $a0, $a1
beqz $v0, mismatch_35
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_35
mismatch_35:
li $v0, 0
j end_35
check_35:
bnez $a1, mismatch_35
li $v0, 1
end_35:
move $t2, $v0
# If local_main_Main_internal_136 goto error__1586
sw $t0, -0($fp)
sw $t1, -540($fp)
sw $t2, -548($fp)
sw $t3, -552($fp)
bnez $t2, error__1586
lw $t0, -540($fp)
lw $t1, -556($fp)
la $t9, type_C
lw $v0, 8($t0)
loop_36:
move $t8, $v0
beqz $t8, false_36
lw $v1, 0($t8)
beq $t9, $v1, true_36
lw $v0, 4($t8)
j loop_36
true_36:
li $t1, 1
j end_36
false_36:
li $t1, 0
end_36:
# If not local_main_Main_internal_138 goto next__1592_0
sw $t0, -540($fp)
sw $t1, -556($fp)
beqz $t1, next__1592_0
lw $t0, -540($fp)
lw $t1, -560($fp)
# Moving local_main_Main_avar_134 to local_main_Main_c_139
move $t1, $t0
sw $t1, -560($fp)
lw $t2, -564($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_value_A
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -540($fp)
sw $t1, -560($fp)
sw $t2, -564($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -564($fp)
# saves the return value
move $t0, $v0
lw $t1, -560($fp)
lw $t2, -568($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_method6_C
lw $t8, 52($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -564($fp)
sw $t1, -560($fp)
sw $t2, -568($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -568($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
# self . avar <- SET local_main_Main_internal_141
sw $t0, 16($t1)
lw $t2, -544($fp)
# Moving local_main_Main_internal_141 to local_main_Main_internal_135
move $t2, $t0
sw $t2, -544($fp)
sw $t0, -568($fp)
sw $t1, -0($fp)
sw $t2, -544($fp)
j end__1586
next__1592_0:
lw $t0, -540($fp)
lw $t1, -572($fp)
la $t9, type_A
lw $v0, 8($t0)
loop_37:
move $t8, $v0
beqz $t8, false_37
lw $v1, 0($t8)
beq $t9, $v1, true_37
lw $v0, 4($t8)
j loop_37
true_37:
li $t1, 1
j end_37
false_37:
li $t1, 0
end_37:
# If not local_main_Main_internal_142 goto next__1608_1
sw $t0, -540($fp)
sw $t1, -572($fp)
beqz $t1, next__1608_1
lw $t0, -540($fp)
lw $t1, -576($fp)
# Moving local_main_Main_avar_134 to local_main_Main_a_143
move $t1, $t0
sw $t1, -576($fp)
lw $t2, -580($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_value_A
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -540($fp)
sw $t1, -576($fp)
sw $t2, -580($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -580($fp)
# saves the return value
move $t0, $v0
lw $t1, -576($fp)
lw $t2, -584($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_method3_A
lw $t8, 32($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -580($fp)
sw $t1, -576($fp)
sw $t2, -584($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -584($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
# self . avar <- SET local_main_Main_internal_145
sw $t0, 16($t1)
lw $t2, -544($fp)
# Moving local_main_Main_internal_145 to local_main_Main_internal_135
move $t2, $t0
sw $t2, -544($fp)
sw $t0, -584($fp)
sw $t1, -0($fp)
sw $t2, -544($fp)
j end__1586
next__1608_1:
lw $t0, -540($fp)
lw $t1, -588($fp)
la $t9, type_Object
lw $v0, 8($t0)
loop_38:
move $t8, $v0
beqz $t8, false_38
lw $v1, 0($t8)
beq $t9, $v1, true_38
lw $v0, 4($t8)
j loop_38
true_38:
li $t1, 1
j end_38
false_38:
li $t1, 0
end_38:
# If not local_main_Main_internal_146 goto next__1624_2
sw $t0, -540($fp)
sw $t1, -588($fp)
beqz $t1, next__1624_2
lw $t0, -540($fp)
lw $t1, -592($fp)
# Moving local_main_Main_avar_134 to local_main_Main_o_147
move $t1, $t0
sw $t1, -592($fp)
lw $t2, -596($fp)
# Saves in local_main_Main_internal_148 data_76
la $t2, data_76
lw $t3, -0($fp)
lw $t4, -600($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t3)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_string_IO
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t3, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -540($fp)
sw $t1, -592($fp)
sw $t2, -596($fp)
sw $t3, -0($fp)
sw $t4, -600($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -600($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
lw $t2, -604($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_abort_Object
lw $t8, 4($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -600($fp)
sw $t1, -0($fp)
sw $t2, -604($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -604($fp)
# saves the return value
move $t0, $v0
lw $t1, -608($fp)
# Moving 0 to local_main_Main_internal_151
li $t1, 0
sw $t1, -608($fp)
lw $t2, -544($fp)
# Moving local_main_Main_internal_151 to local_main_Main_internal_135
move $t2, $t1
sw $t2, -544($fp)
sw $t0, -604($fp)
sw $t1, -608($fp)
sw $t2, -544($fp)
j end__1586
next__1624_2:
la $a0, case_error
j .raise
error__1586:
la $a0, case_void_error
j .raise
end__1586:
lw $t0, -544($fp)
lw $t1, -104($fp)
# Moving local_main_Main_internal_135 to local_main_Main_internal_25
move $t1, $t0
sw $t1, -104($fp)
sw $t0, -544($fp)
sw $t1, -104($fp)
end__1240:
lw $t0, -104($fp)
lw $t1, -88($fp)
# Moving local_main_Main_internal_25 to local_main_Main_internal_21
move $t1, $t0
sw $t1, -88($fp)
sw $t0, -104($fp)
sw $t1, -88($fp)
j end__1231
true__1231:
lw $t0, -612($fp)
# Syscall to allocate memory of the object entry in heap
li $v0, 9
li $a0, 16
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_A
sw $t9, 0($v0)
# Saves the size of the node
li $t9, 16
sw $t9, 4($v0)
move $t0, $v0
# Adding Type Info addr
la $t8, types
lw $v0, 20($t8)
sw $v0, 8($t0)
# Static Dispatch of the method A
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -612($fp)
# This function will consume the arguments
jal function_A_A
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -612($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
lw $t2, -616($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_get_int_Main
lw $t8, 40($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -612($fp)
sw $t1, -0($fp)
sw $t2, -616($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -616($fp)
# saves the return value
move $t0, $v0
lw $t1, -612($fp)
lw $t2, -620($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_set_var_A
lw $t8, 20($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -616($fp)
sw $t1, -612($fp)
sw $t2, -620($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -620($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
# self . a_var <- SET local_main_Main_internal_154
sw $t0, 20($t1)
lw $t2, -624($fp)
# Syscall to allocate memory of the object entry in heap
li $v0, 9
li $a0, 16
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_B
sw $t9, 0($v0)
# Saves the size of the node
li $t9, 16
sw $t9, 4($v0)
move $t2, $v0
# Adding Type Info addr
la $t8, types
lw $v0, 24($t8)
sw $v0, 8($t2)
# Static Dispatch of the method B
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -620($fp)
sw $t1, -0($fp)
sw $t2, -624($fp)
# This function will consume the arguments
jal function_B_B
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -624($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
lw $t2, -628($fp)
# local_main_Main_avar_156 <- GET self . avar
lw $t2, 16($t1)
lw $t3, -632($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_value_A
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -624($fp)
sw $t1, -0($fp)
sw $t2, -628($fp)
sw $t3, -632($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -632($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
lw $t2, -636($fp)
# local_main_Main_a_var_158 <- GET self . a_var
lw $t2, 20($t1)
lw $t3, -640($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_value_A
lw $t8, 16($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -632($fp)
sw $t1, -0($fp)
sw $t2, -636($fp)
sw $t3, -640($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -640($fp)
# saves the return value
move $t0, $v0
lw $t1, -624($fp)
lw $t2, -644($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_method2_A
lw $t8, 28($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
lw $t3, -632($fp)
sw $t3, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -640($fp)
sw $t1, -624($fp)
sw $t2, -644($fp)
sw $t3, -632($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -644($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
# self . avar <- SET local_main_Main_internal_160
sw $t0, 16($t1)
lw $t2, -648($fp)
# Moving local_main_Main_internal_160 to local_main_Main_internal_161
move $t2, $t0
sw $t2, -648($fp)
lw $t3, -88($fp)
# Moving local_main_Main_internal_161 to local_main_Main_internal_21
move $t3, $t2
sw $t3, -88($fp)
sw $t0, -644($fp)
sw $t1, -0($fp)
sw $t2, -648($fp)
sw $t3, -88($fp)
end__1231:
lw $t0, -88($fp)
lw $t1, -652($fp)
# Moving local_main_Main_internal_21 to local_main_Main_internal_162
move $t1, $t0
sw $t1, -652($fp)
lw $t2, -8($fp)
# Moving local_main_Main_internal_162 to local_main_Main_internal_1
move $t2, $t1
sw $t2, -8($fp)
sw $t0, -88($fp)
sw $t1, -652($fp)
sw $t2, -8($fp)
j start__1172
end__1172:
lw $t0, -8($fp)
lw $t1, -656($fp)
# Moving local_main_Main_internal_1 to local_main_Main_internal_163
move $t1, $t0
sw $t1, -656($fp)
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -8($fp)
sw $t1, -656($fp)
# Removing all locals from stack
addiu $sp, $sp, 660
jr $ra

# Raise exception method
.raise:
li $v0, 4
syscall
li $v0, 17
li $a0, 1
syscall

.data
abort_msg: .asciiz "Abort called from class "
new_line: .asciiz "
"
string_abort: .asciiz "Abort called from class String
"
int_abort: .asciiz "Abort called from class Int
"
bool_abort: .asciiz "Abort called from class Bool
"
type_Object: .asciiz "Object"
type_IO: .asciiz "IO"
type_String: .asciiz "String"
type_Int: .asciiz "Int"
type_Bool: .asciiz "Bool"
type_A: .asciiz "A"
type_B: .asciiz "B"
type_C: .asciiz "C"
type_D: .asciiz "D"
type_E: .asciiz "E"
type_A2I: .asciiz "A2I"
type_Main: .asciiz "Main"
methods: .word 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
type_Void: .asciiz "Void"
types: .word 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
data_0: .asciiz "Void"
data_1: .asciiz "0"
data_2: .asciiz "1"
data_3: .asciiz "2"
data_4: .asciiz "3"
data_5: .asciiz "4"
data_6: .asciiz "5"
data_7: .asciiz "6"
data_8: .asciiz "7"
data_9: .asciiz "8"
data_10: .asciiz "9"
data_11: .asciiz ""
data_12: .asciiz "9"
data_13: .asciiz "8"
data_14: .asciiz "7"
data_15: .asciiz "6"
data_16: .asciiz "5"
data_17: .asciiz "4"
data_18: .asciiz "3"
data_19: .asciiz "2"
data_20: .asciiz "1"
data_21: .asciiz "0"
data_22: .asciiz "-"
data_23: .asciiz "+"
data_24: .asciiz "-"
data_25: .asciiz "0"
data_26: .asciiz ""
data_27: .asciiz ""
data_28: .asciiz "
	To add a number to "
data_29: .asciiz "...enter a:
"
data_30: .asciiz "	To negate "
data_31: .asciiz "...enter b:
"
data_32: .asciiz "	To find the difference between "
data_33: .asciiz "and another number...enter c:
"
data_34: .asciiz "	To find the factorial of "
data_35: .asciiz "...enter d:
"
data_36: .asciiz "	To square "
data_37: .asciiz "...enter e:
"
data_38: .asciiz "	To cube "
data_39: .asciiz "...enter f:
"
data_40: .asciiz "	To find out if "
data_41: .asciiz "is a multiple of 3...enter g:
"
data_42: .asciiz "	To divide "
data_43: .asciiz "by 8...enter h:
"
data_44: .asciiz "	To get a new number...enter j:
"
data_45: .asciiz "	To quit...enter q:

"
data_46: .asciiz "
"
data_47: .asciiz "Please enter a number...  "
data_48: .asciiz "Class type is now E
"
data_49: .asciiz "Class type is now C
"
data_50: .asciiz "Class type is now D
"
data_51: .asciiz "Class type is now B
"
data_52: .asciiz "Class type is now A
"
data_53: .asciiz "Oooops
"
data_54: .asciiz " "
data_55: .asciiz "number "
data_56: .asciiz "is odd!
"
data_57: .asciiz "is even!
"
data_58: .asciiz "a"
data_59: .asciiz "b"
data_60: .asciiz "c"
data_61: .asciiz "d"
data_62: .asciiz "e"
data_63: .asciiz "f"
data_64: .asciiz "g"
data_65: .asciiz "h"
data_66: .asciiz "j"
data_67: .asciiz "q"
data_68: .asciiz "number "
data_69: .asciiz "is equal to "
data_70: .asciiz "times 8 with a remainder of "
data_71: .asciiz "
"
data_72: .asciiz "number "
data_73: .asciiz "is not divisible by 3.
"
data_74: .asciiz "number "
data_75: .asciiz "is divisible by 3.
"
data_76: .asciiz "Oooops
"
zero_error: .asciiz "Division by zero error
"
case_void_error: .asciiz "Case on void error
"
dispatch_error: .asciiz "Dispatch on void error
"
case_error: .asciiz "Case statement without a matching branch error
"
index_error: .asciiz "Substring out of range error
"
heap_error: .asciiz "Heap overflow error
"