.text
.globl main
main:
# Save method directions in the methods array
la $v0, methods
la $t9, entry
sw $t9, 0($v0)
la $t9, function_abort_Object
sw $t9, 4($v0)
la $t9, function_type_name_Object
sw $t9, 8($v0)
la $t9, function_copy_Object
sw $t9, 12($v0)
la $t9, function_out_string_IO
sw $t9, 16($v0)
la $t9, function_out_int_IO
sw $t9, 20($v0)
la $t9, function_in_int_IO
sw $t9, 24($v0)
la $t9, function_in_string_IO
sw $t9, 28($v0)
la $t9, function_length_String
sw $t9, 32($v0)
la $t9, function_concat_String
sw $t9, 36($v0)
la $t9, function_substr_String
sw $t9, 40($v0)
la $t9, function_type_name_String
sw $t9, 44($v0)
la $t9, function_copy_String
sw $t9, 48($v0)
la $t9, function_type_name_Int
sw $t9, 52($v0)
la $t9, function_copy_Int
sw $t9, 56($v0)
la $t9, function_type_name_Bool
sw $t9, 60($v0)
la $t9, function_copy_Bool
sw $t9, 64($v0)
la $t9, function_abort_String
sw $t9, 68($v0)
la $t9, function_abort_Int
sw $t9, 72($v0)
la $t9, function_abort_Bool
sw $t9, 76($v0)
la $t9, function_Foo_Foo
sw $t9, 80($v0)
la $t9, function_doh_Foo
sw $t9, 84($v0)
la $t9, function_Bar_Bar
sw $t9, 88($v0)
la $t9, function_Razz_Razz
sw $t9, 92($v0)
la $t9, function_Bazz_Bazz
sw $t9, 96($v0)
la $t9, function_printh_Bazz
sw $t9, 100($v0)
la $t9, function_doh_Bazz
sw $t9, 104($v0)
la $t9, function_Main_Main
sw $t9, 108($v0)
la $t9, function_main_Main
sw $t9, 112($v0)
# Save types directions in the types array
la $t9, types
# Save space to locate the type info
# Allocating memory
li $v0, 9
li $a0, 12
syscall
# Filling table methods
la $t8, type_String
sw $t8, 0($v0)
# Copying direction to array
sw $v0, 0($t9)
# Table addr is now stored in t8
move $t8, $v0
# Creating the dispatch table
# Allocate dispatch table in the heap
li $v0, 9
li $a0, 28
syscall
# I save the offset of every one of the methods of this type
# Save the direction of methods
la $v1, methods
# Save the direction of the method function_length_String in a0
lw $a0, 32($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 4($v0)
# Save the direction of the method function_concat_String in a0
lw $a0, 36($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 8($v0)
# Save the direction of the method function_substr_String in a0
lw $a0, 40($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 12($v0)
# Save the direction of the method function_abort_String in a0
lw $a0, 68($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 16($v0)
# Save the direction of the method function_type_name_String in a0
lw $a0, 44($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 20($v0)
# Save the direction of the method function_copy_String in a0
lw $a0, 48($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 24($v0)
sw $v0, 8($t8)
# Allocating memory
li $v0, 9
li $a0, 12
syscall
# Filling table methods
la $t8, type_Int
sw $t8, 0($v0)
# Copying direction to array
sw $v0, 4($t9)
# Table addr is now stored in t8
move $t8, $v0
# Creating the dispatch table
# Allocate dispatch table in the heap
li $v0, 9
li $a0, 16
syscall
# I save the offset of every one of the methods of this type
# Save the direction of methods
la $v1, methods
# Save the direction of the method function_abort_Int in a0
lw $a0, 72($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 4($v0)
# Save the direction of the method function_type_name_Int in a0
lw $a0, 52($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 8($v0)
# Save the direction of the method function_copy_Int in a0
lw $a0, 56($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 12($v0)
sw $v0, 8($t8)
# Allocating memory
li $v0, 9
li $a0, 12
syscall
# Filling table methods
la $t8, type_Object
sw $t8, 0($v0)
# Copying direction to array
sw $v0, 8($t9)
# Table addr is now stored in t8
move $t8, $v0
# Creating the dispatch table
# Allocate dispatch table in the heap
li $v0, 9
li $a0, 16
syscall
# I save the offset of every one of the methods of this type
# Save the direction of methods
la $v1, methods
# Save the direction of the method function_abort_Object in a0
lw $a0, 4($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 4($v0)
# Save the direction of the method function_type_name_Object in a0
lw $a0, 8($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 8($v0)
# Save the direction of the method function_copy_Object in a0
lw $a0, 12($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 12($v0)
sw $v0, 8($t8)
# Allocating memory
li $v0, 9
li $a0, 12
syscall
# Filling table methods
la $t8, type_Bool
sw $t8, 0($v0)
# Copying direction to array
sw $v0, 12($t9)
# Table addr is now stored in t8
move $t8, $v0
# Creating the dispatch table
# Allocate dispatch table in the heap
li $v0, 9
li $a0, 16
syscall
# I save the offset of every one of the methods of this type
# Save the direction of methods
la $v1, methods
# Save the direction of the method function_abort_Bool in a0
lw $a0, 76($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 4($v0)
# Save the direction of the method function_type_name_Bool in a0
lw $a0, 60($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 8($v0)
# Save the direction of the method function_copy_Bool in a0
lw $a0, 64($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 12($v0)
sw $v0, 8($t8)
# Allocating memory
li $v0, 9
li $a0, 12
syscall
# Filling table methods
la $t8, type_IO
sw $t8, 0($v0)
# Copying direction to array
sw $v0, 16($t9)
# Table addr is now stored in t8
move $t8, $v0
# Creating the dispatch table
# Allocate dispatch table in the heap
li $v0, 9
li $a0, 32
syscall
# I save the offset of every one of the methods of this type
# Save the direction of methods
la $v1, methods
# Save the direction of the method function_abort_Object in a0
lw $a0, 4($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 4($v0)
# Save the direction of the method function_type_name_Object in a0
lw $a0, 8($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 8($v0)
# Save the direction of the method function_copy_Object in a0
lw $a0, 12($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 12($v0)
# Save the direction of the method function_out_string_IO in a0
lw $a0, 16($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 16($v0)
# Save the direction of the method function_out_int_IO in a0
lw $a0, 20($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 20($v0)
# Save the direction of the method function_in_int_IO in a0
lw $a0, 24($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 24($v0)
# Save the direction of the method function_in_string_IO in a0
lw $a0, 28($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 28($v0)
sw $v0, 8($t8)
# Allocating memory
li $v0, 9
li $a0, 12
syscall
# Filling table methods
la $t8, type_Foo
sw $t8, 0($v0)
# Copying direction to array
sw $v0, 20($t9)
# Table addr is now stored in t8
move $t8, $v0
# Creating the dispatch table
# Allocate dispatch table in the heap
li $v0, 9
li $a0, 44
syscall
# I save the offset of every one of the methods of this type
# Save the direction of methods
la $v1, methods
# Save the direction of the method function_abort_Object in a0
lw $a0, 4($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 4($v0)
# Save the direction of the method function_type_name_Object in a0
lw $a0, 8($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 8($v0)
# Save the direction of the method function_copy_Object in a0
lw $a0, 12($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 12($v0)
# Save the direction of the method function_out_string_IO in a0
lw $a0, 16($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 16($v0)
# Save the direction of the method function_out_int_IO in a0
lw $a0, 20($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 20($v0)
# Save the direction of the method function_in_string_IO in a0
lw $a0, 28($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 24($v0)
# Save the direction of the method function_in_int_IO in a0
lw $a0, 24($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 28($v0)
# Save the direction of the method function_printh_Bazz in a0
lw $a0, 100($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 32($v0)
# Save the direction of the method function_doh_Foo in a0
lw $a0, 84($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 36($v0)
# Save the direction of the method function_Foo_Foo in a0
lw $a0, 80($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 40($v0)
sw $v0, 8($t8)
# Allocating memory
li $v0, 9
li $a0, 12
syscall
# Filling table methods
la $t8, type_Bar
sw $t8, 0($v0)
# Copying direction to array
sw $v0, 24($t9)
# Table addr is now stored in t8
move $t8, $v0
# Creating the dispatch table
# Allocate dispatch table in the heap
li $v0, 9
li $a0, 48
syscall
# I save the offset of every one of the methods of this type
# Save the direction of methods
la $v1, methods
# Save the direction of the method function_abort_Object in a0
lw $a0, 4($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 4($v0)
# Save the direction of the method function_type_name_Object in a0
lw $a0, 8($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 8($v0)
# Save the direction of the method function_copy_Object in a0
lw $a0, 12($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 12($v0)
# Save the direction of the method function_out_string_IO in a0
lw $a0, 16($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 16($v0)
# Save the direction of the method function_out_int_IO in a0
lw $a0, 20($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 20($v0)
# Save the direction of the method function_in_string_IO in a0
lw $a0, 28($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 24($v0)
# Save the direction of the method function_in_int_IO in a0
lw $a0, 24($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 28($v0)
# Save the direction of the method function_printh_Bazz in a0
lw $a0, 100($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 32($v0)
# Save the direction of the method function_doh_Foo in a0
lw $a0, 84($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 36($v0)
# Save the direction of the method function_Foo_Foo in a0
lw $a0, 80($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 40($v0)
# Save the direction of the method function_Bar_Bar in a0
lw $a0, 88($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 44($v0)
sw $v0, 8($t8)
# Allocating memory
li $v0, 9
li $a0, 12
syscall
# Filling table methods
la $t8, type_Razz
sw $t8, 0($v0)
# Copying direction to array
sw $v0, 28($t9)
# Table addr is now stored in t8
move $t8, $v0
# Creating the dispatch table
# Allocate dispatch table in the heap
li $v0, 9
li $a0, 48
syscall
# I save the offset of every one of the methods of this type
# Save the direction of methods
la $v1, methods
# Save the direction of the method function_abort_Object in a0
lw $a0, 4($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 4($v0)
# Save the direction of the method function_type_name_Object in a0
lw $a0, 8($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 8($v0)
# Save the direction of the method function_copy_Object in a0
lw $a0, 12($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 12($v0)
# Save the direction of the method function_out_string_IO in a0
lw $a0, 16($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 16($v0)
# Save the direction of the method function_out_int_IO in a0
lw $a0, 20($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 20($v0)
# Save the direction of the method function_in_string_IO in a0
lw $a0, 28($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 24($v0)
# Save the direction of the method function_in_int_IO in a0
lw $a0, 24($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 28($v0)
# Save the direction of the method function_printh_Bazz in a0
lw $a0, 100($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 32($v0)
# Save the direction of the method function_doh_Foo in a0
lw $a0, 84($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 36($v0)
# Save the direction of the method function_Foo_Foo in a0
lw $a0, 80($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 40($v0)
# Save the direction of the method function_Razz_Razz in a0
lw $a0, 92($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 44($v0)
sw $v0, 8($t8)
# Allocating memory
li $v0, 9
li $a0, 12
syscall
# Filling table methods
la $t8, type_Bazz
sw $t8, 0($v0)
# Copying direction to array
sw $v0, 32($t9)
# Table addr is now stored in t8
move $t8, $v0
# Creating the dispatch table
# Allocate dispatch table in the heap
li $v0, 9
li $a0, 44
syscall
# I save the offset of every one of the methods of this type
# Save the direction of methods
la $v1, methods
# Save the direction of the method function_abort_Object in a0
lw $a0, 4($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 4($v0)
# Save the direction of the method function_type_name_Object in a0
lw $a0, 8($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 8($v0)
# Save the direction of the method function_copy_Object in a0
lw $a0, 12($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 12($v0)
# Save the direction of the method function_out_string_IO in a0
lw $a0, 16($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 16($v0)
# Save the direction of the method function_out_int_IO in a0
lw $a0, 20($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 20($v0)
# Save the direction of the method function_in_string_IO in a0
lw $a0, 28($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 24($v0)
# Save the direction of the method function_in_int_IO in a0
lw $a0, 24($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 28($v0)
# Save the direction of the method function_printh_Bazz in a0
lw $a0, 100($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 32($v0)
# Save the direction of the method function_doh_Bazz in a0
lw $a0, 104($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 36($v0)
# Save the direction of the method function_Bazz_Bazz in a0
lw $a0, 96($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 40($v0)
sw $v0, 8($t8)
# Allocating memory
li $v0, 9
li $a0, 12
syscall
# Filling table methods
la $t8, type_Main
sw $t8, 0($v0)
# Copying direction to array
sw $v0, 36($t9)
# Table addr is now stored in t8
move $t8, $v0
# Creating the dispatch table
# Allocate dispatch table in the heap
li $v0, 9
li $a0, 24
syscall
# I save the offset of every one of the methods of this type
# Save the direction of methods
la $v1, methods
# Save the direction of the method function_abort_Object in a0
lw $a0, 4($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 4($v0)
# Save the direction of the method function_type_name_Object in a0
lw $a0, 8($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 8($v0)
# Save the direction of the method function_copy_Object in a0
lw $a0, 12($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 12($v0)
# Save the direction of the method function_main_Main in a0
lw $a0, 112($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 16($v0)
# Save the direction of the method function_Main_Main in a0
lw $a0, 108($v1)
# Save the direction of the method in his position in the dispatch table
sw $a0, 20($v0)
sw $v0, 8($t8)
# Copying parents
lw $v0, 0($t9)
li $t8, 0
sw $t8, 4($v0)
lw $v0, 4($t9)
li $t8, 0
sw $t8, 4($v0)
lw $v0, 8($t9)
li $t8, 0
sw $t8, 4($v0)
lw $v0, 12($t9)
li $t8, 0
sw $t8, 4($v0)
lw $v0, 16($t9)
lw $t8, 8($t9)
sw $t8, 4($v0)
lw $v0, 20($t9)
lw $t8, 32($t9)
sw $t8, 4($v0)
lw $v0, 24($t9)
lw $t8, 28($t9)
sw $t8, 4($v0)
lw $v0, 28($t9)
lw $t8, 20($t9)
sw $t8, 4($v0)
lw $v0, 32($t9)
lw $t8, 16($t9)
sw $t8, 4($v0)
lw $v0, 36($t9)
lw $t8, 8($t9)
sw $t8, 4($v0)

entry:
# Gets the params from the stack
move $fp, $sp
# Gets the frame pointer from the stack
# Updates stack pointer pushing local__internal_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local__internal_1 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
# Syscall to allocate memory of the object entry in heap
li $v0, 9
li $a0, 28
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_Main
sw $t9, 0($v0)
# Saves the size of the node
li $t9, 28
sw $t9, 4($v0)
move $t0, $v0
# Adding Type Info addr
la $t8, types
lw $v0, 36($t8)
sw $v0, 8($t0)
# Static Dispatch of the method Main
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
# This function will consume the arguments
jal function_Main_Main
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -4($fp)
# Static Dispatch of the method main
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
lw $t1, -0($fp)
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
sw $t1, -0($fp)
# This function will consume the arguments
jal function_main_Main
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -4($fp)
# saves the return value
move $t0, $v0
li $v0, 0
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
# Removing all locals from stack
addiu $sp, $sp, 8
jr $ra


function_abort_Object:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_abort_Object_self_0 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
lw $t1, -4($fp)
# Moving self to local_abort_Object_self_0
move $t1, $t0
sw $t1, -4($fp)
# Exiting the program
li $t8, 0
# Printing abort message
li $v0, 4
la $a0, abort_msg
syscall
li $v0, 4
lw $a0, 0($t0)
syscall
li $v0, 4
la $a0, new_line
syscall
li $v0, 17
move $a0, $t8
syscall
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -4($fp)
# Removing all locals from stack
addiu $sp, $sp, 8
jr $ra


function_type_name_Object:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_type_name_Object_result_0 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
lw $t1, -4($fp)
# local_type_name_Object_result_0 <- Type of self
lw $t1, 0($t0)
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -4($fp)
# Removing all locals from stack
addiu $sp, $sp, 8
jr $ra


function_copy_Object:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_copy_Object_result_0 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
lw $t1, -4($fp)
lw $t9, 4($t0)
# Syscall to allocate memory of the object entry in heap
li $v0, 9
move $a0, $t9
syscall
move $t1, $v0
# Loop to copy every field of the previous object
# t8 the register to loop
li $t8, 0
loop_0:
# In t9 is stored the size of the object
bge $t8, $t9, exit_0
lw $a0, ($t0)
sw $a0, ($v0)
addi $v0, $v0, 4
addi $t0, $t0, 4
# Increase loop counter
addi $t8, $t8, 4
j loop_0
exit_0:
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -4($fp)
# Removing all locals from stack
addiu $sp, $sp, 8
jr $ra


function_out_string_IO:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Pops the register with the param value word
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_out_string_String_self_0 to the stack
addiu $sp, $sp, -4
lw $t0, -4($fp)
lw $t1, -8($fp)
# Moving self to local_out_string_String_self_0
move $t1, $t0
sw $t1, -8($fp)
lw $t2, -0($fp)
# Printing a string
li $v0, 4
move $a0, $t2
syscall
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
sw $t1, -8($fp)
sw $t2, -0($fp)
# Removing all locals from stack
addiu $sp, $sp, 12
jr $ra


function_out_int_IO:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Pops the register with the param value number
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_out_int_IO_self_0 to the stack
addiu $sp, $sp, -4
lw $t0, -4($fp)
lw $t1, -8($fp)
# Moving self to local_out_int_IO_self_0
move $t1, $t0
sw $t1, -8($fp)
lw $t2, -0($fp)
# Printing an int
li $v0, 1
move $a0, $t2
syscall
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
sw $t1, -8($fp)
sw $t2, -0($fp)
# Removing all locals from stack
addiu $sp, $sp, 12
jr $ra


function_in_int_IO:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_in_int_IO_result_0 to the stack
addiu $sp, $sp, -4
lw $t0, -4($fp)
# Reading a int
li $v0, 5
syscall
move $t0, $v0
move $v0, $t0
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
# Removing all locals from stack
addiu $sp, $sp, 8
jr $ra


function_in_string_IO:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_in_string_IO_result_0 to the stack
addiu $sp, $sp, -4
lw $t0, -4($fp)
# Allocating memory for the buffer
li $a0, 356
li $v0, 9
syscall
move $t0, $v0
# Reading a string
# Putting buffer in a0
move $a0, $t0
# Putting length of string in a1
li $a1, 356
li $v0, 8
syscall
# Walks to eliminate the newline
move $t9, $t0
start_1:
lb $t8, 0($t9)
beqz $t8, end_1
add $t9, $t9, 1
j start_1
end_1:
addiu $t9, $t9, -1
sb $0, ($t9)
move $v0, $t0
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
# Removing all locals from stack
addiu $sp, $sp, 8
jr $ra


function_length_String:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_length_String_result_0 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
lw $t1, -4($fp)
move $t8, $t0
# Determining the length of a string
loop_2:
lb $t9, 0($t8)
beq $t9, $zero, end_2
addi $t8, $t8, 1
j loop_2
end_2:
sub $t1, $t8, $t0
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -4($fp)
# Removing all locals from stack
addiu $sp, $sp, 8
jr $ra


function_concat_String:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Pops the register with the param value word
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_concat_String_result_0 to the stack
addiu $sp, $sp, -4
lw $t0, -4($fp)
lw $t1, -0($fp)
lw $t2, -8($fp)
# Allocating memory for the buffer
li $a0, 356
li $v0, 9
syscall
move $t2, $v0
# Copy the first string to dest
move $a0, $t0
move $a1, $t2
sw $ra, ($sp)
addiu $sp, $sp, -4
jal strcopier
# Concatenate second string on result buffer
move $a0, $t1
move $a1, $v0
jal strcopier
sb $0, 0($v0)
addiu $sp, $sp, 4
lw $ra, ($sp)
j finish_3
# Definition of strcopier
strcopier:
# In a0 is the source and in a1 is the destination
loop_3:
lb $t8, ($a0)
beq $t8, $zero, end_3
addiu $a0, $a0, 1
sb $t8, ($a1)
addiu $a1, $a1, 1
b loop_3
end_3:
move $v0, $a1
jr $ra
finish_3:
move $v0, $t2
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
sw $t1, -0($fp)
sw $t2, -8($fp)
# Removing all locals from stack
addiu $sp, $sp, 12
jr $ra


function_substr_String:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Pops the register with the param value begin
addiu $fp, $fp, 4
# Pops the register with the param value end
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_substr_String_result_0 to the stack
addiu $sp, $sp, -4
lw $t0, -4($fp)
lw $t1, -0($fp)
lw $t2, -12($fp)
# Allocating memory for the buffer
li $a0, 356
li $v0, 9
syscall
move $t2, $v0
lw $t3, -8($fp)
# Getting the substring of a node
# Move to the first position in the string
li $v0, 0
move $t8, $t3
start_4:
lb $t9, 0($t8)
beqz $t9, error_4
addi $v0, 1
bgt $v0, $t0, end_len_4
addi $t8, 1
j start_4
end_len_4:
# Saving dest to iterate over him
move $v0, $t2
loop_4:
sub $t9, $v0, $t2
beq $t9, $t1, end_4
lb $t9, 0($t8)
beqz $t9, error_4
sb $t9, 0($v0)
addi $t8, $t8, 1
addi $v0, $v0, 1
j loop_4
error_4:
la $a0, index_error
li $v0, 4
move $a0, $t3
syscall
li $v0, 1
move $a0, $t0
syscall
li $v0, 1
move $a0, $t1
syscall
j .raise
end_4:
sb $0, 0($v0)
move $v0, $t2
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
sw $t1, -0($fp)
sw $t2, -12($fp)
sw $t3, -8($fp)
# Removing all locals from stack
addiu $sp, $sp, 16
jr $ra


function_type_name_String:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_type_name_String_result_0 to the stack
addiu $sp, $sp, -4
lw $t0, -4($fp)
# Saves in local_type_name_String_result_0 type_String
la $t0, type_String
move $v0, $t0
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
# Removing all locals from stack
addiu $sp, $sp, 8
jr $ra


function_copy_String:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_copy_String_result_0 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
lw $t1, -4($fp)
# Allocating memory for the buffer
li $a0, 356
li $v0, 9
syscall
move $t1, $v0
# Copy the first string to dest
move $a0, $t0
move $a1, $t1
sw $ra, ($sp)
addiu $sp, $sp, -4
jal strcopier
sb $0, 0($v0)
addiu $sp, $sp, 4
lw $ra, ($sp)
j finish_5
finish_5:
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -4($fp)
# Removing all locals from stack
addiu $sp, $sp, 8
jr $ra


function_type_name_Int:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_type_name_Int_result_0 to the stack
addiu $sp, $sp, -4
lw $t0, -4($fp)
# Saves in local_type_name_Int_result_0 type_Int
la $t0, type_Int
move $v0, $t0
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
# Removing all locals from stack
addiu $sp, $sp, 8
jr $ra


function_copy_Int:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_copy_Int_result_0 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
lw $t1, -4($fp)
# Moving self to local_copy_Int_result_0
move $t1, $t0
sw $t1, -4($fp)
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -4($fp)
# Removing all locals from stack
addiu $sp, $sp, 8
jr $ra


function_type_name_Bool:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_type_name_Bool_result_0 to the stack
addiu $sp, $sp, -4
lw $t0, -4($fp)
# Saves in local_type_name_Bool_result_0 type_Bool
la $t0, type_Bool
move $v0, $t0
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
# Removing all locals from stack
addiu $sp, $sp, 8
jr $ra


function_copy_Bool:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_copy_result_Bool_0 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
lw $t1, -4($fp)
# Moving self to local_copy_result_Bool_0
move $t1, $t0
sw $t1, -4($fp)
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -4($fp)
# Removing all locals from stack
addiu $sp, $sp, 8
jr $ra


function_abort_String:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_abort_String_msg_0 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
# Saves in self string_abort
la $t0, string_abort
# Printing a string
li $v0, 4
move $a0, $t0
syscall
# Exiting the program
li $t8, 0
li $v0, 17
move $a0, $t8
syscall
sw $t0, -0($fp)

function_abort_Int:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_abort_Int_msg_0 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
# Saves in self int_abort
la $t0, int_abort
# Printing a string
li $v0, 4
move $a0, $t0
syscall
# Exiting the program
li $t8, 0
li $v0, 17
move $a0, $t8
syscall
sw $t0, -0($fp)

function_abort_Bool:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_abort_Bool_msg_0 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
# Saves in self bool_abort
la $t0, bool_abort
# Printing a string
li $v0, 4
move $a0, $t0
syscall
# Exiting the program
li $t8, 0
li $v0, 17
move $a0, $t8
syscall
sw $t0, -0($fp)

function_Foo_Foo:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_Foo_Foo_internal_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Foo_Foo_internal_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Foo_Foo_internal_2 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Foo_Foo_internal_3 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Foo_Foo_n_4 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Foo_Foo_internal_5 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Foo_Foo_n_6 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Foo_Foo_internal_7 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Foo_Foo_internal_8 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Foo_Foo_n_9 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Foo_Foo_internal_10 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Foo_Foo_internal_11 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Foo_Foo_n_12 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Foo_Foo_internal_13 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Foo_Foo_internal_14 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Foo_Foo_internal_15 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Foo_Foo_internal_16 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Foo_Foo_internal_17 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Foo_Foo_internal_18 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Foo_Foo_n_19 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Foo_Foo_internal_20 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Foo_Foo_n_21 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Foo_Foo_internal_22 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Foo_Foo_internal_23 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Foo_Foo_n_24 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Foo_Foo_internal_25 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Foo_Foo_internal_26 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Foo_Foo_internal_27 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Foo_Foo_internal_28 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Foo_Foo_a_29 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Foo_Foo_internal_30 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Foo_Foo_g_31 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Foo_Foo_internal_32 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Foo_Foo_internal_33 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Foo_Foo_internal_34 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Foo_Foo_internal_35 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
# self . h <- SET 1
li $t9, 1
sw $t9, 12($t0)
lw $t1, -8($fp)
# local_Foo_Foo_internal_1 <- Type of self
lw $t1, 0($t0)
lw $t2, -12($fp)
# Saves in local_Foo_Foo_internal_2 data_0
la $t2, data_0
# local_Foo_Foo_internal_1 <- local_Foo_Foo_internal_1 = local_Foo_Foo_internal_2
move $t8, $t1
move $t9, $t2
loop_6:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_6
beqz $a1, mismatch_6
seq $v0, $a0, $a1
beqz $v0, mismatch_6
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_6
mismatch_6:
li $v0, 0
j end_6
check_6:
bnez $a1, mismatch_6
li $v0, 1
end_6:
move $t1, $v0
# If local_Foo_Foo_internal_1 goto error__52
sw $t0, -0($fp)
sw $t1, -8($fp)
sw $t2, -12($fp)
bnez $t1, error__52
lw $t0, -0($fp)
lw $t1, -16($fp)
la $t9, type_Bar
lw $v0, 8($t0)
loop_7:
move $t8, $v0
beqz $t8, false_7
lw $v1, 0($t8)
beq $t9, $v1, true_7
lw $v0, 4($t8)
j loop_7
true_7:
li $t1, 1
j end_7
false_7:
li $t1, 0
end_7:
# If not local_Foo_Foo_internal_3 goto next__58_0
sw $t0, -0($fp)
sw $t1, -16($fp)
beqz $t1, next__58_0
lw $t0, -0($fp)
lw $t1, -20($fp)
# Moving self to local_Foo_Foo_n_4
move $t1, $t0
sw $t1, -20($fp)
lw $t2, -4($fp)
# Moving local_Foo_Foo_n_4 to local_Foo_Foo_internal_0
move $t2, $t1
sw $t2, -4($fp)
sw $t0, -0($fp)
sw $t1, -20($fp)
sw $t2, -4($fp)
j end__52
next__58_0:
lw $t0, -0($fp)
lw $t1, -24($fp)
la $t9, type_Razz
lw $v0, 8($t0)
loop_8:
move $t8, $v0
beqz $t8, false_8
lw $v1, 0($t8)
beq $t9, $v1, true_8
lw $v0, 4($t8)
j loop_8
true_8:
li $t1, 1
j end_8
false_8:
li $t1, 0
end_8:
# If not local_Foo_Foo_internal_5 goto next__66_1
sw $t0, -0($fp)
sw $t1, -24($fp)
beqz $t1, next__66_1
lw $t0, -0($fp)
lw $t1, -28($fp)
# Moving self to local_Foo_Foo_n_6
move $t1, $t0
sw $t1, -28($fp)
lw $t2, -32($fp)
# Syscall to allocate memory of the object entry in heap
li $v0, 9
li $a0, 48
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_Bar
sw $t9, 0($v0)
# Saves the size of the node
li $t9, 48
sw $t9, 4($v0)
move $t2, $v0
# Adding Type Info addr
la $t8, types
lw $v0, 24($t8)
sw $v0, 8($t2)
# Static Dispatch of the method Bar
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -28($fp)
sw $t2, -32($fp)
# This function will consume the arguments
jal function_Bar_Bar
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -32($fp)
# saves the return value
move $t0, $v0
lw $t1, -4($fp)
# Moving local_Foo_Foo_internal_7 to local_Foo_Foo_internal_0
move $t1, $t0
sw $t1, -4($fp)
sw $t0, -32($fp)
sw $t1, -4($fp)
j end__52
next__66_1:
lw $t0, -0($fp)
lw $t1, -36($fp)
la $t9, type_Foo
lw $v0, 8($t0)
loop_9:
move $t8, $v0
beqz $t8, false_9
lw $v1, 0($t8)
beq $t9, $v1, true_9
lw $v0, 4($t8)
j loop_9
true_9:
li $t1, 1
j end_9
false_9:
li $t1, 0
end_9:
# If not local_Foo_Foo_internal_8 goto next__77_2
sw $t0, -0($fp)
sw $t1, -36($fp)
beqz $t1, next__77_2
lw $t0, -0($fp)
lw $t1, -40($fp)
# Moving self to local_Foo_Foo_n_9
move $t1, $t0
sw $t1, -40($fp)
lw $t2, -44($fp)
# Syscall to allocate memory of the object entry in heap
li $v0, 9
li $a0, 40
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_Razz
sw $t9, 0($v0)
# Saves the size of the node
li $t9, 40
sw $t9, 4($v0)
move $t2, $v0
# Adding Type Info addr
la $t8, types
lw $v0, 28($t8)
sw $v0, 8($t2)
# Static Dispatch of the method Razz
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -40($fp)
sw $t2, -44($fp)
# This function will consume the arguments
jal function_Razz_Razz
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -44($fp)
# saves the return value
move $t0, $v0
lw $t1, -4($fp)
# Moving local_Foo_Foo_internal_10 to local_Foo_Foo_internal_0
move $t1, $t0
sw $t1, -4($fp)
sw $t0, -44($fp)
sw $t1, -4($fp)
j end__52
next__77_2:
lw $t0, -0($fp)
lw $t1, -48($fp)
la $t9, type_Bazz
lw $v0, 8($t0)
loop_10:
move $t8, $v0
beqz $t8, false_10
lw $v1, 0($t8)
beq $t9, $v1, true_10
lw $v0, 4($t8)
j loop_10
true_10:
li $t1, 1
j end_10
false_10:
li $t1, 0
end_10:
# If not local_Foo_Foo_internal_11 goto next__88_3
sw $t0, -0($fp)
sw $t1, -48($fp)
beqz $t1, next__88_3
lw $t0, -0($fp)
lw $t1, -52($fp)
# Moving self to local_Foo_Foo_n_12
move $t1, $t0
sw $t1, -52($fp)
lw $t2, -56($fp)
# Syscall to allocate memory of the object entry in heap
li $v0, 9
li $a0, 32
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_Foo
sw $t9, 0($v0)
# Saves the size of the node
li $t9, 32
sw $t9, 4($v0)
move $t2, $v0
# Adding Type Info addr
la $t8, types
lw $v0, 20($t8)
sw $v0, 8($t2)
# Static Dispatch of the method Foo
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -52($fp)
sw $t2, -56($fp)
# This function will consume the arguments
jal function_Foo_Foo
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -56($fp)
# saves the return value
move $t0, $v0
lw $t1, -4($fp)
# Moving local_Foo_Foo_internal_13 to local_Foo_Foo_internal_0
move $t1, $t0
sw $t1, -4($fp)
sw $t0, -56($fp)
sw $t1, -4($fp)
j end__52
next__88_3:
la $a0, case_error
j .raise
error__52:
la $a0, case_void_error
j .raise
end__52:
lw $t0, -4($fp)
lw $t1, -0($fp)
# self . g <- SET local_Foo_Foo_internal_0
sw $t0, 16($t1)
lw $t2, -60($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_printh_Bazz
lw $t8, 32($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
sw $t1, -0($fp)
sw $t2, -60($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -60($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
# self . i <- SET local_Foo_Foo_internal_14
sw $t0, 20($t1)
lw $t2, -68($fp)
# local_Foo_Foo_internal_16 <- Type of self
lw $t2, 0($t1)
lw $t3, -72($fp)
# Saves in local_Foo_Foo_internal_17 data_0
la $t3, data_0
# local_Foo_Foo_internal_16 <- local_Foo_Foo_internal_16 = local_Foo_Foo_internal_17
move $t8, $t2
move $t9, $t3
loop_11:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_11
beqz $a1, mismatch_11
seq $v0, $a0, $a1
beqz $v0, mismatch_11
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_11
mismatch_11:
li $v0, 0
j end_11
check_11:
bnez $a1, mismatch_11
li $v0, 1
end_11:
move $t2, $v0
# If local_Foo_Foo_internal_16 goto error__108
sw $t0, -60($fp)
sw $t1, -0($fp)
sw $t2, -68($fp)
sw $t3, -72($fp)
bnez $t2, error__108
lw $t0, -0($fp)
lw $t1, -76($fp)
la $t9, type_Bar
lw $v0, 8($t0)
loop_12:
move $t8, $v0
beqz $t8, false_12
lw $v1, 0($t8)
beq $t9, $v1, true_12
lw $v0, 4($t8)
j loop_12
true_12:
li $t1, 1
j end_12
false_12:
li $t1, 0
end_12:
# If not local_Foo_Foo_internal_18 goto next__114_0
sw $t0, -0($fp)
sw $t1, -76($fp)
beqz $t1, next__114_0
lw $t0, -0($fp)
lw $t1, -80($fp)
# Moving self to local_Foo_Foo_n_19
move $t1, $t0
sw $t1, -80($fp)
lw $t2, -64($fp)
# Moving local_Foo_Foo_n_19 to local_Foo_Foo_internal_15
move $t2, $t1
sw $t2, -64($fp)
sw $t0, -0($fp)
sw $t1, -80($fp)
sw $t2, -64($fp)
j end__108
next__114_0:
lw $t0, -0($fp)
lw $t1, -84($fp)
la $t9, type_Razz
lw $v0, 8($t0)
loop_13:
move $t8, $v0
beqz $t8, false_13
lw $v1, 0($t8)
beq $t9, $v1, true_13
lw $v0, 4($t8)
j loop_13
true_13:
li $t1, 1
j end_13
false_13:
li $t1, 0
end_13:
# If not local_Foo_Foo_internal_20 goto next__122_1
sw $t0, -0($fp)
sw $t1, -84($fp)
beqz $t1, next__122_1
lw $t0, -0($fp)
lw $t1, -88($fp)
# Moving self to local_Foo_Foo_n_21
move $t1, $t0
sw $t1, -88($fp)
lw $t2, -92($fp)
# Syscall to allocate memory of the object entry in heap
li $v0, 9
li $a0, 48
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_Bar
sw $t9, 0($v0)
# Saves the size of the node
li $t9, 48
sw $t9, 4($v0)
move $t2, $v0
# Adding Type Info addr
la $t8, types
lw $v0, 24($t8)
sw $v0, 8($t2)
# Static Dispatch of the method Bar
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -88($fp)
sw $t2, -92($fp)
# This function will consume the arguments
jal function_Bar_Bar
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -92($fp)
# saves the return value
move $t0, $v0
lw $t1, -64($fp)
# Moving local_Foo_Foo_internal_22 to local_Foo_Foo_internal_15
move $t1, $t0
sw $t1, -64($fp)
sw $t0, -92($fp)
sw $t1, -64($fp)
j end__108
next__122_1:
lw $t0, -0($fp)
lw $t1, -96($fp)
la $t9, type_Foo
lw $v0, 8($t0)
loop_14:
move $t8, $v0
beqz $t8, false_14
lw $v1, 0($t8)
beq $t9, $v1, true_14
lw $v0, 4($t8)
j loop_14
true_14:
li $t1, 1
j end_14
false_14:
li $t1, 0
end_14:
# If not local_Foo_Foo_internal_23 goto next__133_2
sw $t0, -0($fp)
sw $t1, -96($fp)
beqz $t1, next__133_2
lw $t0, -0($fp)
lw $t1, -100($fp)
# Moving self to local_Foo_Foo_n_24
move $t1, $t0
sw $t1, -100($fp)
lw $t2, -104($fp)
# Syscall to allocate memory of the object entry in heap
li $v0, 9
li $a0, 40
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_Razz
sw $t9, 0($v0)
# Saves the size of the node
li $t9, 40
sw $t9, 4($v0)
move $t2, $v0
# Adding Type Info addr
la $t8, types
lw $v0, 28($t8)
sw $v0, 8($t2)
# Static Dispatch of the method Razz
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -100($fp)
sw $t2, -104($fp)
# This function will consume the arguments
jal function_Razz_Razz
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -104($fp)
# saves the return value
move $t0, $v0
lw $t1, -64($fp)
# Moving local_Foo_Foo_internal_25 to local_Foo_Foo_internal_15
move $t1, $t0
sw $t1, -64($fp)
sw $t0, -104($fp)
sw $t1, -64($fp)
j end__108
next__133_2:
la $a0, case_error
j .raise
error__108:
la $a0, case_void_error
j .raise
end__108:
lw $t0, -64($fp)
lw $t1, -0($fp)
# self . a <- SET local_Foo_Foo_internal_15
sw $t0, 24($t1)
lw $t2, -120($fp)
# local_Foo_Foo_a_29 <- GET self . a
lw $t2, 24($t1)
lw $t3, -124($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_doh_Foo
lw $t8, 36($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -64($fp)
sw $t1, -0($fp)
sw $t2, -120($fp)
sw $t3, -124($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -124($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
lw $t2, -128($fp)
# local_Foo_Foo_g_31 <- GET self . g
lw $t2, 16($t1)
lw $t3, -132($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_doh_Foo
lw $t8, 36($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -124($fp)
sw $t1, -0($fp)
sw $t2, -128($fp)
sw $t3, -132($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -132($fp)
# saves the return value
move $t0, $v0
lw $t1, -124($fp)
lw $t2, -116($fp)
# local_Foo_Foo_internal_28 <- local_Foo_Foo_internal_30 + local_Foo_Foo_internal_32
add $t2, $t1, $t0
lw $t3, -0($fp)
lw $t4, -136($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t3)
lw $a0, 8($t9)
# Saves in t8 the direction of function_doh_Foo
lw $t8, 36($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t3, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -132($fp)
sw $t1, -124($fp)
sw $t2, -116($fp)
sw $t3, -0($fp)
sw $t4, -136($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -136($fp)
# saves the return value
move $t0, $v0
lw $t1, -116($fp)
lw $t2, -112($fp)
# local_Foo_Foo_internal_27 <- local_Foo_Foo_internal_28 + local_Foo_Foo_internal_33
add $t2, $t1, $t0
lw $t3, -0($fp)
lw $t4, -140($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t3)
lw $a0, 8($t9)
# Saves in t8 the direction of function_printh_Bazz
lw $t8, 32($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t3, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -136($fp)
sw $t1, -116($fp)
sw $t2, -112($fp)
sw $t3, -0($fp)
sw $t4, -140($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -140($fp)
# saves the return value
move $t0, $v0
lw $t1, -112($fp)
lw $t2, -108($fp)
# local_Foo_Foo_internal_26 <- local_Foo_Foo_internal_27 + local_Foo_Foo_internal_34
add $t2, $t1, $t0
lw $t3, -0($fp)
# self . b <- SET local_Foo_Foo_internal_26
sw $t2, 28($t3)
lw $t4, -144($fp)
# Moving self to local_Foo_Foo_internal_35
move $t4, $t3
sw $t4, -144($fp)
move $v0, $t4
# Empty all used registers and saves them to memory
sw $t0, -140($fp)
sw $t1, -112($fp)
sw $t2, -108($fp)
sw $t3, -0($fp)
sw $t4, -144($fp)
# Removing all locals from stack
addiu $sp, $sp, 148
jr $ra


function_doh_Foo:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_doh_Foo_i_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_doh_Foo_h_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_doh_Foo_internal_2 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_doh_Foo_h_3 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_doh_Foo_i_4 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_doh_Foo_internal_5 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
lw $t1, -8($fp)
# local_doh_Foo_h_1 <- GET self . h
lw $t1, 12($t0)
lw $t2, -4($fp)
# Moving local_doh_Foo_h_1 to local_doh_Foo_i_0
move $t2, $t1
sw $t2, -4($fp)
lw $t3, -16($fp)
# local_doh_Foo_h_3 <- GET self . h
lw $t3, 12($t0)
lw $t4, -12($fp)
# local_doh_Foo_internal_2 <- local_doh_Foo_h_3 + 2
addi $t4, $t3, 2
# self . h <- SET local_doh_Foo_internal_2
sw $t4, 12($t0)
lw $t5, -20($fp)
# local_doh_Foo_i_4 <- GET self . i
lw $t5, 20($t0)
lw $t6, -24($fp)
# Moving local_doh_Foo_i_4 to local_doh_Foo_internal_5
move $t6, $t5
sw $t6, -24($fp)
move $v0, $t6
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -8($fp)
sw $t2, -4($fp)
sw $t3, -16($fp)
sw $t4, -12($fp)
sw $t5, -20($fp)
sw $t6, -24($fp)
# Removing all locals from stack
addiu $sp, $sp, 28
jr $ra


function_Bar_Bar:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_Bar_Bar_internal_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Bar_Bar_internal_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Bar_Bar_internal_2 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Bar_Bar_internal_3 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Bar_Bar_n_4 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Bar_Bar_internal_5 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Bar_Bar_n_6 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Bar_Bar_internal_7 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Bar_Bar_internal_8 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Bar_Bar_n_9 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Bar_Bar_internal_10 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Bar_Bar_internal_11 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Bar_Bar_n_12 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Bar_Bar_internal_13 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Bar_Bar_internal_14 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Bar_Bar_internal_15 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Bar_Bar_internal_16 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Bar_Bar_internal_17 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Bar_Bar_internal_18 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Bar_Bar_n_19 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Bar_Bar_internal_20 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Bar_Bar_n_21 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Bar_Bar_internal_22 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Bar_Bar_internal_23 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Bar_Bar_n_24 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Bar_Bar_internal_25 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Bar_Bar_internal_26 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Bar_Bar_internal_27 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Bar_Bar_internal_28 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Bar_Bar_a_29 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Bar_Bar_internal_30 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Bar_Bar_g_31 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Bar_Bar_internal_32 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Bar_Bar_internal_33 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Bar_Bar_internal_34 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Bar_Bar_internal_35 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Bar_Bar_internal_36 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Bar_Bar_internal_37 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Bar_Bar_internal_38 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Bar_Bar_n_39 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Bar_Bar_internal_40 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Bar_Bar_n_41 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Bar_Bar_internal_42 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Bar_Bar_internal_43 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Bar_Bar_internal_44 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Bar_Bar_internal_45 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Bar_Bar_internal_46 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Bar_Bar_a_47 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Bar_Bar_internal_48 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Bar_Bar_g_49 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Bar_Bar_internal_50 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Bar_Bar_e_51 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Bar_Bar_internal_52 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Bar_Bar_internal_53 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Bar_Bar_internal_54 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Bar_Bar_internal_55 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Bar_Bar_internal_56 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Bar_Bar_internal_57 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
# self . h <- SET 1
li $t9, 1
sw $t9, 12($t0)
lw $t1, -8($fp)
# local_Bar_Bar_internal_1 <- Type of self
lw $t1, 0($t0)
lw $t2, -12($fp)
# Saves in local_Bar_Bar_internal_2 data_0
la $t2, data_0
# local_Bar_Bar_internal_1 <- local_Bar_Bar_internal_1 = local_Bar_Bar_internal_2
move $t8, $t1
move $t9, $t2
loop_15:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_15
beqz $a1, mismatch_15
seq $v0, $a0, $a1
beqz $v0, mismatch_15
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_15
mismatch_15:
li $v0, 0
j end_15
check_15:
bnez $a1, mismatch_15
li $v0, 1
end_15:
move $t1, $v0
# If local_Bar_Bar_internal_1 goto error__193
sw $t0, -0($fp)
sw $t1, -8($fp)
sw $t2, -12($fp)
bnez $t1, error__193
lw $t0, -0($fp)
lw $t1, -16($fp)
la $t9, type_Bar
lw $v0, 8($t0)
loop_16:
move $t8, $v0
beqz $t8, false_16
lw $v1, 0($t8)
beq $t9, $v1, true_16
lw $v0, 4($t8)
j loop_16
true_16:
li $t1, 1
j end_16
false_16:
li $t1, 0
end_16:
# If not local_Bar_Bar_internal_3 goto next__199_0
sw $t0, -0($fp)
sw $t1, -16($fp)
beqz $t1, next__199_0
lw $t0, -0($fp)
lw $t1, -20($fp)
# Moving self to local_Bar_Bar_n_4
move $t1, $t0
sw $t1, -20($fp)
lw $t2, -4($fp)
# Moving local_Bar_Bar_n_4 to local_Bar_Bar_internal_0
move $t2, $t1
sw $t2, -4($fp)
sw $t0, -0($fp)
sw $t1, -20($fp)
sw $t2, -4($fp)
j end__193
next__199_0:
lw $t0, -0($fp)
lw $t1, -24($fp)
la $t9, type_Razz
lw $v0, 8($t0)
loop_17:
move $t8, $v0
beqz $t8, false_17
lw $v1, 0($t8)
beq $t9, $v1, true_17
lw $v0, 4($t8)
j loop_17
true_17:
li $t1, 1
j end_17
false_17:
li $t1, 0
end_17:
# If not local_Bar_Bar_internal_5 goto next__207_1
sw $t0, -0($fp)
sw $t1, -24($fp)
beqz $t1, next__207_1
lw $t0, -0($fp)
lw $t1, -28($fp)
# Moving self to local_Bar_Bar_n_6
move $t1, $t0
sw $t1, -28($fp)
lw $t2, -32($fp)
# Syscall to allocate memory of the object entry in heap
li $v0, 9
li $a0, 48
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_Bar
sw $t9, 0($v0)
# Saves the size of the node
li $t9, 48
sw $t9, 4($v0)
move $t2, $v0
# Adding Type Info addr
la $t8, types
lw $v0, 24($t8)
sw $v0, 8($t2)
# Static Dispatch of the method Bar
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -28($fp)
sw $t2, -32($fp)
# This function will consume the arguments
jal function_Bar_Bar
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -32($fp)
# saves the return value
move $t0, $v0
lw $t1, -4($fp)
# Moving local_Bar_Bar_internal_7 to local_Bar_Bar_internal_0
move $t1, $t0
sw $t1, -4($fp)
sw $t0, -32($fp)
sw $t1, -4($fp)
j end__193
next__207_1:
lw $t0, -0($fp)
lw $t1, -36($fp)
la $t9, type_Foo
lw $v0, 8($t0)
loop_18:
move $t8, $v0
beqz $t8, false_18
lw $v1, 0($t8)
beq $t9, $v1, true_18
lw $v0, 4($t8)
j loop_18
true_18:
li $t1, 1
j end_18
false_18:
li $t1, 0
end_18:
# If not local_Bar_Bar_internal_8 goto next__218_2
sw $t0, -0($fp)
sw $t1, -36($fp)
beqz $t1, next__218_2
lw $t0, -0($fp)
lw $t1, -40($fp)
# Moving self to local_Bar_Bar_n_9
move $t1, $t0
sw $t1, -40($fp)
lw $t2, -44($fp)
# Syscall to allocate memory of the object entry in heap
li $v0, 9
li $a0, 40
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_Razz
sw $t9, 0($v0)
# Saves the size of the node
li $t9, 40
sw $t9, 4($v0)
move $t2, $v0
# Adding Type Info addr
la $t8, types
lw $v0, 28($t8)
sw $v0, 8($t2)
# Static Dispatch of the method Razz
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -40($fp)
sw $t2, -44($fp)
# This function will consume the arguments
jal function_Razz_Razz
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -44($fp)
# saves the return value
move $t0, $v0
lw $t1, -4($fp)
# Moving local_Bar_Bar_internal_10 to local_Bar_Bar_internal_0
move $t1, $t0
sw $t1, -4($fp)
sw $t0, -44($fp)
sw $t1, -4($fp)
j end__193
next__218_2:
lw $t0, -0($fp)
lw $t1, -48($fp)
la $t9, type_Bazz
lw $v0, 8($t0)
loop_19:
move $t8, $v0
beqz $t8, false_19
lw $v1, 0($t8)
beq $t9, $v1, true_19
lw $v0, 4($t8)
j loop_19
true_19:
li $t1, 1
j end_19
false_19:
li $t1, 0
end_19:
# If not local_Bar_Bar_internal_11 goto next__229_3
sw $t0, -0($fp)
sw $t1, -48($fp)
beqz $t1, next__229_3
lw $t0, -0($fp)
lw $t1, -52($fp)
# Moving self to local_Bar_Bar_n_12
move $t1, $t0
sw $t1, -52($fp)
lw $t2, -56($fp)
# Syscall to allocate memory of the object entry in heap
li $v0, 9
li $a0, 32
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_Foo
sw $t9, 0($v0)
# Saves the size of the node
li $t9, 32
sw $t9, 4($v0)
move $t2, $v0
# Adding Type Info addr
la $t8, types
lw $v0, 20($t8)
sw $v0, 8($t2)
# Static Dispatch of the method Foo
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -52($fp)
sw $t2, -56($fp)
# This function will consume the arguments
jal function_Foo_Foo
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -56($fp)
# saves the return value
move $t0, $v0
lw $t1, -4($fp)
# Moving local_Bar_Bar_internal_13 to local_Bar_Bar_internal_0
move $t1, $t0
sw $t1, -4($fp)
sw $t0, -56($fp)
sw $t1, -4($fp)
j end__193
next__229_3:
la $a0, case_error
j .raise
error__193:
la $a0, case_void_error
j .raise
end__193:
lw $t0, -4($fp)
lw $t1, -0($fp)
# self . g <- SET local_Bar_Bar_internal_0
sw $t0, 16($t1)
lw $t2, -60($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_printh_Bazz
lw $t8, 32($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
sw $t1, -0($fp)
sw $t2, -60($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -60($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
# self . i <- SET local_Bar_Bar_internal_14
sw $t0, 20($t1)
lw $t2, -68($fp)
# local_Bar_Bar_internal_16 <- Type of self
lw $t2, 0($t1)
lw $t3, -72($fp)
# Saves in local_Bar_Bar_internal_17 data_0
la $t3, data_0
# local_Bar_Bar_internal_16 <- local_Bar_Bar_internal_16 = local_Bar_Bar_internal_17
move $t8, $t2
move $t9, $t3
loop_20:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_20
beqz $a1, mismatch_20
seq $v0, $a0, $a1
beqz $v0, mismatch_20
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_20
mismatch_20:
li $v0, 0
j end_20
check_20:
bnez $a1, mismatch_20
li $v0, 1
end_20:
move $t2, $v0
# If local_Bar_Bar_internal_16 goto error__249
sw $t0, -60($fp)
sw $t1, -0($fp)
sw $t2, -68($fp)
sw $t3, -72($fp)
bnez $t2, error__249
lw $t0, -0($fp)
lw $t1, -76($fp)
la $t9, type_Bar
lw $v0, 8($t0)
loop_21:
move $t8, $v0
beqz $t8, false_21
lw $v1, 0($t8)
beq $t9, $v1, true_21
lw $v0, 4($t8)
j loop_21
true_21:
li $t1, 1
j end_21
false_21:
li $t1, 0
end_21:
# If not local_Bar_Bar_internal_18 goto next__255_0
sw $t0, -0($fp)
sw $t1, -76($fp)
beqz $t1, next__255_0
lw $t0, -0($fp)
lw $t1, -80($fp)
# Moving self to local_Bar_Bar_n_19
move $t1, $t0
sw $t1, -80($fp)
lw $t2, -64($fp)
# Moving local_Bar_Bar_n_19 to local_Bar_Bar_internal_15
move $t2, $t1
sw $t2, -64($fp)
sw $t0, -0($fp)
sw $t1, -80($fp)
sw $t2, -64($fp)
j end__249
next__255_0:
lw $t0, -0($fp)
lw $t1, -84($fp)
la $t9, type_Razz
lw $v0, 8($t0)
loop_22:
move $t8, $v0
beqz $t8, false_22
lw $v1, 0($t8)
beq $t9, $v1, true_22
lw $v0, 4($t8)
j loop_22
true_22:
li $t1, 1
j end_22
false_22:
li $t1, 0
end_22:
# If not local_Bar_Bar_internal_20 goto next__263_1
sw $t0, -0($fp)
sw $t1, -84($fp)
beqz $t1, next__263_1
lw $t0, -0($fp)
lw $t1, -88($fp)
# Moving self to local_Bar_Bar_n_21
move $t1, $t0
sw $t1, -88($fp)
lw $t2, -92($fp)
# Syscall to allocate memory of the object entry in heap
li $v0, 9
li $a0, 48
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_Bar
sw $t9, 0($v0)
# Saves the size of the node
li $t9, 48
sw $t9, 4($v0)
move $t2, $v0
# Adding Type Info addr
la $t8, types
lw $v0, 24($t8)
sw $v0, 8($t2)
# Static Dispatch of the method Bar
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -88($fp)
sw $t2, -92($fp)
# This function will consume the arguments
jal function_Bar_Bar
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -92($fp)
# saves the return value
move $t0, $v0
lw $t1, -64($fp)
# Moving local_Bar_Bar_internal_22 to local_Bar_Bar_internal_15
move $t1, $t0
sw $t1, -64($fp)
sw $t0, -92($fp)
sw $t1, -64($fp)
j end__249
next__263_1:
lw $t0, -0($fp)
lw $t1, -96($fp)
la $t9, type_Foo
lw $v0, 8($t0)
loop_23:
move $t8, $v0
beqz $t8, false_23
lw $v1, 0($t8)
beq $t9, $v1, true_23
lw $v0, 4($t8)
j loop_23
true_23:
li $t1, 1
j end_23
false_23:
li $t1, 0
end_23:
# If not local_Bar_Bar_internal_23 goto next__274_2
sw $t0, -0($fp)
sw $t1, -96($fp)
beqz $t1, next__274_2
lw $t0, -0($fp)
lw $t1, -100($fp)
# Moving self to local_Bar_Bar_n_24
move $t1, $t0
sw $t1, -100($fp)
lw $t2, -104($fp)
# Syscall to allocate memory of the object entry in heap
li $v0, 9
li $a0, 40
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_Razz
sw $t9, 0($v0)
# Saves the size of the node
li $t9, 40
sw $t9, 4($v0)
move $t2, $v0
# Adding Type Info addr
la $t8, types
lw $v0, 28($t8)
sw $v0, 8($t2)
# Static Dispatch of the method Razz
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -100($fp)
sw $t2, -104($fp)
# This function will consume the arguments
jal function_Razz_Razz
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -104($fp)
# saves the return value
move $t0, $v0
lw $t1, -64($fp)
# Moving local_Bar_Bar_internal_25 to local_Bar_Bar_internal_15
move $t1, $t0
sw $t1, -64($fp)
sw $t0, -104($fp)
sw $t1, -64($fp)
j end__249
next__274_2:
la $a0, case_error
j .raise
error__249:
la $a0, case_void_error
j .raise
end__249:
lw $t0, -64($fp)
lw $t1, -0($fp)
# self . a <- SET local_Bar_Bar_internal_15
sw $t0, 24($t1)
lw $t2, -120($fp)
# local_Bar_Bar_a_29 <- GET self . a
lw $t2, 24($t1)
lw $t3, -124($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_doh_Foo
lw $t8, 36($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -64($fp)
sw $t1, -0($fp)
sw $t2, -120($fp)
sw $t3, -124($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -124($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
lw $t2, -128($fp)
# local_Bar_Bar_g_31 <- GET self . g
lw $t2, 16($t1)
lw $t3, -132($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_doh_Foo
lw $t8, 36($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -124($fp)
sw $t1, -0($fp)
sw $t2, -128($fp)
sw $t3, -132($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -132($fp)
# saves the return value
move $t0, $v0
lw $t1, -124($fp)
lw $t2, -116($fp)
# local_Bar_Bar_internal_28 <- local_Bar_Bar_internal_30 + local_Bar_Bar_internal_32
add $t2, $t1, $t0
lw $t3, -0($fp)
lw $t4, -136($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t3)
lw $a0, 8($t9)
# Saves in t8 the direction of function_doh_Foo
lw $t8, 36($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t3, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -132($fp)
sw $t1, -124($fp)
sw $t2, -116($fp)
sw $t3, -0($fp)
sw $t4, -136($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -136($fp)
# saves the return value
move $t0, $v0
lw $t1, -116($fp)
lw $t2, -112($fp)
# local_Bar_Bar_internal_27 <- local_Bar_Bar_internal_28 + local_Bar_Bar_internal_33
add $t2, $t1, $t0
lw $t3, -0($fp)
lw $t4, -140($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t3)
lw $a0, 8($t9)
# Saves in t8 the direction of function_printh_Bazz
lw $t8, 32($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t3, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -136($fp)
sw $t1, -116($fp)
sw $t2, -112($fp)
sw $t3, -0($fp)
sw $t4, -140($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -140($fp)
# saves the return value
move $t0, $v0
lw $t1, -112($fp)
lw $t2, -108($fp)
# local_Bar_Bar_internal_26 <- local_Bar_Bar_internal_27 + local_Bar_Bar_internal_34
add $t2, $t1, $t0
lw $t3, -0($fp)
# self . b <- SET local_Bar_Bar_internal_26
sw $t2, 28($t3)
lw $t4, -148($fp)
# local_Bar_Bar_internal_36 <- Type of self
lw $t4, 0($t3)
lw $t5, -152($fp)
# Saves in local_Bar_Bar_internal_37 data_0
la $t5, data_0
# local_Bar_Bar_internal_36 <- local_Bar_Bar_internal_36 = local_Bar_Bar_internal_37
move $t8, $t4
move $t9, $t5
loop_24:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_24
beqz $a1, mismatch_24
seq $v0, $a0, $a1
beqz $v0, mismatch_24
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_24
mismatch_24:
li $v0, 0
j end_24
check_24:
bnez $a1, mismatch_24
li $v0, 1
end_24:
move $t4, $v0
# If local_Bar_Bar_internal_36 goto error__312
sw $t0, -140($fp)
sw $t1, -112($fp)
sw $t2, -108($fp)
sw $t3, -0($fp)
sw $t4, -148($fp)
sw $t5, -152($fp)
bnez $t4, error__312
lw $t0, -0($fp)
lw $t1, -156($fp)
la $t9, type_Bar
lw $v0, 8($t0)
loop_25:
move $t8, $v0
beqz $t8, false_25
lw $v1, 0($t8)
beq $t9, $v1, true_25
lw $v0, 4($t8)
j loop_25
true_25:
li $t1, 1
j end_25
false_25:
li $t1, 0
end_25:
# If not local_Bar_Bar_internal_38 goto next__318_0
sw $t0, -0($fp)
sw $t1, -156($fp)
beqz $t1, next__318_0
lw $t0, -0($fp)
lw $t1, -160($fp)
# Moving self to local_Bar_Bar_n_39
move $t1, $t0
sw $t1, -160($fp)
lw $t2, -144($fp)
# Moving local_Bar_Bar_n_39 to local_Bar_Bar_internal_35
move $t2, $t1
sw $t2, -144($fp)
sw $t0, -0($fp)
sw $t1, -160($fp)
sw $t2, -144($fp)
j end__312
next__318_0:
lw $t0, -0($fp)
lw $t1, -164($fp)
la $t9, type_Razz
lw $v0, 8($t0)
loop_26:
move $t8, $v0
beqz $t8, false_26
lw $v1, 0($t8)
beq $t9, $v1, true_26
lw $v0, 4($t8)
j loop_26
true_26:
li $t1, 1
j end_26
false_26:
li $t1, 0
end_26:
# If not local_Bar_Bar_internal_40 goto next__326_1
sw $t0, -0($fp)
sw $t1, -164($fp)
beqz $t1, next__326_1
lw $t0, -0($fp)
lw $t1, -168($fp)
# Moving self to local_Bar_Bar_n_41
move $t1, $t0
sw $t1, -168($fp)
lw $t2, -172($fp)
# Syscall to allocate memory of the object entry in heap
li $v0, 9
li $a0, 48
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_Bar
sw $t9, 0($v0)
# Saves the size of the node
li $t9, 48
sw $t9, 4($v0)
move $t2, $v0
# Adding Type Info addr
la $t8, types
lw $v0, 24($t8)
sw $v0, 8($t2)
# Static Dispatch of the method Bar
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -168($fp)
sw $t2, -172($fp)
# This function will consume the arguments
jal function_Bar_Bar
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -172($fp)
# saves the return value
move $t0, $v0
lw $t1, -144($fp)
# Moving local_Bar_Bar_internal_42 to local_Bar_Bar_internal_35
move $t1, $t0
sw $t1, -144($fp)
sw $t0, -172($fp)
sw $t1, -144($fp)
j end__312
next__326_1:
la $a0, case_error
j .raise
error__312:
la $a0, case_void_error
j .raise
end__312:
lw $t0, -144($fp)
lw $t1, -0($fp)
# self . e <- SET local_Bar_Bar_internal_35
sw $t0, 32($t1)
lw $t2, -192($fp)
# local_Bar_Bar_a_47 <- GET self . a
lw $t2, 24($t1)
lw $t3, -196($fp)
# Static Dispatch of the method doh
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -144($fp)
sw $t1, -0($fp)
sw $t2, -192($fp)
sw $t3, -196($fp)
# This function will consume the arguments
jal function_doh_Bazz
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -196($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
lw $t2, -200($fp)
# local_Bar_Bar_g_49 <- GET self . g
lw $t2, 16($t1)
lw $t3, -204($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_doh_Foo
lw $t8, 36($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -196($fp)
sw $t1, -0($fp)
sw $t2, -200($fp)
sw $t3, -204($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -204($fp)
# saves the return value
move $t0, $v0
lw $t1, -196($fp)
lw $t2, -188($fp)
# local_Bar_Bar_internal_46 <- local_Bar_Bar_internal_48 + local_Bar_Bar_internal_50
add $t2, $t1, $t0
lw $t3, -0($fp)
lw $t4, -208($fp)
# local_Bar_Bar_e_51 <- GET self . e
lw $t4, 32($t3)
lw $t5, -212($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t4)
lw $a0, 8($t9)
# Saves in t8 the direction of function_doh_Foo
lw $t8, 36($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t4, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -204($fp)
sw $t1, -196($fp)
sw $t2, -188($fp)
sw $t3, -0($fp)
sw $t4, -208($fp)
sw $t5, -212($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -212($fp)
# saves the return value
move $t0, $v0
lw $t1, -188($fp)
lw $t2, -184($fp)
# local_Bar_Bar_internal_45 <- local_Bar_Bar_internal_46 + local_Bar_Bar_internal_52
add $t2, $t1, $t0
lw $t3, -0($fp)
lw $t4, -216($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t3)
lw $a0, 8($t9)
# Saves in t8 the direction of function_doh_Foo
lw $t8, 36($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t3, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -212($fp)
sw $t1, -188($fp)
sw $t2, -184($fp)
sw $t3, -0($fp)
sw $t4, -216($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -216($fp)
# saves the return value
move $t0, $v0
lw $t1, -184($fp)
lw $t2, -180($fp)
# local_Bar_Bar_internal_44 <- local_Bar_Bar_internal_45 + local_Bar_Bar_internal_53
add $t2, $t1, $t0
lw $t3, -0($fp)
lw $t4, -220($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t3)
lw $a0, 8($t9)
# Saves in t8 the direction of function_printh_Bazz
lw $t8, 32($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t3, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -216($fp)
sw $t1, -184($fp)
sw $t2, -180($fp)
sw $t3, -0($fp)
sw $t4, -220($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -220($fp)
# saves the return value
move $t0, $v0
lw $t1, -180($fp)
lw $t2, -176($fp)
# local_Bar_Bar_internal_43 <- local_Bar_Bar_internal_44 + local_Bar_Bar_internal_54
add $t2, $t1, $t0
lw $t3, -0($fp)
# self . f <- SET local_Bar_Bar_internal_43
sw $t2, 36($t3)
lw $t4, -224($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t3)
lw $a0, 8($t9)
# Saves in t8 the direction of function_doh_Foo
lw $t8, 36($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t3, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -220($fp)
sw $t1, -180($fp)
sw $t2, -176($fp)
sw $t3, -0($fp)
sw $t4, -224($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -224($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
# self . c <- SET local_Bar_Bar_internal_55
sw $t0, 40($t1)
lw $t2, -228($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_printh_Bazz
lw $t8, 32($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -224($fp)
sw $t1, -0($fp)
sw $t2, -228($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -228($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
# self . d <- SET local_Bar_Bar_internal_56
sw $t0, 44($t1)
lw $t2, -232($fp)
# Moving self to local_Bar_Bar_internal_57
move $t2, $t1
sw $t2, -232($fp)
move $v0, $t2
# Empty all used registers and saves them to memory
sw $t0, -228($fp)
sw $t1, -0($fp)
sw $t2, -232($fp)
# Removing all locals from stack
addiu $sp, $sp, 236
jr $ra


function_Razz_Razz:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_Razz_Razz_internal_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Razz_Razz_internal_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Razz_Razz_internal_2 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Razz_Razz_internal_3 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Razz_Razz_n_4 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Razz_Razz_internal_5 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Razz_Razz_n_6 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Razz_Razz_internal_7 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Razz_Razz_internal_8 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Razz_Razz_n_9 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Razz_Razz_internal_10 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Razz_Razz_internal_11 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Razz_Razz_n_12 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Razz_Razz_internal_13 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Razz_Razz_internal_14 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Razz_Razz_internal_15 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Razz_Razz_internal_16 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Razz_Razz_internal_17 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Razz_Razz_internal_18 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Razz_Razz_n_19 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Razz_Razz_internal_20 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Razz_Razz_n_21 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Razz_Razz_internal_22 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Razz_Razz_internal_23 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Razz_Razz_n_24 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Razz_Razz_internal_25 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Razz_Razz_internal_26 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Razz_Razz_internal_27 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Razz_Razz_internal_28 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Razz_Razz_a_29 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Razz_Razz_internal_30 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Razz_Razz_g_31 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Razz_Razz_internal_32 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Razz_Razz_internal_33 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Razz_Razz_internal_34 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Razz_Razz_internal_35 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Razz_Razz_internal_36 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Razz_Razz_internal_37 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Razz_Razz_internal_38 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Razz_Razz_n_39 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Razz_Razz_internal_40 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Razz_Razz_n_41 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Razz_Razz_internal_42 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Razz_Razz_internal_43 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Razz_Razz_internal_44 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Razz_Razz_internal_45 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Razz_Razz_internal_46 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Razz_Razz_a_47 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Razz_Razz_internal_48 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Razz_Razz_g_49 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Razz_Razz_internal_50 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Razz_Razz_e_51 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Razz_Razz_internal_52 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Razz_Razz_internal_53 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Razz_Razz_internal_54 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Razz_Razz_internal_55 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
# self . h <- SET 1
li $t9, 1
sw $t9, 12($t0)
lw $t1, -8($fp)
# local_Razz_Razz_internal_1 <- Type of self
lw $t1, 0($t0)
lw $t2, -12($fp)
# Saves in local_Razz_Razz_internal_2 data_0
la $t2, data_0
# local_Razz_Razz_internal_1 <- local_Razz_Razz_internal_1 = local_Razz_Razz_internal_2
move $t8, $t1
move $t9, $t2
loop_27:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_27
beqz $a1, mismatch_27
seq $v0, $a0, $a1
beqz $v0, mismatch_27
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_27
mismatch_27:
li $v0, 0
j end_27
check_27:
bnez $a1, mismatch_27
li $v0, 1
end_27:
move $t1, $v0
# If local_Razz_Razz_internal_1 goto error__383
sw $t0, -0($fp)
sw $t1, -8($fp)
sw $t2, -12($fp)
bnez $t1, error__383
lw $t0, -0($fp)
lw $t1, -16($fp)
la $t9, type_Bar
lw $v0, 8($t0)
loop_28:
move $t8, $v0
beqz $t8, false_28
lw $v1, 0($t8)
beq $t9, $v1, true_28
lw $v0, 4($t8)
j loop_28
true_28:
li $t1, 1
j end_28
false_28:
li $t1, 0
end_28:
# If not local_Razz_Razz_internal_3 goto next__389_0
sw $t0, -0($fp)
sw $t1, -16($fp)
beqz $t1, next__389_0
lw $t0, -0($fp)
lw $t1, -20($fp)
# Moving self to local_Razz_Razz_n_4
move $t1, $t0
sw $t1, -20($fp)
lw $t2, -4($fp)
# Moving local_Razz_Razz_n_4 to local_Razz_Razz_internal_0
move $t2, $t1
sw $t2, -4($fp)
sw $t0, -0($fp)
sw $t1, -20($fp)
sw $t2, -4($fp)
j end__383
next__389_0:
lw $t0, -0($fp)
lw $t1, -24($fp)
la $t9, type_Razz
lw $v0, 8($t0)
loop_29:
move $t8, $v0
beqz $t8, false_29
lw $v1, 0($t8)
beq $t9, $v1, true_29
lw $v0, 4($t8)
j loop_29
true_29:
li $t1, 1
j end_29
false_29:
li $t1, 0
end_29:
# If not local_Razz_Razz_internal_5 goto next__397_1
sw $t0, -0($fp)
sw $t1, -24($fp)
beqz $t1, next__397_1
lw $t0, -0($fp)
lw $t1, -28($fp)
# Moving self to local_Razz_Razz_n_6
move $t1, $t0
sw $t1, -28($fp)
lw $t2, -32($fp)
# Syscall to allocate memory of the object entry in heap
li $v0, 9
li $a0, 48
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_Bar
sw $t9, 0($v0)
# Saves the size of the node
li $t9, 48
sw $t9, 4($v0)
move $t2, $v0
# Adding Type Info addr
la $t8, types
lw $v0, 24($t8)
sw $v0, 8($t2)
# Static Dispatch of the method Bar
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -28($fp)
sw $t2, -32($fp)
# This function will consume the arguments
jal function_Bar_Bar
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -32($fp)
# saves the return value
move $t0, $v0
lw $t1, -4($fp)
# Moving local_Razz_Razz_internal_7 to local_Razz_Razz_internal_0
move $t1, $t0
sw $t1, -4($fp)
sw $t0, -32($fp)
sw $t1, -4($fp)
j end__383
next__397_1:
lw $t0, -0($fp)
lw $t1, -36($fp)
la $t9, type_Foo
lw $v0, 8($t0)
loop_30:
move $t8, $v0
beqz $t8, false_30
lw $v1, 0($t8)
beq $t9, $v1, true_30
lw $v0, 4($t8)
j loop_30
true_30:
li $t1, 1
j end_30
false_30:
li $t1, 0
end_30:
# If not local_Razz_Razz_internal_8 goto next__408_2
sw $t0, -0($fp)
sw $t1, -36($fp)
beqz $t1, next__408_2
lw $t0, -0($fp)
lw $t1, -40($fp)
# Moving self to local_Razz_Razz_n_9
move $t1, $t0
sw $t1, -40($fp)
lw $t2, -44($fp)
# Syscall to allocate memory of the object entry in heap
li $v0, 9
li $a0, 40
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_Razz
sw $t9, 0($v0)
# Saves the size of the node
li $t9, 40
sw $t9, 4($v0)
move $t2, $v0
# Adding Type Info addr
la $t8, types
lw $v0, 28($t8)
sw $v0, 8($t2)
# Static Dispatch of the method Razz
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -40($fp)
sw $t2, -44($fp)
# This function will consume the arguments
jal function_Razz_Razz
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -44($fp)
# saves the return value
move $t0, $v0
lw $t1, -4($fp)
# Moving local_Razz_Razz_internal_10 to local_Razz_Razz_internal_0
move $t1, $t0
sw $t1, -4($fp)
sw $t0, -44($fp)
sw $t1, -4($fp)
j end__383
next__408_2:
lw $t0, -0($fp)
lw $t1, -48($fp)
la $t9, type_Bazz
lw $v0, 8($t0)
loop_31:
move $t8, $v0
beqz $t8, false_31
lw $v1, 0($t8)
beq $t9, $v1, true_31
lw $v0, 4($t8)
j loop_31
true_31:
li $t1, 1
j end_31
false_31:
li $t1, 0
end_31:
# If not local_Razz_Razz_internal_11 goto next__419_3
sw $t0, -0($fp)
sw $t1, -48($fp)
beqz $t1, next__419_3
lw $t0, -0($fp)
lw $t1, -52($fp)
# Moving self to local_Razz_Razz_n_12
move $t1, $t0
sw $t1, -52($fp)
lw $t2, -56($fp)
# Syscall to allocate memory of the object entry in heap
li $v0, 9
li $a0, 32
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_Foo
sw $t9, 0($v0)
# Saves the size of the node
li $t9, 32
sw $t9, 4($v0)
move $t2, $v0
# Adding Type Info addr
la $t8, types
lw $v0, 20($t8)
sw $v0, 8($t2)
# Static Dispatch of the method Foo
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -52($fp)
sw $t2, -56($fp)
# This function will consume the arguments
jal function_Foo_Foo
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -56($fp)
# saves the return value
move $t0, $v0
lw $t1, -4($fp)
# Moving local_Razz_Razz_internal_13 to local_Razz_Razz_internal_0
move $t1, $t0
sw $t1, -4($fp)
sw $t0, -56($fp)
sw $t1, -4($fp)
j end__383
next__419_3:
la $a0, case_error
j .raise
error__383:
la $a0, case_void_error
j .raise
end__383:
lw $t0, -4($fp)
lw $t1, -0($fp)
# self . g <- SET local_Razz_Razz_internal_0
sw $t0, 16($t1)
lw $t2, -60($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_printh_Bazz
lw $t8, 32($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
sw $t1, -0($fp)
sw $t2, -60($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -60($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
# self . i <- SET local_Razz_Razz_internal_14
sw $t0, 20($t1)
lw $t2, -68($fp)
# local_Razz_Razz_internal_16 <- Type of self
lw $t2, 0($t1)
lw $t3, -72($fp)
# Saves in local_Razz_Razz_internal_17 data_0
la $t3, data_0
# local_Razz_Razz_internal_16 <- local_Razz_Razz_internal_16 = local_Razz_Razz_internal_17
move $t8, $t2
move $t9, $t3
loop_32:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_32
beqz $a1, mismatch_32
seq $v0, $a0, $a1
beqz $v0, mismatch_32
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_32
mismatch_32:
li $v0, 0
j end_32
check_32:
bnez $a1, mismatch_32
li $v0, 1
end_32:
move $t2, $v0
# If local_Razz_Razz_internal_16 goto error__439
sw $t0, -60($fp)
sw $t1, -0($fp)
sw $t2, -68($fp)
sw $t3, -72($fp)
bnez $t2, error__439
lw $t0, -0($fp)
lw $t1, -76($fp)
la $t9, type_Bar
lw $v0, 8($t0)
loop_33:
move $t8, $v0
beqz $t8, false_33
lw $v1, 0($t8)
beq $t9, $v1, true_33
lw $v0, 4($t8)
j loop_33
true_33:
li $t1, 1
j end_33
false_33:
li $t1, 0
end_33:
# If not local_Razz_Razz_internal_18 goto next__445_0
sw $t0, -0($fp)
sw $t1, -76($fp)
beqz $t1, next__445_0
lw $t0, -0($fp)
lw $t1, -80($fp)
# Moving self to local_Razz_Razz_n_19
move $t1, $t0
sw $t1, -80($fp)
lw $t2, -64($fp)
# Moving local_Razz_Razz_n_19 to local_Razz_Razz_internal_15
move $t2, $t1
sw $t2, -64($fp)
sw $t0, -0($fp)
sw $t1, -80($fp)
sw $t2, -64($fp)
j end__439
next__445_0:
lw $t0, -0($fp)
lw $t1, -84($fp)
la $t9, type_Razz
lw $v0, 8($t0)
loop_34:
move $t8, $v0
beqz $t8, false_34
lw $v1, 0($t8)
beq $t9, $v1, true_34
lw $v0, 4($t8)
j loop_34
true_34:
li $t1, 1
j end_34
false_34:
li $t1, 0
end_34:
# If not local_Razz_Razz_internal_20 goto next__453_1
sw $t0, -0($fp)
sw $t1, -84($fp)
beqz $t1, next__453_1
lw $t0, -0($fp)
lw $t1, -88($fp)
# Moving self to local_Razz_Razz_n_21
move $t1, $t0
sw $t1, -88($fp)
lw $t2, -92($fp)
# Syscall to allocate memory of the object entry in heap
li $v0, 9
li $a0, 48
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_Bar
sw $t9, 0($v0)
# Saves the size of the node
li $t9, 48
sw $t9, 4($v0)
move $t2, $v0
# Adding Type Info addr
la $t8, types
lw $v0, 24($t8)
sw $v0, 8($t2)
# Static Dispatch of the method Bar
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -88($fp)
sw $t2, -92($fp)
# This function will consume the arguments
jal function_Bar_Bar
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -92($fp)
# saves the return value
move $t0, $v0
lw $t1, -64($fp)
# Moving local_Razz_Razz_internal_22 to local_Razz_Razz_internal_15
move $t1, $t0
sw $t1, -64($fp)
sw $t0, -92($fp)
sw $t1, -64($fp)
j end__439
next__453_1:
lw $t0, -0($fp)
lw $t1, -96($fp)
la $t9, type_Foo
lw $v0, 8($t0)
loop_35:
move $t8, $v0
beqz $t8, false_35
lw $v1, 0($t8)
beq $t9, $v1, true_35
lw $v0, 4($t8)
j loop_35
true_35:
li $t1, 1
j end_35
false_35:
li $t1, 0
end_35:
# If not local_Razz_Razz_internal_23 goto next__464_2
sw $t0, -0($fp)
sw $t1, -96($fp)
beqz $t1, next__464_2
lw $t0, -0($fp)
lw $t1, -100($fp)
# Moving self to local_Razz_Razz_n_24
move $t1, $t0
sw $t1, -100($fp)
lw $t2, -104($fp)
# Syscall to allocate memory of the object entry in heap
li $v0, 9
li $a0, 40
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_Razz
sw $t9, 0($v0)
# Saves the size of the node
li $t9, 40
sw $t9, 4($v0)
move $t2, $v0
# Adding Type Info addr
la $t8, types
lw $v0, 28($t8)
sw $v0, 8($t2)
# Static Dispatch of the method Razz
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -100($fp)
sw $t2, -104($fp)
# This function will consume the arguments
jal function_Razz_Razz
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -104($fp)
# saves the return value
move $t0, $v0
lw $t1, -64($fp)
# Moving local_Razz_Razz_internal_25 to local_Razz_Razz_internal_15
move $t1, $t0
sw $t1, -64($fp)
sw $t0, -104($fp)
sw $t1, -64($fp)
j end__439
next__464_2:
la $a0, case_error
j .raise
error__439:
la $a0, case_void_error
j .raise
end__439:
lw $t0, -64($fp)
lw $t1, -0($fp)
# self . a <- SET local_Razz_Razz_internal_15
sw $t0, 24($t1)
lw $t2, -120($fp)
# local_Razz_Razz_a_29 <- GET self . a
lw $t2, 24($t1)
lw $t3, -124($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_doh_Foo
lw $t8, 36($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -64($fp)
sw $t1, -0($fp)
sw $t2, -120($fp)
sw $t3, -124($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -124($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
lw $t2, -128($fp)
# local_Razz_Razz_g_31 <- GET self . g
lw $t2, 16($t1)
lw $t3, -132($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_doh_Foo
lw $t8, 36($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -124($fp)
sw $t1, -0($fp)
sw $t2, -128($fp)
sw $t3, -132($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -132($fp)
# saves the return value
move $t0, $v0
lw $t1, -124($fp)
lw $t2, -116($fp)
# local_Razz_Razz_internal_28 <- local_Razz_Razz_internal_30 + local_Razz_Razz_internal_32
add $t2, $t1, $t0
lw $t3, -0($fp)
lw $t4, -136($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t3)
lw $a0, 8($t9)
# Saves in t8 the direction of function_doh_Foo
lw $t8, 36($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t3, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -132($fp)
sw $t1, -124($fp)
sw $t2, -116($fp)
sw $t3, -0($fp)
sw $t4, -136($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -136($fp)
# saves the return value
move $t0, $v0
lw $t1, -116($fp)
lw $t2, -112($fp)
# local_Razz_Razz_internal_27 <- local_Razz_Razz_internal_28 + local_Razz_Razz_internal_33
add $t2, $t1, $t0
lw $t3, -0($fp)
lw $t4, -140($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t3)
lw $a0, 8($t9)
# Saves in t8 the direction of function_printh_Bazz
lw $t8, 32($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t3, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -136($fp)
sw $t1, -116($fp)
sw $t2, -112($fp)
sw $t3, -0($fp)
sw $t4, -140($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -140($fp)
# saves the return value
move $t0, $v0
lw $t1, -112($fp)
lw $t2, -108($fp)
# local_Razz_Razz_internal_26 <- local_Razz_Razz_internal_27 + local_Razz_Razz_internal_34
add $t2, $t1, $t0
lw $t3, -0($fp)
# self . b <- SET local_Razz_Razz_internal_26
sw $t2, 28($t3)
lw $t4, -148($fp)
# local_Razz_Razz_internal_36 <- Type of self
lw $t4, 0($t3)
lw $t5, -152($fp)
# Saves in local_Razz_Razz_internal_37 data_0
la $t5, data_0
# local_Razz_Razz_internal_36 <- local_Razz_Razz_internal_36 = local_Razz_Razz_internal_37
move $t8, $t4
move $t9, $t5
loop_36:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_36
beqz $a1, mismatch_36
seq $v0, $a0, $a1
beqz $v0, mismatch_36
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_36
mismatch_36:
li $v0, 0
j end_36
check_36:
bnez $a1, mismatch_36
li $v0, 1
end_36:
move $t4, $v0
# If local_Razz_Razz_internal_36 goto error__502
sw $t0, -140($fp)
sw $t1, -112($fp)
sw $t2, -108($fp)
sw $t3, -0($fp)
sw $t4, -148($fp)
sw $t5, -152($fp)
bnez $t4, error__502
lw $t0, -0($fp)
lw $t1, -156($fp)
la $t9, type_Bar
lw $v0, 8($t0)
loop_37:
move $t8, $v0
beqz $t8, false_37
lw $v1, 0($t8)
beq $t9, $v1, true_37
lw $v0, 4($t8)
j loop_37
true_37:
li $t1, 1
j end_37
false_37:
li $t1, 0
end_37:
# If not local_Razz_Razz_internal_38 goto next__508_0
sw $t0, -0($fp)
sw $t1, -156($fp)
beqz $t1, next__508_0
lw $t0, -0($fp)
lw $t1, -160($fp)
# Moving self to local_Razz_Razz_n_39
move $t1, $t0
sw $t1, -160($fp)
lw $t2, -144($fp)
# Moving local_Razz_Razz_n_39 to local_Razz_Razz_internal_35
move $t2, $t1
sw $t2, -144($fp)
sw $t0, -0($fp)
sw $t1, -160($fp)
sw $t2, -144($fp)
j end__502
next__508_0:
lw $t0, -0($fp)
lw $t1, -164($fp)
la $t9, type_Razz
lw $v0, 8($t0)
loop_38:
move $t8, $v0
beqz $t8, false_38
lw $v1, 0($t8)
beq $t9, $v1, true_38
lw $v0, 4($t8)
j loop_38
true_38:
li $t1, 1
j end_38
false_38:
li $t1, 0
end_38:
# If not local_Razz_Razz_internal_40 goto next__516_1
sw $t0, -0($fp)
sw $t1, -164($fp)
beqz $t1, next__516_1
lw $t0, -0($fp)
lw $t1, -168($fp)
# Moving self to local_Razz_Razz_n_41
move $t1, $t0
sw $t1, -168($fp)
lw $t2, -172($fp)
# Syscall to allocate memory of the object entry in heap
li $v0, 9
li $a0, 48
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_Bar
sw $t9, 0($v0)
# Saves the size of the node
li $t9, 48
sw $t9, 4($v0)
move $t2, $v0
# Adding Type Info addr
la $t8, types
lw $v0, 24($t8)
sw $v0, 8($t2)
# Static Dispatch of the method Bar
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -168($fp)
sw $t2, -172($fp)
# This function will consume the arguments
jal function_Bar_Bar
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -172($fp)
# saves the return value
move $t0, $v0
lw $t1, -144($fp)
# Moving local_Razz_Razz_internal_42 to local_Razz_Razz_internal_35
move $t1, $t0
sw $t1, -144($fp)
sw $t0, -172($fp)
sw $t1, -144($fp)
j end__502
next__516_1:
la $a0, case_error
j .raise
error__502:
la $a0, case_void_error
j .raise
end__502:
lw $t0, -144($fp)
lw $t1, -0($fp)
# self . e <- SET local_Razz_Razz_internal_35
sw $t0, 32($t1)
lw $t2, -192($fp)
# local_Razz_Razz_a_47 <- GET self . a
lw $t2, 24($t1)
lw $t3, -196($fp)
# Static Dispatch of the method doh
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -144($fp)
sw $t1, -0($fp)
sw $t2, -192($fp)
sw $t3, -196($fp)
# This function will consume the arguments
jal function_doh_Bazz
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -196($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
lw $t2, -200($fp)
# local_Razz_Razz_g_49 <- GET self . g
lw $t2, 16($t1)
lw $t3, -204($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t2)
lw $a0, 8($t9)
# Saves in t8 the direction of function_doh_Foo
lw $t8, 36($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -196($fp)
sw $t1, -0($fp)
sw $t2, -200($fp)
sw $t3, -204($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -204($fp)
# saves the return value
move $t0, $v0
lw $t1, -196($fp)
lw $t2, -188($fp)
# local_Razz_Razz_internal_46 <- local_Razz_Razz_internal_48 + local_Razz_Razz_internal_50
add $t2, $t1, $t0
lw $t3, -0($fp)
lw $t4, -208($fp)
# local_Razz_Razz_e_51 <- GET self . e
lw $t4, 32($t3)
lw $t5, -212($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t4)
lw $a0, 8($t9)
# Saves in t8 the direction of function_doh_Foo
lw $t8, 36($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t4, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -204($fp)
sw $t1, -196($fp)
sw $t2, -188($fp)
sw $t3, -0($fp)
sw $t4, -208($fp)
sw $t5, -212($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -212($fp)
# saves the return value
move $t0, $v0
lw $t1, -188($fp)
lw $t2, -184($fp)
# local_Razz_Razz_internal_45 <- local_Razz_Razz_internal_46 + local_Razz_Razz_internal_52
add $t2, $t1, $t0
lw $t3, -0($fp)
lw $t4, -216($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t3)
lw $a0, 8($t9)
# Saves in t8 the direction of function_doh_Foo
lw $t8, 36($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t3, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -212($fp)
sw $t1, -188($fp)
sw $t2, -184($fp)
sw $t3, -0($fp)
sw $t4, -216($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -216($fp)
# saves the return value
move $t0, $v0
lw $t1, -184($fp)
lw $t2, -180($fp)
# local_Razz_Razz_internal_44 <- local_Razz_Razz_internal_45 + local_Razz_Razz_internal_53
add $t2, $t1, $t0
lw $t3, -0($fp)
lw $t4, -220($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t3)
lw $a0, 8($t9)
# Saves in t8 the direction of function_printh_Bazz
lw $t8, 32($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t3, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -216($fp)
sw $t1, -184($fp)
sw $t2, -180($fp)
sw $t3, -0($fp)
sw $t4, -220($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -220($fp)
# saves the return value
move $t0, $v0
lw $t1, -180($fp)
lw $t2, -176($fp)
# local_Razz_Razz_internal_43 <- local_Razz_Razz_internal_44 + local_Razz_Razz_internal_54
add $t2, $t1, $t0
lw $t3, -0($fp)
# self . f <- SET local_Razz_Razz_internal_43
sw $t2, 36($t3)
lw $t4, -224($fp)
# Moving self to local_Razz_Razz_internal_55
move $t4, $t3
sw $t4, -224($fp)
move $v0, $t4
# Empty all used registers and saves them to memory
sw $t0, -220($fp)
sw $t1, -180($fp)
sw $t2, -176($fp)
sw $t3, -0($fp)
sw $t4, -224($fp)
# Removing all locals from stack
addiu $sp, $sp, 228
jr $ra


function_Bazz_Bazz:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_Bazz_Bazz_internal_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Bazz_Bazz_internal_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Bazz_Bazz_internal_2 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Bazz_Bazz_internal_3 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Bazz_Bazz_n_4 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Bazz_Bazz_internal_5 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Bazz_Bazz_n_6 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Bazz_Bazz_internal_7 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Bazz_Bazz_internal_8 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Bazz_Bazz_n_9 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Bazz_Bazz_internal_10 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Bazz_Bazz_internal_11 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Bazz_Bazz_n_12 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Bazz_Bazz_internal_13 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Bazz_Bazz_internal_14 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Bazz_Bazz_internal_15 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
# self . h <- SET 1
li $t9, 1
sw $t9, 12($t0)
lw $t1, -8($fp)
# local_Bazz_Bazz_internal_1 <- Type of self
lw $t1, 0($t0)
lw $t2, -12($fp)
# Saves in local_Bazz_Bazz_internal_2 data_0
la $t2, data_0
# local_Bazz_Bazz_internal_1 <- local_Bazz_Bazz_internal_1 = local_Bazz_Bazz_internal_2
move $t8, $t1
move $t9, $t2
loop_39:
lb $a0, ($t8)
lb $a1, ($t9)
beqz $a0, check_39
beqz $a1, mismatch_39
seq $v0, $a0, $a1
beqz $v0, mismatch_39
addi $t8, $t8, 1
addi $t9, $t9, 1
j loop_39
mismatch_39:
li $v0, 0
j end_39
check_39:
bnez $a1, mismatch_39
li $v0, 1
end_39:
move $t1, $v0
# If local_Bazz_Bazz_internal_1 goto error__567
sw $t0, -0($fp)
sw $t1, -8($fp)
sw $t2, -12($fp)
bnez $t1, error__567
lw $t0, -0($fp)
lw $t1, -16($fp)
la $t9, type_Bar
lw $v0, 8($t0)
loop_40:
move $t8, $v0
beqz $t8, false_40
lw $v1, 0($t8)
beq $t9, $v1, true_40
lw $v0, 4($t8)
j loop_40
true_40:
li $t1, 1
j end_40
false_40:
li $t1, 0
end_40:
# If not local_Bazz_Bazz_internal_3 goto next__573_0
sw $t0, -0($fp)
sw $t1, -16($fp)
beqz $t1, next__573_0
lw $t0, -0($fp)
lw $t1, -20($fp)
# Moving self to local_Bazz_Bazz_n_4
move $t1, $t0
sw $t1, -20($fp)
lw $t2, -4($fp)
# Moving local_Bazz_Bazz_n_4 to local_Bazz_Bazz_internal_0
move $t2, $t1
sw $t2, -4($fp)
sw $t0, -0($fp)
sw $t1, -20($fp)
sw $t2, -4($fp)
j end__567
next__573_0:
lw $t0, -0($fp)
lw $t1, -24($fp)
la $t9, type_Razz
lw $v0, 8($t0)
loop_41:
move $t8, $v0
beqz $t8, false_41
lw $v1, 0($t8)
beq $t9, $v1, true_41
lw $v0, 4($t8)
j loop_41
true_41:
li $t1, 1
j end_41
false_41:
li $t1, 0
end_41:
# If not local_Bazz_Bazz_internal_5 goto next__581_1
sw $t0, -0($fp)
sw $t1, -24($fp)
beqz $t1, next__581_1
lw $t0, -0($fp)
lw $t1, -28($fp)
# Moving self to local_Bazz_Bazz_n_6
move $t1, $t0
sw $t1, -28($fp)
lw $t2, -32($fp)
# Syscall to allocate memory of the object entry in heap
li $v0, 9
li $a0, 48
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_Bar
sw $t9, 0($v0)
# Saves the size of the node
li $t9, 48
sw $t9, 4($v0)
move $t2, $v0
# Adding Type Info addr
la $t8, types
lw $v0, 24($t8)
sw $v0, 8($t2)
# Static Dispatch of the method Bar
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -28($fp)
sw $t2, -32($fp)
# This function will consume the arguments
jal function_Bar_Bar
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -32($fp)
# saves the return value
move $t0, $v0
lw $t1, -4($fp)
# Moving local_Bazz_Bazz_internal_7 to local_Bazz_Bazz_internal_0
move $t1, $t0
sw $t1, -4($fp)
sw $t0, -32($fp)
sw $t1, -4($fp)
j end__567
next__581_1:
lw $t0, -0($fp)
lw $t1, -36($fp)
la $t9, type_Foo
lw $v0, 8($t0)
loop_42:
move $t8, $v0
beqz $t8, false_42
lw $v1, 0($t8)
beq $t9, $v1, true_42
lw $v0, 4($t8)
j loop_42
true_42:
li $t1, 1
j end_42
false_42:
li $t1, 0
end_42:
# If not local_Bazz_Bazz_internal_8 goto next__592_2
sw $t0, -0($fp)
sw $t1, -36($fp)
beqz $t1, next__592_2
lw $t0, -0($fp)
lw $t1, -40($fp)
# Moving self to local_Bazz_Bazz_n_9
move $t1, $t0
sw $t1, -40($fp)
lw $t2, -44($fp)
# Syscall to allocate memory of the object entry in heap
li $v0, 9
li $a0, 40
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_Razz
sw $t9, 0($v0)
# Saves the size of the node
li $t9, 40
sw $t9, 4($v0)
move $t2, $v0
# Adding Type Info addr
la $t8, types
lw $v0, 28($t8)
sw $v0, 8($t2)
# Static Dispatch of the method Razz
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -40($fp)
sw $t2, -44($fp)
# This function will consume the arguments
jal function_Razz_Razz
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -44($fp)
# saves the return value
move $t0, $v0
lw $t1, -4($fp)
# Moving local_Bazz_Bazz_internal_10 to local_Bazz_Bazz_internal_0
move $t1, $t0
sw $t1, -4($fp)
sw $t0, -44($fp)
sw $t1, -4($fp)
j end__567
next__592_2:
lw $t0, -0($fp)
lw $t1, -48($fp)
la $t9, type_Bazz
lw $v0, 8($t0)
loop_43:
move $t8, $v0
beqz $t8, false_43
lw $v1, 0($t8)
beq $t9, $v1, true_43
lw $v0, 4($t8)
j loop_43
true_43:
li $t1, 1
j end_43
false_43:
li $t1, 0
end_43:
# If not local_Bazz_Bazz_internal_11 goto next__603_3
sw $t0, -0($fp)
sw $t1, -48($fp)
beqz $t1, next__603_3
lw $t0, -0($fp)
lw $t1, -52($fp)
# Moving self to local_Bazz_Bazz_n_12
move $t1, $t0
sw $t1, -52($fp)
lw $t2, -56($fp)
# Syscall to allocate memory of the object entry in heap
li $v0, 9
li $a0, 32
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_Foo
sw $t9, 0($v0)
# Saves the size of the node
li $t9, 32
sw $t9, 4($v0)
move $t2, $v0
# Adding Type Info addr
la $t8, types
lw $v0, 20($t8)
sw $v0, 8($t2)
# Static Dispatch of the method Foo
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -52($fp)
sw $t2, -56($fp)
# This function will consume the arguments
jal function_Foo_Foo
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -56($fp)
# saves the return value
move $t0, $v0
lw $t1, -4($fp)
# Moving local_Bazz_Bazz_internal_13 to local_Bazz_Bazz_internal_0
move $t1, $t0
sw $t1, -4($fp)
sw $t0, -56($fp)
sw $t1, -4($fp)
j end__567
next__603_3:
la $a0, case_error
j .raise
error__567:
la $a0, case_void_error
j .raise
end__567:
lw $t0, -4($fp)
lw $t1, -0($fp)
# self . g <- SET local_Bazz_Bazz_internal_0
sw $t0, 16($t1)
lw $t2, -60($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t1)
lw $a0, 8($t9)
# Saves in t8 the direction of function_printh_Bazz
lw $t8, 32($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
sw $t1, -0($fp)
sw $t2, -60($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -60($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
# self . i <- SET local_Bazz_Bazz_internal_14
sw $t0, 20($t1)
lw $t2, -64($fp)
# Moving self to local_Bazz_Bazz_internal_15
move $t2, $t1
sw $t2, -64($fp)
move $v0, $t2
# Empty all used registers and saves them to memory
sw $t0, -60($fp)
sw $t1, -0($fp)
sw $t2, -64($fp)
# Removing all locals from stack
addiu $sp, $sp, 68
jr $ra


function_printh_Bazz:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_printh_Bazz_h_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_printh_Bazz_internal_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_printh_Bazz_internal_2 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
lw $t1, -4($fp)
# local_printh_Bazz_h_0 <- GET self . h
lw $t1, 12($t0)
lw $t2, -8($fp)
# Find the actual name in the dispatch table
# Gets in a0 the actual direction of the dispatch table
lw $t9, 8($t0)
lw $a0, 8($t9)
# Saves in t8 the direction of function_out_int_IO
lw $t8, 20($a0)
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t1, ($sp)
addiu $sp, $sp, -4
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -4($fp)
sw $t2, -8($fp)
# This function will consume the arguments
jal $t8
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -8($fp)
# saves the return value
move $t0, $v0
lw $t1, -12($fp)
# Moving 0 to local_printh_Bazz_internal_2
li $t1, 0
sw $t1, -12($fp)
move $v0, $t1
# Empty all used registers and saves them to memory
sw $t0, -8($fp)
sw $t1, -12($fp)
# Removing all locals from stack
addiu $sp, $sp, 16
jr $ra


function_doh_Bazz:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_doh_Bazz_i_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_doh_Bazz_h_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_doh_Bazz_internal_2 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_doh_Bazz_h_3 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_doh_Bazz_i_4 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_doh_Bazz_internal_5 to the stack
addiu $sp, $sp, -4
lw $t0, -0($fp)
lw $t1, -8($fp)
# local_doh_Bazz_h_1 <- GET self . h
lw $t1, 12($t0)
lw $t2, -4($fp)
# Moving local_doh_Bazz_h_1 to local_doh_Bazz_i_0
move $t2, $t1
sw $t2, -4($fp)
lw $t3, -16($fp)
# local_doh_Bazz_h_3 <- GET self . h
lw $t3, 12($t0)
lw $t4, -12($fp)
# local_doh_Bazz_internal_2 <- local_doh_Bazz_h_3 + 1
addi $t4, $t3, 1
# self . h <- SET local_doh_Bazz_internal_2
sw $t4, 12($t0)
lw $t5, -20($fp)
# local_doh_Bazz_i_4 <- GET self . i
lw $t5, 20($t0)
lw $t6, -24($fp)
# Moving local_doh_Bazz_i_4 to local_doh_Bazz_internal_5
move $t6, $t5
sw $t6, -24($fp)
move $v0, $t6
# Empty all used registers and saves them to memory
sw $t0, -0($fp)
sw $t1, -8($fp)
sw $t2, -4($fp)
sw $t3, -16($fp)
sw $t4, -12($fp)
sw $t5, -20($fp)
sw $t6, -24($fp)
# Removing all locals from stack
addiu $sp, $sp, 28
jr $ra


function_Main_Main:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_Main_Main_internal_0 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Main_Main_internal_1 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Main_Main_internal_2 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Main_Main_internal_3 to the stack
addiu $sp, $sp, -4
# Updates stack pointer pushing local_Main_Main_internal_4 to the stack
addiu $sp, $sp, -4
lw $t0, -4($fp)
# Syscall to allocate memory of the object entry in heap
li $v0, 9
li $a0, 24
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_Bazz
sw $t9, 0($v0)
# Saves the size of the node
li $t9, 24
sw $t9, 4($v0)
move $t0, $v0
# Adding Type Info addr
la $t8, types
lw $v0, 32($t8)
sw $v0, 8($t0)
# Static Dispatch of the method Bazz
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t0, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
# This function will consume the arguments
jal function_Bazz_Bazz
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -4($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
# self . a <- SET local_Main_Main_internal_0
sw $t0, 12($t1)
lw $t2, -8($fp)
# Syscall to allocate memory of the object entry in heap
li $v0, 9
li $a0, 32
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_Foo
sw $t9, 0($v0)
# Saves the size of the node
li $t9, 32
sw $t9, 4($v0)
move $t2, $v0
# Adding Type Info addr
la $t8, types
lw $v0, 20($t8)
sw $v0, 8($t2)
# Static Dispatch of the method Foo
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
sw $t1, -0($fp)
sw $t2, -8($fp)
# This function will consume the arguments
jal function_Foo_Foo
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -8($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
# self . b <- SET local_Main_Main_internal_1
sw $t0, 16($t1)
lw $t2, -12($fp)
# Syscall to allocate memory of the object entry in heap
li $v0, 9
li $a0, 40
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_Razz
sw $t9, 0($v0)
# Saves the size of the node
li $t9, 40
sw $t9, 4($v0)
move $t2, $v0
# Adding Type Info addr
la $t8, types
lw $v0, 28($t8)
sw $v0, 8($t2)
# Static Dispatch of the method Razz
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -8($fp)
sw $t1, -0($fp)
sw $t2, -12($fp)
# This function will consume the arguments
jal function_Razz_Razz
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -12($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
# self . c <- SET local_Main_Main_internal_2
sw $t0, 20($t1)
lw $t2, -16($fp)
# Syscall to allocate memory of the object entry in heap
li $v0, 9
li $a0, 48
syscall
# Loads the name of the variable and saves the name like the first field
la $t9, type_Bar
sw $t9, 0($v0)
# Saves the size of the node
li $t9, 48
sw $t9, 4($v0)
move $t2, $v0
# Adding Type Info addr
la $t8, types
lw $v0, 24($t8)
sw $v0, 8($t2)
# Static Dispatch of the method Bar
sw $fp, ($sp)
addiu $sp, $sp, -4
sw $ra, ($sp)
addiu $sp, $sp, -4
# Push the arguments to the stack
# The rest of the arguments are push into the stack
sw $t2, ($sp)
addiu $sp, $sp, -4
# Empty all used registers and saves them to memory
sw $t0, -12($fp)
sw $t1, -0($fp)
sw $t2, -16($fp)
# This function will consume the arguments
jal function_Bar_Bar
# Pop ra register of return function of the stack
addiu $sp, $sp, 4
lw $ra, ($sp)
# Pop fp register from the stack
addiu $sp, $sp, 4
lw $fp, ($sp)
lw $t0, -16($fp)
# saves the return value
move $t0, $v0
lw $t1, -0($fp)
# self . d <- SET local_Main_Main_internal_3
sw $t0, 24($t1)
lw $t2, -20($fp)
# Moving self to local_Main_Main_internal_4
move $t2, $t1
sw $t2, -20($fp)
move $v0, $t2
# Empty all used registers and saves them to memory
sw $t0, -16($fp)
sw $t1, -0($fp)
sw $t2, -20($fp)
# Removing all locals from stack
addiu $sp, $sp, 24
jr $ra


function_main_Main:
# Gets the params from the stack
move $fp, $sp
# Pops the register with the param value self
addiu $fp, $fp, 4
# Gets the frame pointer from the stack
# Updates stack pointer pushing local_main_Main_internal_0 to the stack
addiu $sp, $sp, -4
lw $t0, -4($fp)
# Saves in local_main_Main_internal_0 data_1
la $t0, data_1
move $v0, $t0
# Empty all used registers and saves them to memory
sw $t0, -4($fp)
# Removing all locals from stack
addiu $sp, $sp, 8
jr $ra

# Raise exception method
.raise:
li $v0, 4
syscall
li $v0, 17
li $a0, 1
syscall

.data
abort_msg: .asciiz "Abort called from class "
new_line: .asciiz "
"
string_abort: .asciiz "Abort called from class String
"
int_abort: .asciiz "Abort called from class Int
"
bool_abort: .asciiz "Abort called from class Bool
"
type_Object: .asciiz "Object"
type_IO: .asciiz "IO"
type_String: .asciiz "String"
type_Int: .asciiz "Int"
type_Bool: .asciiz "Bool"
type_Foo: .asciiz "Foo"
type_Bar: .asciiz "Bar"
type_Razz: .asciiz "Razz"
type_Bazz: .asciiz "Bazz"
type_Main: .asciiz "Main"
methods: .word 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
type_Void: .asciiz "Void"
types: .word 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
data_0: .asciiz "Void"
data_1: .asciiz "do nothing"
zero_error: .asciiz "Division by zero error
"
case_void_error: .asciiz "Case on void error
"
dispatch_error: .asciiz "Dispatch on void error
"
case_error: .asciiz "Case statement without a matching branch error
"
index_error: .asciiz "Substring out of range error
"
heap_error: .asciiz "Heap overflow error
"